"use strict";

const conversions = require("webidl-conversions");
const utils = require("./utils.js");

const implSymbol = utils.implSymbol;
const ctorRegistrySymbol = utils.ctorRegistrySymbol;

const interfaceName = "CSSStyleDeclaration";

exports.is = value => {
  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;
};
exports.isImpl = value => {
  return utils.isObject(value) && value instanceof Impl.implementation;
};
exports.convert = (globalObject, value, { context = "The provided value" } = {}) => {
  if (exports.is(value)) {
    return utils.implForWrapper(value);
  }
  throw new globalObject.TypeError(`${context} is not of type 'CSSStyleDeclaration'.`);
};

function makeWrapper(globalObject, newTarget) {
  let proto;
  if (newTarget !== undefined) {
    proto = newTarget.prototype;
  }

  if (!utils.isObject(proto)) {
    proto = globalObject[ctorRegistrySymbol]["CSSStyleDeclaration"].prototype;
  }

  return Object.create(proto);
}

function makeProxy(wrapper, globalObject) {
  let proxyHandler = proxyHandlerCache.get(globalObject);
  if (proxyHandler === undefined) {
    proxyHandler = new ProxyHandler(globalObject);
    proxyHandlerCache.set(globalObject, proxyHandler);
  }
  return new Proxy(wrapper, proxyHandler);
}

exports.create = (globalObject, constructorArgs, privateData) => {
  const wrapper = makeWrapper(globalObject);
  return exports.setup(wrapper, globalObject, constructorArgs, privateData);
};

exports.createImpl = (globalObject, constructorArgs, privateData) => {
  const wrapper = exports.create(globalObject, constructorArgs, privateData);
  return utils.implForWrapper(wrapper);
};

exports._internalSetup = (wrapper, globalObject) => {};

exports.setup = (wrapper, globalObject, constructorArgs = [], privateData = {}) => {
  privateData.wrapper = wrapper;

  exports._internalSetup(wrapper, globalObject);
  Object.defineProperty(wrapper, implSymbol, {
    value: new Impl.implementation(globalObject, constructorArgs, privateData),
    configurable: true
  });

  wrapper = makeProxy(wrapper, globalObject);

  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;
  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  }
  return wrapper;
};

exports.new = (globalObject, newTarget) => {
  let wrapper = makeWrapper(globalObject, newTarget);

  exports._internalSetup(wrapper, globalObject);
  Object.defineProperty(wrapper, implSymbol, {
    value: Object.create(Impl.implementation.prototype),
    configurable: true
  });

  wrapper = makeProxy(wrapper, globalObject);

  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;
  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  }
  return wrapper[implSymbol];
};

const exposed = new Set(["Window"]);

exports.install = (globalObject, globalNames) => {
  if (!globalNames.some(globalName => exposed.has(globalName))) {
    return;
  }

  const ctorRegistry = utils.initCtorRegistry(globalObject);
  class CSSStyleDeclaration {
    constructor() {
      throw new globalObject.TypeError("Illegal constructor");
    }

    item(index) {
      const esValue = this !== null && this !== undefined ? this : globalObject;
      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'item' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      if (arguments.length < 1) {
        throw new globalObject.TypeError(
          `Failed to execute 'item' on 'CSSStyleDeclaration': 1 argument required, but only ${arguments.length} present.`
        );
      }
      const args = [];
      {
        let curArg = arguments[0];
        curArg = conversions["unsigned long"](curArg, {
          context: "Failed to execute 'item' on 'CSSStyleDeclaration': parameter 1",
          globals: globalObject
        });
        args.push(curArg);
      }
      return utils.tryWrapperForImpl(esValue[implSymbol].item(...args));
    }

    getPropertyValue(property) {
      const esValue = this !== null && this !== undefined ? this : globalObject;
      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'getPropertyValue' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      if (arguments.length < 1) {
        throw new globalObject.TypeError(
          `Failed to execute 'getPropertyValue' on 'CSSStyleDeclaration': 1 argument required, but only ${arguments.length} present.`
        );
      }
      const args = [];
      {
        let curArg = arguments[0];
        curArg = conversions["DOMString"](curArg, {
          context: "Failed to execute 'getPropertyValue' on 'CSSStyleDeclaration': parameter 1",
          globals: globalObject
        });
        args.push(curArg);
      }
      return utils.tryWrapperForImpl(esValue[implSymbol].getPropertyValue(...args));
    }

    getPropertyPriority(property) {
      const esValue = this !== null && this !== undefined ? this : globalObject;
      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'getPropertyPriority' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      if (arguments.length < 1) {
        throw new globalObject.TypeError(
          `Failed to execute 'getPropertyPriority' on 'CSSStyleDeclaration': 1 argument required, but only ${arguments.length} present.`
        );
      }
      const args = [];
      {
        let curArg = arguments[0];
        curArg = conversions["DOMString"](curArg, {
          context: "Failed to execute 'getPropertyPriority' on 'CSSStyleDeclaration': parameter 1",
          globals: globalObject
        });
        args.push(curArg);
      }
      return utils.tryWrapperForImpl(esValue[implSymbol].getPropertyPriority(...args));
    }

    setProperty(property, value) {
      const esValue = this !== null && this !== undefined ? this : globalObject;
      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'setProperty' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      if (arguments.length < 2) {
        throw new globalObject.TypeError(
          `Failed to execute 'setProperty' on 'CSSStyleDeclaration': 2 arguments required, but only ${arguments.length} present.`
        );
      }
      const args = [];
      {
        let curArg = arguments[0];
        curArg = conversions["DOMString"](curArg, {
          context: "Failed to execute 'setProperty' on 'CSSStyleDeclaration': parameter 1",
          globals: globalObject
        });
        args.push(curArg);
      }
      {
        let curArg = arguments[1];
        curArg = conversions["DOMString"](curArg, {
          context: "Failed to execute 'setProperty' on 'CSSStyleDeclaration': parameter 2",
          globals: globalObject,
          treatNullAsEmptyString: true
        });
        args.push(curArg);
      }
      {
        let curArg = arguments[2];
        if (curArg !== undefined) {
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'setProperty' on 'CSSStyleDeclaration': parameter 3",
            globals: globalObject,
            treatNullAsEmptyString: true
          });
        } else {
          curArg = "";
        }
        args.push(curArg);
      }
      return utils.tryWrapperForImpl(esValue[implSymbol].setProperty(...args));
    }

    removeProperty(property) {
      const esValue = this !== null && this !== undefined ? this : globalObject;
      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'removeProperty' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      if (arguments.length < 1) {
        throw new globalObject.TypeError(
          `Failed to execute 'removeProperty' on 'CSSStyleDeclaration': 1 argument required, but only ${arguments.length} present.`
        );
      }
      const args = [];
      {
        let curArg = arguments[0];
        curArg = conversions["DOMString"](curArg, {
          context: "Failed to execute 'removeProperty' on 'CSSStyleDeclaration': parameter 1",
          globals: globalObject
        });
        args.push(curArg);
      }
      return utils.tryWrapperForImpl(esValue[implSymbol].removeProperty(...args));
    }

    get cssText() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get cssText' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return utils.tryWrapperForImpl(esValue[implSymbol]["cssText"]);
    }

    set cssText(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set cssText' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'cssText' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject
      });

      esValue[implSymbol]["cssText"] = V;
    }

    get length() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get length' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol]["length"];
    }

    get parentRule() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get parentRule' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return utils.tryWrapperForImpl(esValue[implSymbol]["parentRule"]);
    }

    get cssFloat() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get cssFloat' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("float");
    }

    set cssFloat(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set cssFloat' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'cssFloat' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("float", V);
    }

    get gridColumnGap() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get gridColumnGap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("grid-column-gap");
    }

    set gridColumnGap(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set gridColumnGap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'gridColumnGap' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("grid-column-gap", V);
    }

    get gridGap() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get gridGap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("grid-gap");
    }

    set gridGap(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set gridGap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'gridGap' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("grid-gap", V);
    }

    get gridRowGap() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get gridRowGap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("grid-row-gap");
    }

    set gridRowGap(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set gridRowGap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'gridRowGap' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("grid-row-gap", V);
    }

    get WebkitAppearance() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitAppearance' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-appearance");
    }

    set WebkitAppearance(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitAppearance' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitAppearance' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-appearance", V);
    }

    get WebkitAlignContent() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitAlignContent' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-align-content");
    }

    set WebkitAlignContent(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitAlignContent' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitAlignContent' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-align-content", V);
    }

    get WebkitAlignItems() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitAlignItems' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-align-items");
    }

    set WebkitAlignItems(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitAlignItems' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitAlignItems' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-align-items", V);
    }

    get WebkitAlignSelf() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitAlignSelf' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-align-self");
    }

    set WebkitAlignSelf(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitAlignSelf' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitAlignSelf' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-align-self", V);
    }

    get WebkitAnimation() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitAnimation' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-animation");
    }

    set WebkitAnimation(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitAnimation' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitAnimation' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-animation", V);
    }

    get WebkitAnimationDelay() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitAnimationDelay' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-animation-delay");
    }

    set WebkitAnimationDelay(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitAnimationDelay' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitAnimationDelay' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-animation-delay", V);
    }

    get WebkitAnimationDirection() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitAnimationDirection' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-animation-direction");
    }

    set WebkitAnimationDirection(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitAnimationDirection' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitAnimationDirection' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-animation-direction", V);
    }

    get WebkitAnimationDuration() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitAnimationDuration' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-animation-duration");
    }

    set WebkitAnimationDuration(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitAnimationDuration' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitAnimationDuration' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-animation-duration", V);
    }

    get WebkitAnimationFillMode() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitAnimationFillMode' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-animation-fill-mode");
    }

    set WebkitAnimationFillMode(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitAnimationFillMode' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitAnimationFillMode' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-animation-fill-mode", V);
    }

    get WebkitAnimationIterationCount() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitAnimationIterationCount' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-animation-iteration-count");
    }

    set WebkitAnimationIterationCount(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitAnimationIterationCount' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context:
          "Failed to set the 'WebkitAnimationIterationCount' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-animation-iteration-count", V);
    }

    get WebkitAnimationName() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitAnimationName' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-animation-name");
    }

    set WebkitAnimationName(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitAnimationName' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitAnimationName' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-animation-name", V);
    }

    get WebkitAnimationPlayState() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitAnimationPlayState' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-animation-play-state");
    }

    set WebkitAnimationPlayState(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitAnimationPlayState' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitAnimationPlayState' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-animation-play-state", V);
    }

    get WebkitAnimationTimingFunction() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitAnimationTimingFunction' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-animation-timing-function");
    }

    set WebkitAnimationTimingFunction(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitAnimationTimingFunction' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context:
          "Failed to set the 'WebkitAnimationTimingFunction' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-animation-timing-function", V);
    }

    get WebkitBackfaceVisibility() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitBackfaceVisibility' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-backface-visibility");
    }

    set WebkitBackfaceVisibility(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitBackfaceVisibility' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitBackfaceVisibility' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-backface-visibility", V);
    }

    get WebkitBackgroundOrigin() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitBackgroundOrigin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-background-origin");
    }

    set WebkitBackgroundOrigin(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitBackgroundOrigin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitBackgroundOrigin' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-background-origin", V);
    }

    get WebkitBackgroundSize() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitBackgroundSize' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-background-size");
    }

    set WebkitBackgroundSize(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitBackgroundSize' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitBackgroundSize' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-background-size", V);
    }

    get WebkitBorderBottomLeftRadius() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitBorderBottomLeftRadius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-border-bottom-left-radius");
    }

    set WebkitBorderBottomLeftRadius(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitBorderBottomLeftRadius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context:
          "Failed to set the 'WebkitBorderBottomLeftRadius' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-border-bottom-left-radius", V);
    }

    get WebkitBorderBottomRightRadius() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitBorderBottomRightRadius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-border-bottom-right-radius");
    }

    set WebkitBorderBottomRightRadius(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitBorderBottomRightRadius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context:
          "Failed to set the 'WebkitBorderBottomRightRadius' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-border-bottom-right-radius", V);
    }

    get WebkitBorderRadius() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitBorderRadius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-border-radius");
    }

    set WebkitBorderRadius(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitBorderRadius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitBorderRadius' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-border-radius", V);
    }

    get WebkitBorderTopLeftRadius() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitBorderTopLeftRadius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-border-top-left-radius");
    }

    set WebkitBorderTopLeftRadius(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitBorderTopLeftRadius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitBorderTopLeftRadius' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-border-top-left-radius", V);
    }

    get WebkitBorderTopRightRadius() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitBorderTopRightRadius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-border-top-right-radius");
    }

    set WebkitBorderTopRightRadius(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitBorderTopRightRadius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitBorderTopRightRadius' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-border-top-right-radius", V);
    }

    get WebkitBoxShadow() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitBoxShadow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-box-shadow");
    }

    set WebkitBoxShadow(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitBoxShadow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitBoxShadow' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-box-shadow", V);
    }

    get WebkitBoxSizing() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitBoxSizing' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-box-sizing");
    }

    set WebkitBoxSizing(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitBoxSizing' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitBoxSizing' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-box-sizing", V);
    }

    get WebkitFilter() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitFilter' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-filter");
    }

    set WebkitFilter(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitFilter' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitFilter' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-filter", V);
    }

    get WebkitFlex() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitFlex' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-flex");
    }

    set WebkitFlex(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitFlex' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitFlex' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-flex", V);
    }

    get WebkitFlexBasis() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitFlexBasis' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-flex-basis");
    }

    set WebkitFlexBasis(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitFlexBasis' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitFlexBasis' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-flex-basis", V);
    }

    get WebkitFlexDirection() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitFlexDirection' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-flex-direction");
    }

    set WebkitFlexDirection(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitFlexDirection' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitFlexDirection' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-flex-direction", V);
    }

    get WebkitFlexFlow() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitFlexFlow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-flex-flow");
    }

    set WebkitFlexFlow(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitFlexFlow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitFlexFlow' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-flex-flow", V);
    }

    get WebkitFlexGrow() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitFlexGrow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-flex-grow");
    }

    set WebkitFlexGrow(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitFlexGrow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitFlexGrow' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-flex-grow", V);
    }

    get WebkitFlexShrink() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitFlexShrink' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-flex-shrink");
    }

    set WebkitFlexShrink(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitFlexShrink' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitFlexShrink' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-flex-shrink", V);
    }

    get WebkitFlexWrap() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitFlexWrap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-flex-wrap");
    }

    set WebkitFlexWrap(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitFlexWrap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitFlexWrap' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-flex-wrap", V);
    }

    get WebkitJustifyContent() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitJustifyContent' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-justify-content");
    }

    set WebkitJustifyContent(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitJustifyContent' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitJustifyContent' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-justify-content", V);
    }

    get WebkitLineClamp() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitLineClamp' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-line-clamp");
    }

    set WebkitLineClamp(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitLineClamp' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitLineClamp' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-line-clamp", V);
    }

    get WebkitMask() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitMask' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-mask");
    }

    set WebkitMask(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitMask' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitMask' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-mask", V);
    }

    get WebkitMaskClip() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitMaskClip' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-mask-clip");
    }

    set WebkitMaskClip(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitMaskClip' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitMaskClip' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-mask-clip", V);
    }

    get WebkitMaskComposite() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitMaskComposite' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-mask-composite");
    }

    set WebkitMaskComposite(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitMaskComposite' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitMaskComposite' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-mask-composite", V);
    }

    get WebkitMaskImage() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitMaskImage' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-mask-image");
    }

    set WebkitMaskImage(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitMaskImage' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitMaskImage' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-mask-image", V);
    }

    get WebkitMaskOrigin() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitMaskOrigin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-mask-origin");
    }

    set WebkitMaskOrigin(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitMaskOrigin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitMaskOrigin' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-mask-origin", V);
    }

    get WebkitMaskPosition() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitMaskPosition' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-mask-position");
    }

    set WebkitMaskPosition(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitMaskPosition' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitMaskPosition' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-mask-position", V);
    }

    get WebkitMaskRepeat() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitMaskRepeat' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-mask-repeat");
    }

    set WebkitMaskRepeat(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitMaskRepeat' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitMaskRepeat' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-mask-repeat", V);
    }

    get WebkitMaskSize() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitMaskSize' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-mask-size");
    }

    set WebkitMaskSize(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitMaskSize' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitMaskSize' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-mask-size", V);
    }

    get WebkitOrder() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitOrder' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-order");
    }

    set WebkitOrder(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitOrder' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitOrder' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-order", V);
    }

    get WebkitPerspective() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitPerspective' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-perspective");
    }

    set WebkitPerspective(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitPerspective' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitPerspective' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-perspective", V);
    }

    get WebkitPerspectiveOrigin() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitPerspectiveOrigin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-perspective-origin");
    }

    set WebkitPerspectiveOrigin(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitPerspectiveOrigin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitPerspectiveOrigin' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-perspective-origin", V);
    }

    get WebkitTransform() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitTransform' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-transform");
    }

    set WebkitTransform(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitTransform' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitTransform' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-transform", V);
    }

    get WebkitTransformOrigin() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitTransformOrigin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-transform-origin");
    }

    set WebkitTransformOrigin(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitTransformOrigin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitTransformOrigin' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-transform-origin", V);
    }

    get WebkitTransformStyle() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitTransformStyle' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-transform-style");
    }

    set WebkitTransformStyle(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitTransformStyle' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitTransformStyle' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-transform-style", V);
    }

    get WebkitTransition() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitTransition' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-transition");
    }

    set WebkitTransition(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitTransition' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitTransition' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-transition", V);
    }

    get WebkitTransitionDelay() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitTransitionDelay' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-transition-delay");
    }

    set WebkitTransitionDelay(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitTransitionDelay' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitTransitionDelay' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-transition-delay", V);
    }

    get WebkitTransitionDuration() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitTransitionDuration' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-transition-duration");
    }

    set WebkitTransitionDuration(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitTransitionDuration' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitTransitionDuration' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-transition-duration", V);
    }

    get WebkitTransitionProperty() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitTransitionProperty' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-transition-property");
    }

    set WebkitTransitionProperty(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitTransitionProperty' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitTransitionProperty' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-transition-property", V);
    }

    get WebkitTransitionTimingFunction() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitTransitionTimingFunction' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-transition-timing-function");
    }

    set WebkitTransitionTimingFunction(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitTransitionTimingFunction' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context:
          "Failed to set the 'WebkitTransitionTimingFunction' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-transition-timing-function", V);
    }

    get WebkitUserSelect() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitUserSelect' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-user-select");
    }

    set WebkitUserSelect(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitUserSelect' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitUserSelect' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-user-select", V);
    }

    get WebkitTextSizeAdjust() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitTextSizeAdjust' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-text-size-adjust");
    }

    set WebkitTextSizeAdjust(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitTextSizeAdjust' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitTextSizeAdjust' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-text-size-adjust", V);
    }

    get WebkitBoxAlign() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitBoxAlign' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-box-align");
    }

    set WebkitBoxAlign(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitBoxAlign' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitBoxAlign' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-box-align", V);
    }

    get WebkitBoxFlex() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitBoxFlex' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-box-flex");
    }

    set WebkitBoxFlex(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitBoxFlex' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitBoxFlex' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-box-flex", V);
    }

    get WebkitBoxOrdinalGroup() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitBoxOrdinalGroup' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-box-ordinal-group");
    }

    set WebkitBoxOrdinalGroup(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitBoxOrdinalGroup' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitBoxOrdinalGroup' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-box-ordinal-group", V);
    }

    get WebkitBoxOrient() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitBoxOrient' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-box-orient");
    }

    set WebkitBoxOrient(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitBoxOrient' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitBoxOrient' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-box-orient", V);
    }

    get WebkitBoxPack() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitBoxPack' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-box-pack");
    }

    set WebkitBoxPack(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitBoxPack' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitBoxPack' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-box-pack", V);
    }

    get WebkitMaskBoxImage() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitMaskBoxImage' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-mask-box-image");
    }

    set WebkitMaskBoxImage(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitMaskBoxImage' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitMaskBoxImage' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-mask-box-image", V);
    }

    get WebkitMaskBoxImageOutset() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitMaskBoxImageOutset' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-mask-box-image-outset");
    }

    set WebkitMaskBoxImageOutset(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitMaskBoxImageOutset' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitMaskBoxImageOutset' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-mask-box-image-outset", V);
    }

    get WebkitMaskBoxImageRepeat() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitMaskBoxImageRepeat' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-mask-box-image-repeat");
    }

    set WebkitMaskBoxImageRepeat(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitMaskBoxImageRepeat' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitMaskBoxImageRepeat' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-mask-box-image-repeat", V);
    }

    get WebkitMaskBoxImageSlice() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitMaskBoxImageSlice' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-mask-box-image-slice");
    }

    set WebkitMaskBoxImageSlice(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitMaskBoxImageSlice' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitMaskBoxImageSlice' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-mask-box-image-slice", V);
    }

    get WebkitMaskBoxImageSource() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitMaskBoxImageSource' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-mask-box-image-source");
    }

    set WebkitMaskBoxImageSource(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitMaskBoxImageSource' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitMaskBoxImageSource' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-mask-box-image-source", V);
    }

    get WebkitMaskBoxImageWidth() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitMaskBoxImageWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-mask-box-image-width");
    }

    set WebkitMaskBoxImageWidth(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitMaskBoxImageWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitMaskBoxImageWidth' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-mask-box-image-width", V);
    }

    get WebkitBackgroundClip() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitBackgroundClip' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-background-clip");
    }

    set WebkitBackgroundClip(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitBackgroundClip' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitBackgroundClip' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-background-clip", V);
    }

    get WebkitTextFillColor() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitTextFillColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-text-fill-color");
    }

    set WebkitTextFillColor(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitTextFillColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitTextFillColor' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-text-fill-color", V);
    }

    get WebkitTextStroke() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitTextStroke' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-text-stroke");
    }

    set WebkitTextStroke(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitTextStroke' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitTextStroke' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-text-stroke", V);
    }

    get WebkitTextStrokeColor() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitTextStrokeColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-text-stroke-color");
    }

    set WebkitTextStrokeColor(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitTextStrokeColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitTextStrokeColor' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-text-stroke-color", V);
    }

    get WebkitTextStrokeWidth() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get WebkitTextStrokeWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-text-stroke-width");
    }

    set WebkitTextStrokeWidth(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set WebkitTextStrokeWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'WebkitTextStrokeWidth' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-text-stroke-width", V);
    }

    get accentColor() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get accentColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("accent-color");
    }

    set accentColor(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set accentColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'accentColor' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("accent-color", V);
    }

    get alignContent() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get alignContent' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("align-content");
    }

    set alignContent(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set alignContent' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'alignContent' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("align-content", V);
    }

    get alignItems() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get alignItems' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("align-items");
    }

    set alignItems(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set alignItems' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'alignItems' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("align-items", V);
    }

    get alignSelf() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get alignSelf' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("align-self");
    }

    set alignSelf(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set alignSelf' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'alignSelf' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("align-self", V);
    }

    get alignTracks() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get alignTracks' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("align-tracks");
    }

    set alignTracks(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set alignTracks' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'alignTracks' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("align-tracks", V);
    }

    get alignmentBaseline() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get alignmentBaseline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("alignment-baseline");
    }

    set alignmentBaseline(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set alignmentBaseline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'alignmentBaseline' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("alignment-baseline", V);
    }

    get all() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get all' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("all");
    }

    set all(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set all' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'all' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("all", V);
    }

    get animation() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get animation' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("animation");
    }

    set animation(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set animation' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'animation' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("animation", V);
    }

    get animationComposition() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get animationComposition' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("animation-composition");
    }

    set animationComposition(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set animationComposition' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'animationComposition' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("animation-composition", V);
    }

    get animationDelay() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get animationDelay' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("animation-delay");
    }

    set animationDelay(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set animationDelay' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'animationDelay' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("animation-delay", V);
    }

    get animationDirection() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get animationDirection' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("animation-direction");
    }

    set animationDirection(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set animationDirection' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'animationDirection' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("animation-direction", V);
    }

    get animationDuration() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get animationDuration' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("animation-duration");
    }

    set animationDuration(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set animationDuration' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'animationDuration' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("animation-duration", V);
    }

    get animationFillMode() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get animationFillMode' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("animation-fill-mode");
    }

    set animationFillMode(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set animationFillMode' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'animationFillMode' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("animation-fill-mode", V);
    }

    get animationIterationCount() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get animationIterationCount' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("animation-iteration-count");
    }

    set animationIterationCount(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set animationIterationCount' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'animationIterationCount' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("animation-iteration-count", V);
    }

    get animationName() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get animationName' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("animation-name");
    }

    set animationName(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set animationName' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'animationName' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("animation-name", V);
    }

    get animationPlayState() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get animationPlayState' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("animation-play-state");
    }

    set animationPlayState(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set animationPlayState' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'animationPlayState' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("animation-play-state", V);
    }

    get animationTimeline() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get animationTimeline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("animation-timeline");
    }

    set animationTimeline(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set animationTimeline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'animationTimeline' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("animation-timeline", V);
    }

    get animationTimingFunction() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get animationTimingFunction' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("animation-timing-function");
    }

    set animationTimingFunction(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set animationTimingFunction' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'animationTimingFunction' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("animation-timing-function", V);
    }

    get appearance() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get appearance' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("appearance");
    }

    set appearance(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set appearance' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'appearance' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("appearance", V);
    }

    get aspectRatio() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get aspectRatio' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("aspect-ratio");
    }

    set aspectRatio(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set aspectRatio' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'aspectRatio' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("aspect-ratio", V);
    }

    get backdropFilter() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get backdropFilter' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("backdrop-filter");
    }

    set backdropFilter(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set backdropFilter' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'backdropFilter' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("backdrop-filter", V);
    }

    get backfaceVisibility() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get backfaceVisibility' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("backface-visibility");
    }

    set backfaceVisibility(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set backfaceVisibility' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'backfaceVisibility' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("backface-visibility", V);
    }

    get background() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get background' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("background");
    }

    set background(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set background' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'background' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("background", V);
    }

    get backgroundAttachment() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get backgroundAttachment' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("background-attachment");
    }

    set backgroundAttachment(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set backgroundAttachment' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'backgroundAttachment' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("background-attachment", V);
    }

    get backgroundBlendMode() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get backgroundBlendMode' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("background-blend-mode");
    }

    set backgroundBlendMode(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set backgroundBlendMode' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'backgroundBlendMode' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("background-blend-mode", V);
    }

    get backgroundClip() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get backgroundClip' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("background-clip");
    }

    set backgroundClip(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set backgroundClip' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'backgroundClip' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("background-clip", V);
    }

    get backgroundColor() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get backgroundColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("background-color");
    }

    set backgroundColor(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set backgroundColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'backgroundColor' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("background-color", V);
    }

    get backgroundImage() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get backgroundImage' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("background-image");
    }

    set backgroundImage(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set backgroundImage' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'backgroundImage' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("background-image", V);
    }

    get backgroundOrigin() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get backgroundOrigin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("background-origin");
    }

    set backgroundOrigin(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set backgroundOrigin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'backgroundOrigin' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("background-origin", V);
    }

    get backgroundPosition() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get backgroundPosition' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("background-position");
    }

    set backgroundPosition(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set backgroundPosition' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'backgroundPosition' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("background-position", V);
    }

    get backgroundPositionBlock() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get backgroundPositionBlock' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("background-position-block");
    }

    set backgroundPositionBlock(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set backgroundPositionBlock' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'backgroundPositionBlock' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("background-position-block", V);
    }

    get backgroundPositionInline() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get backgroundPositionInline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("background-position-inline");
    }

    set backgroundPositionInline(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set backgroundPositionInline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'backgroundPositionInline' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("background-position-inline", V);
    }

    get backgroundPositionX() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get backgroundPositionX' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("background-position-x");
    }

    set backgroundPositionX(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set backgroundPositionX' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'backgroundPositionX' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("background-position-x", V);
    }

    get backgroundPositionY() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get backgroundPositionY' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("background-position-y");
    }

    set backgroundPositionY(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set backgroundPositionY' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'backgroundPositionY' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("background-position-y", V);
    }

    get backgroundRepeat() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get backgroundRepeat' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("background-repeat");
    }

    set backgroundRepeat(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set backgroundRepeat' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'backgroundRepeat' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("background-repeat", V);
    }

    get backgroundSize() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get backgroundSize' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("background-size");
    }

    set backgroundSize(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set backgroundSize' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'backgroundSize' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("background-size", V);
    }

    get baselineShift() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get baselineShift' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("baseline-shift");
    }

    set baselineShift(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set baselineShift' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'baselineShift' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("baseline-shift", V);
    }

    get baselineSource() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get baselineSource' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("baseline-source");
    }

    set baselineSource(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set baselineSource' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'baselineSource' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("baseline-source", V);
    }

    get blockEllipsis() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get blockEllipsis' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("block-ellipsis");
    }

    set blockEllipsis(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set blockEllipsis' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'blockEllipsis' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("block-ellipsis", V);
    }

    get blockSize() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get blockSize' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("block-size");
    }

    set blockSize(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set blockSize' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'blockSize' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("block-size", V);
    }

    get blockStep() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get blockStep' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("block-step");
    }

    set blockStep(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set blockStep' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'blockStep' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("block-step", V);
    }

    get blockStepAlign() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get blockStepAlign' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("block-step-align");
    }

    set blockStepAlign(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set blockStepAlign' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'blockStepAlign' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("block-step-align", V);
    }

    get blockStepInsert() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get blockStepInsert' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("block-step-insert");
    }

    set blockStepInsert(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set blockStepInsert' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'blockStepInsert' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("block-step-insert", V);
    }

    get blockStepRound() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get blockStepRound' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("block-step-round");
    }

    set blockStepRound(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set blockStepRound' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'blockStepRound' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("block-step-round", V);
    }

    get blockStepSize() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get blockStepSize' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("block-step-size");
    }

    set blockStepSize(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set blockStepSize' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'blockStepSize' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("block-step-size", V);
    }

    get bookmarkLabel() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get bookmarkLabel' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("bookmark-label");
    }

    set bookmarkLabel(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set bookmarkLabel' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'bookmarkLabel' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("bookmark-label", V);
    }

    get bookmarkLevel() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get bookmarkLevel' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("bookmark-level");
    }

    set bookmarkLevel(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set bookmarkLevel' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'bookmarkLevel' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("bookmark-level", V);
    }

    get bookmarkState() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get bookmarkState' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("bookmark-state");
    }

    set bookmarkState(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set bookmarkState' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'bookmarkState' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("bookmark-state", V);
    }

    get border() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border");
    }

    set border(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border", V);
    }

    get borderBlock() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderBlock' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-block");
    }

    set borderBlock(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderBlock' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderBlock' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-block", V);
    }

    get borderBlockColor() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderBlockColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-block-color");
    }

    set borderBlockColor(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderBlockColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderBlockColor' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-block-color", V);
    }

    get borderBlockEnd() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderBlockEnd' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-block-end");
    }

    set borderBlockEnd(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderBlockEnd' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderBlockEnd' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-block-end", V);
    }

    get borderBlockEndColor() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderBlockEndColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-block-end-color");
    }

    set borderBlockEndColor(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderBlockEndColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderBlockEndColor' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-block-end-color", V);
    }

    get borderBlockEndStyle() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderBlockEndStyle' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-block-end-style");
    }

    set borderBlockEndStyle(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderBlockEndStyle' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderBlockEndStyle' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-block-end-style", V);
    }

    get borderBlockEndWidth() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderBlockEndWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-block-end-width");
    }

    set borderBlockEndWidth(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderBlockEndWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderBlockEndWidth' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-block-end-width", V);
    }

    get borderBlockStart() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderBlockStart' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-block-start");
    }

    set borderBlockStart(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderBlockStart' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderBlockStart' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-block-start", V);
    }

    get borderBlockStartColor() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderBlockStartColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-block-start-color");
    }

    set borderBlockStartColor(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderBlockStartColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderBlockStartColor' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-block-start-color", V);
    }

    get borderBlockStartStyle() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderBlockStartStyle' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-block-start-style");
    }

    set borderBlockStartStyle(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderBlockStartStyle' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderBlockStartStyle' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-block-start-style", V);
    }

    get borderBlockStartWidth() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderBlockStartWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-block-start-width");
    }

    set borderBlockStartWidth(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderBlockStartWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderBlockStartWidth' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-block-start-width", V);
    }

    get borderBlockStyle() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderBlockStyle' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-block-style");
    }

    set borderBlockStyle(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderBlockStyle' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderBlockStyle' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-block-style", V);
    }

    get borderBlockWidth() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderBlockWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-block-width");
    }

    set borderBlockWidth(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderBlockWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderBlockWidth' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-block-width", V);
    }

    get borderBottom() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderBottom' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-bottom");
    }

    set borderBottom(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderBottom' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderBottom' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-bottom", V);
    }

    get borderBottomColor() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderBottomColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-bottom-color");
    }

    set borderBottomColor(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderBottomColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderBottomColor' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-bottom-color", V);
    }

    get borderBottomLeftRadius() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderBottomLeftRadius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-bottom-left-radius");
    }

    set borderBottomLeftRadius(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderBottomLeftRadius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderBottomLeftRadius' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-bottom-left-radius", V);
    }

    get borderBottomRightRadius() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderBottomRightRadius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-bottom-right-radius");
    }

    set borderBottomRightRadius(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderBottomRightRadius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderBottomRightRadius' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-bottom-right-radius", V);
    }

    get borderBottomStyle() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderBottomStyle' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-bottom-style");
    }

    set borderBottomStyle(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderBottomStyle' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderBottomStyle' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-bottom-style", V);
    }

    get borderBottomWidth() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderBottomWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-bottom-width");
    }

    set borderBottomWidth(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderBottomWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderBottomWidth' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-bottom-width", V);
    }

    get borderBoundary() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderBoundary' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-boundary");
    }

    set borderBoundary(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderBoundary' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderBoundary' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-boundary", V);
    }

    get borderClip() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderClip' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-clip");
    }

    set borderClip(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderClip' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderClip' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-clip", V);
    }

    get borderClipBottom() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderClipBottom' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-clip-bottom");
    }

    set borderClipBottom(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderClipBottom' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderClipBottom' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-clip-bottom", V);
    }

    get borderClipLeft() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderClipLeft' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-clip-left");
    }

    set borderClipLeft(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderClipLeft' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderClipLeft' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-clip-left", V);
    }

    get borderClipRight() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderClipRight' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-clip-right");
    }

    set borderClipRight(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderClipRight' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderClipRight' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-clip-right", V);
    }

    get borderClipTop() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderClipTop' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-clip-top");
    }

    set borderClipTop(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderClipTop' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderClipTop' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-clip-top", V);
    }

    get borderCollapse() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderCollapse' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-collapse");
    }

    set borderCollapse(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderCollapse' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderCollapse' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-collapse", V);
    }

    get borderColor() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-color");
    }

    set borderColor(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderColor' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-color", V);
    }

    get borderEndEndRadius() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderEndEndRadius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-end-end-radius");
    }

    set borderEndEndRadius(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderEndEndRadius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderEndEndRadius' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-end-end-radius", V);
    }

    get borderEndStartRadius() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderEndStartRadius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-end-start-radius");
    }

    set borderEndStartRadius(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderEndStartRadius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderEndStartRadius' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-end-start-radius", V);
    }

    get borderImage() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderImage' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-image");
    }

    set borderImage(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderImage' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderImage' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-image", V);
    }

    get borderImageOutset() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderImageOutset' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-image-outset");
    }

    set borderImageOutset(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderImageOutset' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderImageOutset' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-image-outset", V);
    }

    get borderImageRepeat() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderImageRepeat' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-image-repeat");
    }

    set borderImageRepeat(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderImageRepeat' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderImageRepeat' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-image-repeat", V);
    }

    get borderImageSlice() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderImageSlice' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-image-slice");
    }

    set borderImageSlice(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderImageSlice' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderImageSlice' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-image-slice", V);
    }

    get borderImageSource() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderImageSource' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-image-source");
    }

    set borderImageSource(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderImageSource' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderImageSource' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-image-source", V);
    }

    get borderImageWidth() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderImageWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-image-width");
    }

    set borderImageWidth(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderImageWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderImageWidth' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-image-width", V);
    }

    get borderInline() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderInline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-inline");
    }

    set borderInline(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderInline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderInline' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-inline", V);
    }

    get borderInlineColor() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderInlineColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-inline-color");
    }

    set borderInlineColor(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderInlineColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderInlineColor' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-inline-color", V);
    }

    get borderInlineEnd() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderInlineEnd' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-inline-end");
    }

    set borderInlineEnd(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderInlineEnd' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderInlineEnd' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-inline-end", V);
    }

    get borderInlineEndColor() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderInlineEndColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-inline-end-color");
    }

    set borderInlineEndColor(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderInlineEndColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderInlineEndColor' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-inline-end-color", V);
    }

    get borderInlineEndStyle() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderInlineEndStyle' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-inline-end-style");
    }

    set borderInlineEndStyle(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderInlineEndStyle' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderInlineEndStyle' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-inline-end-style", V);
    }

    get borderInlineEndWidth() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderInlineEndWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-inline-end-width");
    }

    set borderInlineEndWidth(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderInlineEndWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderInlineEndWidth' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-inline-end-width", V);
    }

    get borderInlineStart() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderInlineStart' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-inline-start");
    }

    set borderInlineStart(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderInlineStart' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderInlineStart' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-inline-start", V);
    }

    get borderInlineStartColor() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderInlineStartColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-inline-start-color");
    }

    set borderInlineStartColor(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderInlineStartColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderInlineStartColor' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-inline-start-color", V);
    }

    get borderInlineStartStyle() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderInlineStartStyle' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-inline-start-style");
    }

    set borderInlineStartStyle(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderInlineStartStyle' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderInlineStartStyle' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-inline-start-style", V);
    }

    get borderInlineStartWidth() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderInlineStartWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-inline-start-width");
    }

    set borderInlineStartWidth(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderInlineStartWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderInlineStartWidth' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-inline-start-width", V);
    }

    get borderInlineStyle() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderInlineStyle' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-inline-style");
    }

    set borderInlineStyle(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderInlineStyle' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderInlineStyle' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-inline-style", V);
    }

    get borderInlineWidth() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderInlineWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-inline-width");
    }

    set borderInlineWidth(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderInlineWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderInlineWidth' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-inline-width", V);
    }

    get borderLeft() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderLeft' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-left");
    }

    set borderLeft(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderLeft' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderLeft' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-left", V);
    }

    get borderLeftColor() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderLeftColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-left-color");
    }

    set borderLeftColor(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderLeftColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderLeftColor' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-left-color", V);
    }

    get borderLeftStyle() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderLeftStyle' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-left-style");
    }

    set borderLeftStyle(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderLeftStyle' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderLeftStyle' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-left-style", V);
    }

    get borderLeftWidth() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderLeftWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-left-width");
    }

    set borderLeftWidth(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderLeftWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderLeftWidth' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-left-width", V);
    }

    get borderLimit() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderLimit' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-limit");
    }

    set borderLimit(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderLimit' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderLimit' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-limit", V);
    }

    get borderRadius() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderRadius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-radius");
    }

    set borderRadius(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderRadius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderRadius' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-radius", V);
    }

    get borderRight() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderRight' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-right");
    }

    set borderRight(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderRight' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderRight' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-right", V);
    }

    get borderRightColor() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderRightColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-right-color");
    }

    set borderRightColor(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderRightColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderRightColor' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-right-color", V);
    }

    get borderRightStyle() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderRightStyle' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-right-style");
    }

    set borderRightStyle(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderRightStyle' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderRightStyle' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-right-style", V);
    }

    get borderRightWidth() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderRightWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-right-width");
    }

    set borderRightWidth(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderRightWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderRightWidth' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-right-width", V);
    }

    get borderSpacing() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderSpacing' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-spacing");
    }

    set borderSpacing(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderSpacing' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderSpacing' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-spacing", V);
    }

    get borderStartEndRadius() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderStartEndRadius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-start-end-radius");
    }

    set borderStartEndRadius(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderStartEndRadius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderStartEndRadius' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-start-end-radius", V);
    }

    get borderStartStartRadius() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderStartStartRadius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-start-start-radius");
    }

    set borderStartStartRadius(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderStartStartRadius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderStartStartRadius' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-start-start-radius", V);
    }

    get borderStyle() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderStyle' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-style");
    }

    set borderStyle(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderStyle' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderStyle' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-style", V);
    }

    get borderTop() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderTop' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-top");
    }

    set borderTop(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderTop' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderTop' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-top", V);
    }

    get borderTopColor() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderTopColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-top-color");
    }

    set borderTopColor(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderTopColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderTopColor' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-top-color", V);
    }

    get borderTopLeftRadius() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderTopLeftRadius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-top-left-radius");
    }

    set borderTopLeftRadius(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderTopLeftRadius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderTopLeftRadius' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-top-left-radius", V);
    }

    get borderTopRightRadius() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderTopRightRadius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-top-right-radius");
    }

    set borderTopRightRadius(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderTopRightRadius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderTopRightRadius' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-top-right-radius", V);
    }

    get borderTopStyle() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderTopStyle' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-top-style");
    }

    set borderTopStyle(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderTopStyle' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderTopStyle' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-top-style", V);
    }

    get borderTopWidth() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderTopWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-top-width");
    }

    set borderTopWidth(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderTopWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderTopWidth' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-top-width", V);
    }

    get borderWidth() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get borderWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-width");
    }

    set borderWidth(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set borderWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'borderWidth' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-width", V);
    }

    get bottom() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get bottom' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("bottom");
    }

    set bottom(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set bottom' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'bottom' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("bottom", V);
    }

    get boxDecorationBreak() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get boxDecorationBreak' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("box-decoration-break");
    }

    set boxDecorationBreak(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set boxDecorationBreak' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'boxDecorationBreak' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("box-decoration-break", V);
    }

    get boxShadow() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get boxShadow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("box-shadow");
    }

    set boxShadow(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set boxShadow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'boxShadow' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("box-shadow", V);
    }

    get boxSizing() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get boxSizing' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("box-sizing");
    }

    set boxSizing(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set boxSizing' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'boxSizing' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("box-sizing", V);
    }

    get boxSnap() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get boxSnap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("box-snap");
    }

    set boxSnap(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set boxSnap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'boxSnap' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("box-snap", V);
    }

    get breakAfter() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get breakAfter' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("break-after");
    }

    set breakAfter(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set breakAfter' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'breakAfter' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("break-after", V);
    }

    get breakBefore() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get breakBefore' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("break-before");
    }

    set breakBefore(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set breakBefore' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'breakBefore' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("break-before", V);
    }

    get breakInside() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get breakInside' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("break-inside");
    }

    set breakInside(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set breakInside' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'breakInside' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("break-inside", V);
    }

    get captionSide() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get captionSide' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("caption-side");
    }

    set captionSide(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set captionSide' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'captionSide' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("caption-side", V);
    }

    get caret() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get caret' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("caret");
    }

    set caret(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set caret' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'caret' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("caret", V);
    }

    get caretColor() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get caretColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("caret-color");
    }

    set caretColor(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set caretColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'caretColor' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("caret-color", V);
    }

    get caretShape() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get caretShape' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("caret-shape");
    }

    set caretShape(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set caretShape' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'caretShape' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("caret-shape", V);
    }

    get clear() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get clear' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("clear");
    }

    set clear(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set clear' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'clear' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("clear", V);
    }

    get clip() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get clip' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("clip");
    }

    set clip(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set clip' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'clip' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("clip", V);
    }

    get clipPath() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get clipPath' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("clip-path");
    }

    set clipPath(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set clipPath' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'clipPath' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("clip-path", V);
    }

    get clipRule() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get clipRule' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("clip-rule");
    }

    set clipRule(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set clipRule' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'clipRule' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("clip-rule", V);
    }

    get color() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("color");
    }

    set color(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'color' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("color", V);
    }

    get colorAdjust() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get colorAdjust' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("color-adjust");
    }

    set colorAdjust(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set colorAdjust' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'colorAdjust' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("color-adjust", V);
    }

    get colorInterpolation() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get colorInterpolation' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("color-interpolation");
    }

    set colorInterpolation(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set colorInterpolation' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'colorInterpolation' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("color-interpolation", V);
    }

    get colorInterpolationFilters() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get colorInterpolationFilters' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("color-interpolation-filters");
    }

    set colorInterpolationFilters(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set colorInterpolationFilters' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'colorInterpolationFilters' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("color-interpolation-filters", V);
    }

    get colorScheme() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get colorScheme' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("color-scheme");
    }

    set colorScheme(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set colorScheme' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'colorScheme' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("color-scheme", V);
    }

    get columnCount() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get columnCount' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("column-count");
    }

    set columnCount(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set columnCount' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'columnCount' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("column-count", V);
    }

    get columnFill() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get columnFill' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("column-fill");
    }

    set columnFill(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set columnFill' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'columnFill' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("column-fill", V);
    }

    get columnGap() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get columnGap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("column-gap");
    }

    set columnGap(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set columnGap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'columnGap' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("column-gap", V);
    }

    get columnRule() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get columnRule' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("column-rule");
    }

    set columnRule(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set columnRule' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'columnRule' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("column-rule", V);
    }

    get columnRuleColor() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get columnRuleColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("column-rule-color");
    }

    set columnRuleColor(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set columnRuleColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'columnRuleColor' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("column-rule-color", V);
    }

    get columnRuleStyle() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get columnRuleStyle' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("column-rule-style");
    }

    set columnRuleStyle(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set columnRuleStyle' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'columnRuleStyle' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("column-rule-style", V);
    }

    get columnRuleWidth() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get columnRuleWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("column-rule-width");
    }

    set columnRuleWidth(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set columnRuleWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'columnRuleWidth' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("column-rule-width", V);
    }

    get columnSpan() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get columnSpan' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("column-span");
    }

    set columnSpan(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set columnSpan' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'columnSpan' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("column-span", V);
    }

    get columnWidth() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get columnWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("column-width");
    }

    set columnWidth(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set columnWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'columnWidth' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("column-width", V);
    }

    get columns() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get columns' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("columns");
    }

    set columns(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set columns' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'columns' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("columns", V);
    }

    get contain() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get contain' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("contain");
    }

    set contain(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set contain' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'contain' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("contain", V);
    }

    get containIntrinsicBlockSize() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get containIntrinsicBlockSize' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("contain-intrinsic-block-size");
    }

    set containIntrinsicBlockSize(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set containIntrinsicBlockSize' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'containIntrinsicBlockSize' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("contain-intrinsic-block-size", V);
    }

    get containIntrinsicHeight() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get containIntrinsicHeight' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("contain-intrinsic-height");
    }

    set containIntrinsicHeight(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set containIntrinsicHeight' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'containIntrinsicHeight' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("contain-intrinsic-height", V);
    }

    get containIntrinsicInlineSize() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get containIntrinsicInlineSize' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("contain-intrinsic-inline-size");
    }

    set containIntrinsicInlineSize(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set containIntrinsicInlineSize' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'containIntrinsicInlineSize' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("contain-intrinsic-inline-size", V);
    }

    get containIntrinsicSize() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get containIntrinsicSize' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("contain-intrinsic-size");
    }

    set containIntrinsicSize(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set containIntrinsicSize' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'containIntrinsicSize' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("contain-intrinsic-size", V);
    }

    get containIntrinsicWidth() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get containIntrinsicWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("contain-intrinsic-width");
    }

    set containIntrinsicWidth(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set containIntrinsicWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'containIntrinsicWidth' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("contain-intrinsic-width", V);
    }

    get content() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get content' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("content");
    }

    set content(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set content' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'content' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("content", V);
    }

    get contentVisibility() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get contentVisibility' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("content-visibility");
    }

    set contentVisibility(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set contentVisibility' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'contentVisibility' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("content-visibility", V);
    }

    get continue() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get continue' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("continue");
    }

    set continue(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set continue' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'continue' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("continue", V);
    }

    get copyInto() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get copyInto' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("copy-into");
    }

    set copyInto(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set copyInto' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'copyInto' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("copy-into", V);
    }

    get cornerShape() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get cornerShape' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("corner-shape");
    }

    set cornerShape(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set cornerShape' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'cornerShape' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("corner-shape", V);
    }

    get corners() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get corners' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("corners");
    }

    set corners(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set corners' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'corners' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("corners", V);
    }

    get counterIncrement() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get counterIncrement' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("counter-increment");
    }

    set counterIncrement(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set counterIncrement' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'counterIncrement' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("counter-increment", V);
    }

    get counterReset() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get counterReset' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("counter-reset");
    }

    set counterReset(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set counterReset' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'counterReset' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("counter-reset", V);
    }

    get counterSet() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get counterSet' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("counter-set");
    }

    set counterSet(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set counterSet' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'counterSet' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("counter-set", V);
    }

    get cue() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get cue' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("cue");
    }

    set cue(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set cue' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'cue' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("cue", V);
    }

    get cueAfter() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get cueAfter' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("cue-after");
    }

    set cueAfter(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set cueAfter' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'cueAfter' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("cue-after", V);
    }

    get cueBefore() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get cueBefore' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("cue-before");
    }

    set cueBefore(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set cueBefore' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'cueBefore' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("cue-before", V);
    }

    get cursor() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get cursor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("cursor");
    }

    set cursor(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set cursor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'cursor' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("cursor", V);
    }

    get cx() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get cx' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("cx");
    }

    set cx(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set cx' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'cx' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("cx", V);
    }

    get cy() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get cy' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("cy");
    }

    set cy(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set cy' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'cy' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("cy", V);
    }

    get d() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get d' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("d");
    }

    set d(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set d' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'd' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("d", V);
    }

    get direction() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get direction' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("direction");
    }

    set direction(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set direction' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'direction' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("direction", V);
    }

    get display() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get display' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("display");
    }

    set display(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set display' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'display' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("display", V);
    }

    get dominantBaseline() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get dominantBaseline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("dominant-baseline");
    }

    set dominantBaseline(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set dominantBaseline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'dominantBaseline' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("dominant-baseline", V);
    }

    get emptyCells() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get emptyCells' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("empty-cells");
    }

    set emptyCells(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set emptyCells' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'emptyCells' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("empty-cells", V);
    }

    get fill() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get fill' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("fill");
    }

    set fill(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set fill' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'fill' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("fill", V);
    }

    get fillBreak() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get fillBreak' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("fill-break");
    }

    set fillBreak(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set fillBreak' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'fillBreak' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("fill-break", V);
    }

    get fillColor() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get fillColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("fill-color");
    }

    set fillColor(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set fillColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'fillColor' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("fill-color", V);
    }

    get fillImage() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get fillImage' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("fill-image");
    }

    set fillImage(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set fillImage' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'fillImage' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("fill-image", V);
    }

    get fillOpacity() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get fillOpacity' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("fill-opacity");
    }

    set fillOpacity(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set fillOpacity' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'fillOpacity' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("fill-opacity", V);
    }

    get fillOrigin() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get fillOrigin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("fill-origin");
    }

    set fillOrigin(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set fillOrigin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'fillOrigin' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("fill-origin", V);
    }

    get fillPosition() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get fillPosition' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("fill-position");
    }

    set fillPosition(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set fillPosition' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'fillPosition' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("fill-position", V);
    }

    get fillRepeat() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get fillRepeat' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("fill-repeat");
    }

    set fillRepeat(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set fillRepeat' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'fillRepeat' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("fill-repeat", V);
    }

    get fillRule() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get fillRule' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("fill-rule");
    }

    set fillRule(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set fillRule' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'fillRule' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("fill-rule", V);
    }

    get fillSize() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get fillSize' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("fill-size");
    }

    set fillSize(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set fillSize' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'fillSize' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("fill-size", V);
    }

    get filter() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get filter' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("filter");
    }

    set filter(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set filter' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'filter' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("filter", V);
    }

    get flex() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get flex' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("flex");
    }

    set flex(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set flex' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'flex' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("flex", V);
    }

    get flexBasis() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get flexBasis' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("flex-basis");
    }

    set flexBasis(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set flexBasis' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'flexBasis' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("flex-basis", V);
    }

    get flexDirection() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get flexDirection' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("flex-direction");
    }

    set flexDirection(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set flexDirection' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'flexDirection' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("flex-direction", V);
    }

    get flexFlow() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get flexFlow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("flex-flow");
    }

    set flexFlow(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set flexFlow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'flexFlow' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("flex-flow", V);
    }

    get flexGrow() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get flexGrow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("flex-grow");
    }

    set flexGrow(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set flexGrow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'flexGrow' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("flex-grow", V);
    }

    get flexShrink() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get flexShrink' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("flex-shrink");
    }

    set flexShrink(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set flexShrink' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'flexShrink' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("flex-shrink", V);
    }

    get flexWrap() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get flexWrap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("flex-wrap");
    }

    set flexWrap(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set flexWrap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'flexWrap' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("flex-wrap", V);
    }

    get float() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get float' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("float");
    }

    set float(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set float' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'float' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("float", V);
    }

    get floatDefer() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get floatDefer' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("float-defer");
    }

    set floatDefer(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set floatDefer' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'floatDefer' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("float-defer", V);
    }

    get floatOffset() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get floatOffset' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("float-offset");
    }

    set floatOffset(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set floatOffset' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'floatOffset' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("float-offset", V);
    }

    get floatReference() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get floatReference' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("float-reference");
    }

    set floatReference(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set floatReference' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'floatReference' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("float-reference", V);
    }

    get floodColor() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get floodColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("flood-color");
    }

    set floodColor(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set floodColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'floodColor' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("flood-color", V);
    }

    get floodOpacity() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get floodOpacity' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("flood-opacity");
    }

    set floodOpacity(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set floodOpacity' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'floodOpacity' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("flood-opacity", V);
    }

    get flowFrom() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get flowFrom' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("flow-from");
    }

    set flowFrom(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set flowFrom' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'flowFrom' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("flow-from", V);
    }

    get flowInto() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get flowInto' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("flow-into");
    }

    set flowInto(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set flowInto' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'flowInto' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("flow-into", V);
    }

    get font() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get font' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("font");
    }

    set font(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set font' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'font' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("font", V);
    }

    get fontFamily() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get fontFamily' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("font-family");
    }

    set fontFamily(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set fontFamily' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'fontFamily' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("font-family", V);
    }

    get fontFeatureSettings() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get fontFeatureSettings' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("font-feature-settings");
    }

    set fontFeatureSettings(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set fontFeatureSettings' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'fontFeatureSettings' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("font-feature-settings", V);
    }

    get fontKerning() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get fontKerning' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("font-kerning");
    }

    set fontKerning(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set fontKerning' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'fontKerning' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("font-kerning", V);
    }

    get fontLanguageOverride() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get fontLanguageOverride' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("font-language-override");
    }

    set fontLanguageOverride(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set fontLanguageOverride' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'fontLanguageOverride' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("font-language-override", V);
    }

    get fontOpticalSizing() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get fontOpticalSizing' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("font-optical-sizing");
    }

    set fontOpticalSizing(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set fontOpticalSizing' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'fontOpticalSizing' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("font-optical-sizing", V);
    }

    get fontPalette() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get fontPalette' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("font-palette");
    }

    set fontPalette(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set fontPalette' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'fontPalette' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("font-palette", V);
    }

    get fontSize() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get fontSize' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("font-size");
    }

    set fontSize(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set fontSize' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'fontSize' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("font-size", V);
    }

    get fontSizeAdjust() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get fontSizeAdjust' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("font-size-adjust");
    }

    set fontSizeAdjust(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set fontSizeAdjust' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'fontSizeAdjust' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("font-size-adjust", V);
    }

    get fontStretch() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get fontStretch' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("font-stretch");
    }

    set fontStretch(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set fontStretch' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'fontStretch' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("font-stretch", V);
    }

    get fontStyle() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get fontStyle' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("font-style");
    }

    set fontStyle(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set fontStyle' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'fontStyle' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("font-style", V);
    }

    get fontSynthesis() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get fontSynthesis' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("font-synthesis");
    }

    set fontSynthesis(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set fontSynthesis' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'fontSynthesis' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("font-synthesis", V);
    }

    get fontSynthesisSmallCaps() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get fontSynthesisSmallCaps' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("font-synthesis-small-caps");
    }

    set fontSynthesisSmallCaps(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set fontSynthesisSmallCaps' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'fontSynthesisSmallCaps' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("font-synthesis-small-caps", V);
    }

    get fontSynthesisStyle() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get fontSynthesisStyle' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("font-synthesis-style");
    }

    set fontSynthesisStyle(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set fontSynthesisStyle' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'fontSynthesisStyle' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("font-synthesis-style", V);
    }

    get fontSynthesisWeight() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get fontSynthesisWeight' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("font-synthesis-weight");
    }

    set fontSynthesisWeight(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set fontSynthesisWeight' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'fontSynthesisWeight' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("font-synthesis-weight", V);
    }

    get fontVariant() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get fontVariant' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("font-variant");
    }

    set fontVariant(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set fontVariant' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'fontVariant' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("font-variant", V);
    }

    get fontVariantAlternates() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get fontVariantAlternates' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("font-variant-alternates");
    }

    set fontVariantAlternates(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set fontVariantAlternates' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'fontVariantAlternates' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("font-variant-alternates", V);
    }

    get fontVariantCaps() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get fontVariantCaps' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("font-variant-caps");
    }

    set fontVariantCaps(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set fontVariantCaps' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'fontVariantCaps' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("font-variant-caps", V);
    }

    get fontVariantEastAsian() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get fontVariantEastAsian' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("font-variant-east-asian");
    }

    set fontVariantEastAsian(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set fontVariantEastAsian' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'fontVariantEastAsian' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("font-variant-east-asian", V);
    }

    get fontVariantEmoji() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get fontVariantEmoji' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("font-variant-emoji");
    }

    set fontVariantEmoji(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set fontVariantEmoji' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'fontVariantEmoji' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("font-variant-emoji", V);
    }

    get fontVariantLigatures() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get fontVariantLigatures' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("font-variant-ligatures");
    }

    set fontVariantLigatures(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set fontVariantLigatures' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'fontVariantLigatures' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("font-variant-ligatures", V);
    }

    get fontVariantNumeric() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get fontVariantNumeric' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("font-variant-numeric");
    }

    set fontVariantNumeric(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set fontVariantNumeric' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'fontVariantNumeric' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("font-variant-numeric", V);
    }

    get fontVariantPosition() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get fontVariantPosition' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("font-variant-position");
    }

    set fontVariantPosition(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set fontVariantPosition' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'fontVariantPosition' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("font-variant-position", V);
    }

    get fontVariationSettings() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get fontVariationSettings' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("font-variation-settings");
    }

    set fontVariationSettings(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set fontVariationSettings' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'fontVariationSettings' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("font-variation-settings", V);
    }

    get fontWeight() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get fontWeight' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("font-weight");
    }

    set fontWeight(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set fontWeight' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'fontWeight' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("font-weight", V);
    }

    get footnoteDisplay() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get footnoteDisplay' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("footnote-display");
    }

    set footnoteDisplay(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set footnoteDisplay' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'footnoteDisplay' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("footnote-display", V);
    }

    get footnotePolicy() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get footnotePolicy' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("footnote-policy");
    }

    set footnotePolicy(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set footnotePolicy' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'footnotePolicy' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("footnote-policy", V);
    }

    get forcedColorAdjust() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get forcedColorAdjust' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("forced-color-adjust");
    }

    set forcedColorAdjust(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set forcedColorAdjust' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'forcedColorAdjust' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("forced-color-adjust", V);
    }

    get gap() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get gap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("gap");
    }

    set gap(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set gap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'gap' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("gap", V);
    }

    get glyphOrientationVertical() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get glyphOrientationVertical' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("glyph-orientation-vertical");
    }

    set glyphOrientationVertical(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set glyphOrientationVertical' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'glyphOrientationVertical' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("glyph-orientation-vertical", V);
    }

    get grid() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get grid' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("grid");
    }

    set grid(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set grid' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'grid' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("grid", V);
    }

    get gridArea() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get gridArea' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("grid-area");
    }

    set gridArea(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set gridArea' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'gridArea' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("grid-area", V);
    }

    get gridAutoColumns() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get gridAutoColumns' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("grid-auto-columns");
    }

    set gridAutoColumns(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set gridAutoColumns' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'gridAutoColumns' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("grid-auto-columns", V);
    }

    get gridAutoFlow() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get gridAutoFlow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("grid-auto-flow");
    }

    set gridAutoFlow(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set gridAutoFlow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'gridAutoFlow' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("grid-auto-flow", V);
    }

    get gridAutoRows() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get gridAutoRows' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("grid-auto-rows");
    }

    set gridAutoRows(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set gridAutoRows' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'gridAutoRows' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("grid-auto-rows", V);
    }

    get gridColumn() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get gridColumn' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("grid-column");
    }

    set gridColumn(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set gridColumn' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'gridColumn' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("grid-column", V);
    }

    get gridColumnEnd() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get gridColumnEnd' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("grid-column-end");
    }

    set gridColumnEnd(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set gridColumnEnd' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'gridColumnEnd' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("grid-column-end", V);
    }

    get gridColumnStart() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get gridColumnStart' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("grid-column-start");
    }

    set gridColumnStart(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set gridColumnStart' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'gridColumnStart' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("grid-column-start", V);
    }

    get gridRow() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get gridRow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("grid-row");
    }

    set gridRow(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set gridRow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'gridRow' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("grid-row", V);
    }

    get gridRowEnd() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get gridRowEnd' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("grid-row-end");
    }

    set gridRowEnd(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set gridRowEnd' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'gridRowEnd' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("grid-row-end", V);
    }

    get gridRowStart() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get gridRowStart' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("grid-row-start");
    }

    set gridRowStart(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set gridRowStart' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'gridRowStart' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("grid-row-start", V);
    }

    get gridTemplate() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get gridTemplate' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("grid-template");
    }

    set gridTemplate(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set gridTemplate' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'gridTemplate' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("grid-template", V);
    }

    get gridTemplateAreas() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get gridTemplateAreas' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("grid-template-areas");
    }

    set gridTemplateAreas(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set gridTemplateAreas' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'gridTemplateAreas' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("grid-template-areas", V);
    }

    get gridTemplateColumns() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get gridTemplateColumns' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("grid-template-columns");
    }

    set gridTemplateColumns(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set gridTemplateColumns' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'gridTemplateColumns' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("grid-template-columns", V);
    }

    get gridTemplateRows() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get gridTemplateRows' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("grid-template-rows");
    }

    set gridTemplateRows(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set gridTemplateRows' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'gridTemplateRows' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("grid-template-rows", V);
    }

    get hangingPunctuation() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get hangingPunctuation' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("hanging-punctuation");
    }

    set hangingPunctuation(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set hangingPunctuation' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'hangingPunctuation' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("hanging-punctuation", V);
    }

    get height() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get height' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("height");
    }

    set height(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set height' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'height' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("height", V);
    }

    get hyphenateCharacter() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get hyphenateCharacter' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("hyphenate-character");
    }

    set hyphenateCharacter(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set hyphenateCharacter' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'hyphenateCharacter' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("hyphenate-character", V);
    }

    get hyphenateLimitChars() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get hyphenateLimitChars' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("hyphenate-limit-chars");
    }

    set hyphenateLimitChars(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set hyphenateLimitChars' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'hyphenateLimitChars' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("hyphenate-limit-chars", V);
    }

    get hyphenateLimitLast() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get hyphenateLimitLast' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("hyphenate-limit-last");
    }

    set hyphenateLimitLast(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set hyphenateLimitLast' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'hyphenateLimitLast' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("hyphenate-limit-last", V);
    }

    get hyphenateLimitLines() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get hyphenateLimitLines' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("hyphenate-limit-lines");
    }

    set hyphenateLimitLines(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set hyphenateLimitLines' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'hyphenateLimitLines' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("hyphenate-limit-lines", V);
    }

    get hyphenateLimitZone() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get hyphenateLimitZone' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("hyphenate-limit-zone");
    }

    set hyphenateLimitZone(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set hyphenateLimitZone' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'hyphenateLimitZone' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("hyphenate-limit-zone", V);
    }

    get hyphens() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get hyphens' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("hyphens");
    }

    set hyphens(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set hyphens' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'hyphens' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("hyphens", V);
    }

    get imageOrientation() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get imageOrientation' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("image-orientation");
    }

    set imageOrientation(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set imageOrientation' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'imageOrientation' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("image-orientation", V);
    }

    get imageRendering() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get imageRendering' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("image-rendering");
    }

    set imageRendering(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set imageRendering' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'imageRendering' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("image-rendering", V);
    }

    get imageResolution() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get imageResolution' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("image-resolution");
    }

    set imageResolution(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set imageResolution' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'imageResolution' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("image-resolution", V);
    }

    get initialLetter() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get initialLetter' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("initial-letter");
    }

    set initialLetter(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set initialLetter' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'initialLetter' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("initial-letter", V);
    }

    get initialLetterAlign() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get initialLetterAlign' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("initial-letter-align");
    }

    set initialLetterAlign(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set initialLetterAlign' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'initialLetterAlign' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("initial-letter-align", V);
    }

    get initialLetterWrap() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get initialLetterWrap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("initial-letter-wrap");
    }

    set initialLetterWrap(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set initialLetterWrap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'initialLetterWrap' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("initial-letter-wrap", V);
    }

    get inlineSize() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get inlineSize' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("inline-size");
    }

    set inlineSize(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set inlineSize' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'inlineSize' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("inline-size", V);
    }

    get inlineSizing() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get inlineSizing' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("inline-sizing");
    }

    set inlineSizing(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set inlineSizing' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'inlineSizing' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("inline-sizing", V);
    }

    get inputSecurity() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get inputSecurity' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("input-security");
    }

    set inputSecurity(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set inputSecurity' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'inputSecurity' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("input-security", V);
    }

    get inset() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get inset' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("inset");
    }

    set inset(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set inset' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'inset' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("inset", V);
    }

    get insetBlock() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get insetBlock' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("inset-block");
    }

    set insetBlock(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set insetBlock' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'insetBlock' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("inset-block", V);
    }

    get insetBlockEnd() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get insetBlockEnd' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("inset-block-end");
    }

    set insetBlockEnd(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set insetBlockEnd' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'insetBlockEnd' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("inset-block-end", V);
    }

    get insetBlockStart() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get insetBlockStart' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("inset-block-start");
    }

    set insetBlockStart(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set insetBlockStart' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'insetBlockStart' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("inset-block-start", V);
    }

    get insetInline() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get insetInline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("inset-inline");
    }

    set insetInline(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set insetInline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'insetInline' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("inset-inline", V);
    }

    get insetInlineEnd() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get insetInlineEnd' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("inset-inline-end");
    }

    set insetInlineEnd(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set insetInlineEnd' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'insetInlineEnd' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("inset-inline-end", V);
    }

    get insetInlineStart() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get insetInlineStart' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("inset-inline-start");
    }

    set insetInlineStart(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set insetInlineStart' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'insetInlineStart' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("inset-inline-start", V);
    }

    get isolation() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get isolation' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("isolation");
    }

    set isolation(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set isolation' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'isolation' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("isolation", V);
    }

    get justifyContent() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get justifyContent' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("justify-content");
    }

    set justifyContent(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set justifyContent' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'justifyContent' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("justify-content", V);
    }

    get justifyItems() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get justifyItems' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("justify-items");
    }

    set justifyItems(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set justifyItems' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'justifyItems' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("justify-items", V);
    }

    get justifySelf() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get justifySelf' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("justify-self");
    }

    set justifySelf(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set justifySelf' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'justifySelf' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("justify-self", V);
    }

    get justifyTracks() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get justifyTracks' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("justify-tracks");
    }

    set justifyTracks(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set justifyTracks' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'justifyTracks' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("justify-tracks", V);
    }

    get leadingTrim() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get leadingTrim' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("leading-trim");
    }

    set leadingTrim(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set leadingTrim' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'leadingTrim' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("leading-trim", V);
    }

    get left() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get left' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("left");
    }

    set left(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set left' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'left' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("left", V);
    }

    get letterSpacing() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get letterSpacing' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("letter-spacing");
    }

    set letterSpacing(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set letterSpacing' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'letterSpacing' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("letter-spacing", V);
    }

    get lightingColor() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get lightingColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("lighting-color");
    }

    set lightingColor(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set lightingColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'lightingColor' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("lighting-color", V);
    }

    get lineBreak() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get lineBreak' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("line-break");
    }

    set lineBreak(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set lineBreak' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'lineBreak' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("line-break", V);
    }

    get lineClamp() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get lineClamp' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("line-clamp");
    }

    set lineClamp(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set lineClamp' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'lineClamp' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("line-clamp", V);
    }

    get lineGrid() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get lineGrid' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("line-grid");
    }

    set lineGrid(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set lineGrid' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'lineGrid' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("line-grid", V);
    }

    get lineHeight() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get lineHeight' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("line-height");
    }

    set lineHeight(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set lineHeight' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'lineHeight' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("line-height", V);
    }

    get lineHeightStep() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get lineHeightStep' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("line-height-step");
    }

    set lineHeightStep(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set lineHeightStep' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'lineHeightStep' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("line-height-step", V);
    }

    get linePadding() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get linePadding' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("line-padding");
    }

    set linePadding(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set linePadding' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'linePadding' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("line-padding", V);
    }

    get lineSnap() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get lineSnap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("line-snap");
    }

    set lineSnap(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set lineSnap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'lineSnap' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("line-snap", V);
    }

    get listStyle() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get listStyle' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("list-style");
    }

    set listStyle(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set listStyle' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'listStyle' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("list-style", V);
    }

    get listStyleImage() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get listStyleImage' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("list-style-image");
    }

    set listStyleImage(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set listStyleImage' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'listStyleImage' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("list-style-image", V);
    }

    get listStylePosition() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get listStylePosition' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("list-style-position");
    }

    set listStylePosition(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set listStylePosition' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'listStylePosition' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("list-style-position", V);
    }

    get listStyleType() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get listStyleType' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("list-style-type");
    }

    set listStyleType(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set listStyleType' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'listStyleType' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("list-style-type", V);
    }

    get margin() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get margin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("margin");
    }

    set margin(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set margin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'margin' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("margin", V);
    }

    get marginBlock() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get marginBlock' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("margin-block");
    }

    set marginBlock(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set marginBlock' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'marginBlock' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("margin-block", V);
    }

    get marginBlockEnd() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get marginBlockEnd' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("margin-block-end");
    }

    set marginBlockEnd(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set marginBlockEnd' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'marginBlockEnd' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("margin-block-end", V);
    }

    get marginBlockStart() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get marginBlockStart' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("margin-block-start");
    }

    set marginBlockStart(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set marginBlockStart' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'marginBlockStart' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("margin-block-start", V);
    }

    get marginBottom() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get marginBottom' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("margin-bottom");
    }

    set marginBottom(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set marginBottom' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'marginBottom' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("margin-bottom", V);
    }

    get marginBreak() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get marginBreak' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("margin-break");
    }

    set marginBreak(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set marginBreak' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'marginBreak' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("margin-break", V);
    }

    get marginInline() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get marginInline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("margin-inline");
    }

    set marginInline(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set marginInline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'marginInline' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("margin-inline", V);
    }

    get marginInlineEnd() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get marginInlineEnd' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("margin-inline-end");
    }

    set marginInlineEnd(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set marginInlineEnd' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'marginInlineEnd' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("margin-inline-end", V);
    }

    get marginInlineStart() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get marginInlineStart' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("margin-inline-start");
    }

    set marginInlineStart(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set marginInlineStart' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'marginInlineStart' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("margin-inline-start", V);
    }

    get marginLeft() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get marginLeft' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("margin-left");
    }

    set marginLeft(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set marginLeft' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'marginLeft' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("margin-left", V);
    }

    get marginRight() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get marginRight' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("margin-right");
    }

    set marginRight(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set marginRight' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'marginRight' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("margin-right", V);
    }

    get marginTop() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get marginTop' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("margin-top");
    }

    set marginTop(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set marginTop' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'marginTop' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("margin-top", V);
    }

    get marginTrim() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get marginTrim' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("margin-trim");
    }

    set marginTrim(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set marginTrim' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'marginTrim' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("margin-trim", V);
    }

    get marker() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get marker' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("marker");
    }

    set marker(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set marker' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'marker' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("marker", V);
    }

    get markerEnd() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get markerEnd' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("marker-end");
    }

    set markerEnd(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set markerEnd' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'markerEnd' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("marker-end", V);
    }

    get markerMid() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get markerMid' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("marker-mid");
    }

    set markerMid(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set markerMid' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'markerMid' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("marker-mid", V);
    }

    get markerSide() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get markerSide' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("marker-side");
    }

    set markerSide(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set markerSide' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'markerSide' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("marker-side", V);
    }

    get markerStart() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get markerStart' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("marker-start");
    }

    set markerStart(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set markerStart' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'markerStart' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("marker-start", V);
    }

    get mask() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get mask' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("mask");
    }

    set mask(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set mask' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'mask' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("mask", V);
    }

    get maskBorder() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get maskBorder' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("mask-border");
    }

    set maskBorder(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set maskBorder' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'maskBorder' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("mask-border", V);
    }

    get maskBorderMode() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get maskBorderMode' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("mask-border-mode");
    }

    set maskBorderMode(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set maskBorderMode' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'maskBorderMode' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("mask-border-mode", V);
    }

    get maskBorderOutset() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get maskBorderOutset' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("mask-border-outset");
    }

    set maskBorderOutset(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set maskBorderOutset' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'maskBorderOutset' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("mask-border-outset", V);
    }

    get maskBorderRepeat() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get maskBorderRepeat' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("mask-border-repeat");
    }

    set maskBorderRepeat(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set maskBorderRepeat' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'maskBorderRepeat' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("mask-border-repeat", V);
    }

    get maskBorderSlice() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get maskBorderSlice' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("mask-border-slice");
    }

    set maskBorderSlice(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set maskBorderSlice' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'maskBorderSlice' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("mask-border-slice", V);
    }

    get maskBorderSource() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get maskBorderSource' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("mask-border-source");
    }

    set maskBorderSource(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set maskBorderSource' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'maskBorderSource' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("mask-border-source", V);
    }

    get maskBorderWidth() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get maskBorderWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("mask-border-width");
    }

    set maskBorderWidth(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set maskBorderWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'maskBorderWidth' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("mask-border-width", V);
    }

    get maskClip() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get maskClip' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("mask-clip");
    }

    set maskClip(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set maskClip' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'maskClip' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("mask-clip", V);
    }

    get maskComposite() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get maskComposite' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("mask-composite");
    }

    set maskComposite(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set maskComposite' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'maskComposite' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("mask-composite", V);
    }

    get maskImage() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get maskImage' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("mask-image");
    }

    set maskImage(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set maskImage' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'maskImage' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("mask-image", V);
    }

    get maskMode() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get maskMode' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("mask-mode");
    }

    set maskMode(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set maskMode' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'maskMode' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("mask-mode", V);
    }

    get maskOrigin() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get maskOrigin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("mask-origin");
    }

    set maskOrigin(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set maskOrigin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'maskOrigin' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("mask-origin", V);
    }

    get maskPosition() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get maskPosition' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("mask-position");
    }

    set maskPosition(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set maskPosition' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'maskPosition' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("mask-position", V);
    }

    get maskRepeat() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get maskRepeat' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("mask-repeat");
    }

    set maskRepeat(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set maskRepeat' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'maskRepeat' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("mask-repeat", V);
    }

    get maskSize() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get maskSize' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("mask-size");
    }

    set maskSize(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set maskSize' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'maskSize' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("mask-size", V);
    }

    get maskType() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get maskType' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("mask-type");
    }

    set maskType(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set maskType' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'maskType' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("mask-type", V);
    }

    get masonryAutoFlow() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get masonryAutoFlow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("masonry-auto-flow");
    }

    set masonryAutoFlow(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set masonryAutoFlow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'masonryAutoFlow' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("masonry-auto-flow", V);
    }

    get maxBlockSize() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get maxBlockSize' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("max-block-size");
    }

    set maxBlockSize(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set maxBlockSize' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'maxBlockSize' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("max-block-size", V);
    }

    get maxHeight() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get maxHeight' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("max-height");
    }

    set maxHeight(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set maxHeight' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'maxHeight' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("max-height", V);
    }

    get maxInlineSize() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get maxInlineSize' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("max-inline-size");
    }

    set maxInlineSize(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set maxInlineSize' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'maxInlineSize' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("max-inline-size", V);
    }

    get maxLines() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get maxLines' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("max-lines");
    }

    set maxLines(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set maxLines' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'maxLines' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("max-lines", V);
    }

    get maxWidth() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get maxWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("max-width");
    }

    set maxWidth(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set maxWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'maxWidth' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("max-width", V);
    }

    get minBlockSize() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get minBlockSize' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("min-block-size");
    }

    set minBlockSize(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set minBlockSize' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'minBlockSize' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("min-block-size", V);
    }

    get minHeight() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get minHeight' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("min-height");
    }

    set minHeight(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set minHeight' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'minHeight' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("min-height", V);
    }

    get minInlineSize() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get minInlineSize' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("min-inline-size");
    }

    set minInlineSize(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set minInlineSize' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'minInlineSize' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("min-inline-size", V);
    }

    get minIntrinsicSizing() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get minIntrinsicSizing' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("min-intrinsic-sizing");
    }

    set minIntrinsicSizing(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set minIntrinsicSizing' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'minIntrinsicSizing' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("min-intrinsic-sizing", V);
    }

    get minWidth() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get minWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("min-width");
    }

    set minWidth(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set minWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'minWidth' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("min-width", V);
    }

    get mixBlendMode() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get mixBlendMode' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("mix-blend-mode");
    }

    set mixBlendMode(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set mixBlendMode' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'mixBlendMode' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("mix-blend-mode", V);
    }

    get navDown() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get navDown' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("nav-down");
    }

    set navDown(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set navDown' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'navDown' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("nav-down", V);
    }

    get navLeft() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get navLeft' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("nav-left");
    }

    set navLeft(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set navLeft' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'navLeft' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("nav-left", V);
    }

    get navRight() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get navRight' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("nav-right");
    }

    set navRight(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set navRight' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'navRight' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("nav-right", V);
    }

    get navUp() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get navUp' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("nav-up");
    }

    set navUp(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set navUp' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'navUp' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("nav-up", V);
    }

    get objectFit() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get objectFit' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("object-fit");
    }

    set objectFit(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set objectFit' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'objectFit' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("object-fit", V);
    }

    get objectPosition() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get objectPosition' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("object-position");
    }

    set objectPosition(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set objectPosition' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'objectPosition' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("object-position", V);
    }

    get offset() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get offset' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("offset");
    }

    set offset(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set offset' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'offset' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("offset", V);
    }

    get offsetAnchor() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get offsetAnchor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("offset-anchor");
    }

    set offsetAnchor(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set offsetAnchor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'offsetAnchor' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("offset-anchor", V);
    }

    get offsetDistance() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get offsetDistance' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("offset-distance");
    }

    set offsetDistance(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set offsetDistance' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'offsetDistance' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("offset-distance", V);
    }

    get offsetPath() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get offsetPath' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("offset-path");
    }

    set offsetPath(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set offsetPath' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'offsetPath' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("offset-path", V);
    }

    get offsetPosition() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get offsetPosition' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("offset-position");
    }

    set offsetPosition(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set offsetPosition' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'offsetPosition' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("offset-position", V);
    }

    get offsetRotate() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get offsetRotate' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("offset-rotate");
    }

    set offsetRotate(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set offsetRotate' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'offsetRotate' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("offset-rotate", V);
    }

    get opacity() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get opacity' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("opacity");
    }

    set opacity(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set opacity' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'opacity' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("opacity", V);
    }

    get order() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get order' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("order");
    }

    set order(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set order' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'order' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("order", V);
    }

    get orphans() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get orphans' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("orphans");
    }

    set orphans(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set orphans' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'orphans' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("orphans", V);
    }

    get outline() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get outline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("outline");
    }

    set outline(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set outline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'outline' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("outline", V);
    }

    get outlineColor() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get outlineColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("outline-color");
    }

    set outlineColor(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set outlineColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'outlineColor' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("outline-color", V);
    }

    get outlineOffset() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get outlineOffset' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("outline-offset");
    }

    set outlineOffset(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set outlineOffset' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'outlineOffset' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("outline-offset", V);
    }

    get outlineStyle() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get outlineStyle' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("outline-style");
    }

    set outlineStyle(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set outlineStyle' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'outlineStyle' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("outline-style", V);
    }

    get outlineWidth() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get outlineWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("outline-width");
    }

    set outlineWidth(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set outlineWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'outlineWidth' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("outline-width", V);
    }

    get overflow() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get overflow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("overflow");
    }

    set overflow(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set overflow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'overflow' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("overflow", V);
    }

    get overflowAnchor() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get overflowAnchor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("overflow-anchor");
    }

    set overflowAnchor(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set overflowAnchor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'overflowAnchor' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("overflow-anchor", V);
    }

    get overflowBlock() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get overflowBlock' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("overflow-block");
    }

    set overflowBlock(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set overflowBlock' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'overflowBlock' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("overflow-block", V);
    }

    get overflowClipMargin() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get overflowClipMargin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("overflow-clip-margin");
    }

    set overflowClipMargin(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set overflowClipMargin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'overflowClipMargin' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("overflow-clip-margin", V);
    }

    get overflowInline() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get overflowInline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("overflow-inline");
    }

    set overflowInline(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set overflowInline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'overflowInline' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("overflow-inline", V);
    }

    get overflowWrap() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get overflowWrap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("overflow-wrap");
    }

    set overflowWrap(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set overflowWrap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'overflowWrap' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("overflow-wrap", V);
    }

    get overflowX() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get overflowX' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("overflow-x");
    }

    set overflowX(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set overflowX' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'overflowX' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("overflow-x", V);
    }

    get overflowY() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get overflowY' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("overflow-y");
    }

    set overflowY(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set overflowY' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'overflowY' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("overflow-y", V);
    }

    get overscrollBehavior() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get overscrollBehavior' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("overscroll-behavior");
    }

    set overscrollBehavior(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set overscrollBehavior' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'overscrollBehavior' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("overscroll-behavior", V);
    }

    get overscrollBehaviorBlock() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get overscrollBehaviorBlock' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("overscroll-behavior-block");
    }

    set overscrollBehaviorBlock(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set overscrollBehaviorBlock' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'overscrollBehaviorBlock' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("overscroll-behavior-block", V);
    }

    get overscrollBehaviorInline() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get overscrollBehaviorInline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("overscroll-behavior-inline");
    }

    set overscrollBehaviorInline(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set overscrollBehaviorInline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'overscrollBehaviorInline' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("overscroll-behavior-inline", V);
    }

    get overscrollBehaviorX() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get overscrollBehaviorX' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("overscroll-behavior-x");
    }

    set overscrollBehaviorX(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set overscrollBehaviorX' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'overscrollBehaviorX' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("overscroll-behavior-x", V);
    }

    get overscrollBehaviorY() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get overscrollBehaviorY' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("overscroll-behavior-y");
    }

    set overscrollBehaviorY(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set overscrollBehaviorY' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'overscrollBehaviorY' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("overscroll-behavior-y", V);
    }

    get padding() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get padding' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("padding");
    }

    set padding(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set padding' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'padding' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("padding", V);
    }

    get paddingBlock() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get paddingBlock' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("padding-block");
    }

    set paddingBlock(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set paddingBlock' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'paddingBlock' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("padding-block", V);
    }

    get paddingBlockEnd() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get paddingBlockEnd' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("padding-block-end");
    }

    set paddingBlockEnd(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set paddingBlockEnd' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'paddingBlockEnd' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("padding-block-end", V);
    }

    get paddingBlockStart() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get paddingBlockStart' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("padding-block-start");
    }

    set paddingBlockStart(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set paddingBlockStart' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'paddingBlockStart' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("padding-block-start", V);
    }

    get paddingBottom() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get paddingBottom' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("padding-bottom");
    }

    set paddingBottom(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set paddingBottom' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'paddingBottom' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("padding-bottom", V);
    }

    get paddingInline() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get paddingInline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("padding-inline");
    }

    set paddingInline(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set paddingInline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'paddingInline' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("padding-inline", V);
    }

    get paddingInlineEnd() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get paddingInlineEnd' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("padding-inline-end");
    }

    set paddingInlineEnd(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set paddingInlineEnd' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'paddingInlineEnd' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("padding-inline-end", V);
    }

    get paddingInlineStart() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get paddingInlineStart' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("padding-inline-start");
    }

    set paddingInlineStart(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set paddingInlineStart' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'paddingInlineStart' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("padding-inline-start", V);
    }

    get paddingLeft() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get paddingLeft' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("padding-left");
    }

    set paddingLeft(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set paddingLeft' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'paddingLeft' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("padding-left", V);
    }

    get paddingRight() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get paddingRight' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("padding-right");
    }

    set paddingRight(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set paddingRight' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'paddingRight' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("padding-right", V);
    }

    get paddingTop() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get paddingTop' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("padding-top");
    }

    set paddingTop(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set paddingTop' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'paddingTop' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("padding-top", V);
    }

    get page() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get page' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("page");
    }

    set page(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set page' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'page' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("page", V);
    }

    get pageBreakAfter() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get pageBreakAfter' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("page-break-after");
    }

    set pageBreakAfter(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set pageBreakAfter' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'pageBreakAfter' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("page-break-after", V);
    }

    get pageBreakBefore() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get pageBreakBefore' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("page-break-before");
    }

    set pageBreakBefore(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set pageBreakBefore' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'pageBreakBefore' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("page-break-before", V);
    }

    get pageBreakInside() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get pageBreakInside' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("page-break-inside");
    }

    set pageBreakInside(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set pageBreakInside' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'pageBreakInside' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("page-break-inside", V);
    }

    get paintOrder() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get paintOrder' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("paint-order");
    }

    set paintOrder(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set paintOrder' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'paintOrder' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("paint-order", V);
    }

    get pause() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get pause' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("pause");
    }

    set pause(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set pause' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'pause' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("pause", V);
    }

    get pauseAfter() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get pauseAfter' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("pause-after");
    }

    set pauseAfter(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set pauseAfter' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'pauseAfter' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("pause-after", V);
    }

    get pauseBefore() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get pauseBefore' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("pause-before");
    }

    set pauseBefore(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set pauseBefore' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'pauseBefore' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("pause-before", V);
    }

    get perspective() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get perspective' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("perspective");
    }

    set perspective(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set perspective' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'perspective' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("perspective", V);
    }

    get perspectiveOrigin() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get perspectiveOrigin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("perspective-origin");
    }

    set perspectiveOrigin(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set perspectiveOrigin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'perspectiveOrigin' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("perspective-origin", V);
    }

    get placeContent() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get placeContent' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("place-content");
    }

    set placeContent(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set placeContent' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'placeContent' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("place-content", V);
    }

    get placeItems() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get placeItems' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("place-items");
    }

    set placeItems(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set placeItems' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'placeItems' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("place-items", V);
    }

    get placeSelf() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get placeSelf' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("place-self");
    }

    set placeSelf(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set placeSelf' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'placeSelf' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("place-self", V);
    }

    get pointerEvents() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get pointerEvents' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("pointer-events");
    }

    set pointerEvents(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set pointerEvents' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'pointerEvents' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("pointer-events", V);
    }

    get position() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get position' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("position");
    }

    set position(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set position' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'position' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("position", V);
    }

    get printColorAdjust() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get printColorAdjust' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("print-color-adjust");
    }

    set printColorAdjust(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set printColorAdjust' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'printColorAdjust' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("print-color-adjust", V);
    }

    get quotes() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get quotes' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("quotes");
    }

    set quotes(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set quotes' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'quotes' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("quotes", V);
    }

    get r() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get r' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("r");
    }

    set r(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set r' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'r' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("r", V);
    }

    get regionFragment() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get regionFragment' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("region-fragment");
    }

    set regionFragment(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set regionFragment' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'regionFragment' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("region-fragment", V);
    }

    get resize() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get resize' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("resize");
    }

    set resize(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set resize' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'resize' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("resize", V);
    }

    get rest() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get rest' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("rest");
    }

    set rest(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set rest' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'rest' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("rest", V);
    }

    get restAfter() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get restAfter' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("rest-after");
    }

    set restAfter(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set restAfter' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'restAfter' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("rest-after", V);
    }

    get restBefore() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get restBefore' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("rest-before");
    }

    set restBefore(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set restBefore' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'restBefore' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("rest-before", V);
    }

    get right() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get right' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("right");
    }

    set right(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set right' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'right' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("right", V);
    }

    get rotate() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get rotate' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("rotate");
    }

    set rotate(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set rotate' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'rotate' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("rotate", V);
    }

    get rowGap() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get rowGap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("row-gap");
    }

    set rowGap(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set rowGap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'rowGap' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("row-gap", V);
    }

    get rubyAlign() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get rubyAlign' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("ruby-align");
    }

    set rubyAlign(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set rubyAlign' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'rubyAlign' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("ruby-align", V);
    }

    get rubyMerge() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get rubyMerge' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("ruby-merge");
    }

    set rubyMerge(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set rubyMerge' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'rubyMerge' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("ruby-merge", V);
    }

    get rubyOverhang() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get rubyOverhang' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("ruby-overhang");
    }

    set rubyOverhang(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set rubyOverhang' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'rubyOverhang' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("ruby-overhang", V);
    }

    get rubyPosition() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get rubyPosition' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("ruby-position");
    }

    set rubyPosition(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set rubyPosition' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'rubyPosition' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("ruby-position", V);
    }

    get rx() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get rx' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("rx");
    }

    set rx(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set rx' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'rx' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("rx", V);
    }

    get ry() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get ry' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("ry");
    }

    set ry(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set ry' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'ry' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("ry", V);
    }

    get scale() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scale' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scale");
    }

    set scale(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scale' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scale' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scale", V);
    }

    get scrollBehavior() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scrollBehavior' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-behavior");
    }

    set scrollBehavior(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scrollBehavior' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scrollBehavior' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-behavior", V);
    }

    get scrollMargin() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scrollMargin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-margin");
    }

    set scrollMargin(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scrollMargin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scrollMargin' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-margin", V);
    }

    get scrollMarginBlock() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scrollMarginBlock' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-margin-block");
    }

    set scrollMarginBlock(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scrollMarginBlock' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scrollMarginBlock' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-margin-block", V);
    }

    get scrollMarginBlockEnd() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scrollMarginBlockEnd' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-margin-block-end");
    }

    set scrollMarginBlockEnd(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scrollMarginBlockEnd' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scrollMarginBlockEnd' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-margin-block-end", V);
    }

    get scrollMarginBlockStart() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scrollMarginBlockStart' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-margin-block-start");
    }

    set scrollMarginBlockStart(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scrollMarginBlockStart' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scrollMarginBlockStart' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-margin-block-start", V);
    }

    get scrollMarginBottom() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scrollMarginBottom' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-margin-bottom");
    }

    set scrollMarginBottom(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scrollMarginBottom' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scrollMarginBottom' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-margin-bottom", V);
    }

    get scrollMarginInline() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scrollMarginInline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-margin-inline");
    }

    set scrollMarginInline(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scrollMarginInline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scrollMarginInline' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-margin-inline", V);
    }

    get scrollMarginInlineEnd() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scrollMarginInlineEnd' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-margin-inline-end");
    }

    set scrollMarginInlineEnd(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scrollMarginInlineEnd' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scrollMarginInlineEnd' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-margin-inline-end", V);
    }

    get scrollMarginInlineStart() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scrollMarginInlineStart' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-margin-inline-start");
    }

    set scrollMarginInlineStart(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scrollMarginInlineStart' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scrollMarginInlineStart' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-margin-inline-start", V);
    }

    get scrollMarginLeft() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scrollMarginLeft' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-margin-left");
    }

    set scrollMarginLeft(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scrollMarginLeft' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scrollMarginLeft' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-margin-left", V);
    }

    get scrollMarginRight() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scrollMarginRight' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-margin-right");
    }

    set scrollMarginRight(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scrollMarginRight' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scrollMarginRight' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-margin-right", V);
    }

    get scrollMarginTop() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scrollMarginTop' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-margin-top");
    }

    set scrollMarginTop(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scrollMarginTop' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scrollMarginTop' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-margin-top", V);
    }

    get scrollPadding() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scrollPadding' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-padding");
    }

    set scrollPadding(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scrollPadding' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scrollPadding' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-padding", V);
    }

    get scrollPaddingBlock() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scrollPaddingBlock' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-padding-block");
    }

    set scrollPaddingBlock(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scrollPaddingBlock' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scrollPaddingBlock' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-padding-block", V);
    }

    get scrollPaddingBlockEnd() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scrollPaddingBlockEnd' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-padding-block-end");
    }

    set scrollPaddingBlockEnd(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scrollPaddingBlockEnd' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scrollPaddingBlockEnd' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-padding-block-end", V);
    }

    get scrollPaddingBlockStart() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scrollPaddingBlockStart' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-padding-block-start");
    }

    set scrollPaddingBlockStart(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scrollPaddingBlockStart' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scrollPaddingBlockStart' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-padding-block-start", V);
    }

    get scrollPaddingBottom() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scrollPaddingBottom' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-padding-bottom");
    }

    set scrollPaddingBottom(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scrollPaddingBottom' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scrollPaddingBottom' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-padding-bottom", V);
    }

    get scrollPaddingInline() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scrollPaddingInline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-padding-inline");
    }

    set scrollPaddingInline(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scrollPaddingInline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scrollPaddingInline' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-padding-inline", V);
    }

    get scrollPaddingInlineEnd() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scrollPaddingInlineEnd' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-padding-inline-end");
    }

    set scrollPaddingInlineEnd(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scrollPaddingInlineEnd' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scrollPaddingInlineEnd' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-padding-inline-end", V);
    }

    get scrollPaddingInlineStart() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scrollPaddingInlineStart' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-padding-inline-start");
    }

    set scrollPaddingInlineStart(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scrollPaddingInlineStart' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scrollPaddingInlineStart' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-padding-inline-start", V);
    }

    get scrollPaddingLeft() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scrollPaddingLeft' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-padding-left");
    }

    set scrollPaddingLeft(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scrollPaddingLeft' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scrollPaddingLeft' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-padding-left", V);
    }

    get scrollPaddingRight() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scrollPaddingRight' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-padding-right");
    }

    set scrollPaddingRight(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scrollPaddingRight' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scrollPaddingRight' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-padding-right", V);
    }

    get scrollPaddingTop() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scrollPaddingTop' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-padding-top");
    }

    set scrollPaddingTop(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scrollPaddingTop' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scrollPaddingTop' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-padding-top", V);
    }

    get scrollSnapAlign() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scrollSnapAlign' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-snap-align");
    }

    set scrollSnapAlign(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scrollSnapAlign' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scrollSnapAlign' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-snap-align", V);
    }

    get scrollSnapStop() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scrollSnapStop' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-snap-stop");
    }

    set scrollSnapStop(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scrollSnapStop' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scrollSnapStop' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-snap-stop", V);
    }

    get scrollSnapType() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scrollSnapType' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-snap-type");
    }

    set scrollSnapType(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scrollSnapType' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scrollSnapType' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-snap-type", V);
    }

    get scrollbarColor() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scrollbarColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scrollbar-color");
    }

    set scrollbarColor(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scrollbarColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scrollbarColor' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scrollbar-color", V);
    }

    get scrollbarGutter() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scrollbarGutter' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scrollbar-gutter");
    }

    set scrollbarGutter(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scrollbarGutter' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scrollbarGutter' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scrollbar-gutter", V);
    }

    get scrollbarWidth() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scrollbarWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scrollbar-width");
    }

    set scrollbarWidth(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scrollbarWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scrollbarWidth' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scrollbar-width", V);
    }

    get shapeImageThreshold() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get shapeImageThreshold' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("shape-image-threshold");
    }

    set shapeImageThreshold(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set shapeImageThreshold' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'shapeImageThreshold' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("shape-image-threshold", V);
    }

    get shapeInside() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get shapeInside' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("shape-inside");
    }

    set shapeInside(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set shapeInside' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'shapeInside' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("shape-inside", V);
    }

    get shapeMargin() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get shapeMargin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("shape-margin");
    }

    set shapeMargin(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set shapeMargin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'shapeMargin' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("shape-margin", V);
    }

    get shapeOutside() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get shapeOutside' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("shape-outside");
    }

    set shapeOutside(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set shapeOutside' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'shapeOutside' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("shape-outside", V);
    }

    get shapePadding() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get shapePadding' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("shape-padding");
    }

    set shapePadding(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set shapePadding' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'shapePadding' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("shape-padding", V);
    }

    get shapeRendering() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get shapeRendering' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("shape-rendering");
    }

    set shapeRendering(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set shapeRendering' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'shapeRendering' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("shape-rendering", V);
    }

    get shapeSubtract() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get shapeSubtract' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("shape-subtract");
    }

    set shapeSubtract(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set shapeSubtract' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'shapeSubtract' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("shape-subtract", V);
    }

    get spatialNavigationAction() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get spatialNavigationAction' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("spatial-navigation-action");
    }

    set spatialNavigationAction(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set spatialNavigationAction' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'spatialNavigationAction' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("spatial-navigation-action", V);
    }

    get spatialNavigationContain() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get spatialNavigationContain' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("spatial-navigation-contain");
    }

    set spatialNavigationContain(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set spatialNavigationContain' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'spatialNavigationContain' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("spatial-navigation-contain", V);
    }

    get spatialNavigationFunction() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get spatialNavigationFunction' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("spatial-navigation-function");
    }

    set spatialNavigationFunction(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set spatialNavigationFunction' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'spatialNavigationFunction' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("spatial-navigation-function", V);
    }

    get speak() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get speak' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("speak");
    }

    set speak(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set speak' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'speak' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("speak", V);
    }

    get speakAs() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get speakAs' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("speak-as");
    }

    set speakAs(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set speakAs' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'speakAs' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("speak-as", V);
    }

    get stopColor() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get stopColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("stop-color");
    }

    set stopColor(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set stopColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'stopColor' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("stop-color", V);
    }

    get stopOpacity() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get stopOpacity' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("stop-opacity");
    }

    set stopOpacity(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set stopOpacity' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'stopOpacity' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("stop-opacity", V);
    }

    get stringSet() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get stringSet' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("string-set");
    }

    set stringSet(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set stringSet' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'stringSet' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("string-set", V);
    }

    get stroke() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get stroke' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("stroke");
    }

    set stroke(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set stroke' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'stroke' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("stroke", V);
    }

    get strokeAlign() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get strokeAlign' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("stroke-align");
    }

    set strokeAlign(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set strokeAlign' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'strokeAlign' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("stroke-align", V);
    }

    get strokeAlignment() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get strokeAlignment' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("stroke-alignment");
    }

    set strokeAlignment(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set strokeAlignment' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'strokeAlignment' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("stroke-alignment", V);
    }

    get strokeBreak() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get strokeBreak' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("stroke-break");
    }

    set strokeBreak(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set strokeBreak' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'strokeBreak' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("stroke-break", V);
    }

    get strokeColor() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get strokeColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("stroke-color");
    }

    set strokeColor(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set strokeColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'strokeColor' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("stroke-color", V);
    }

    get strokeDashCorner() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get strokeDashCorner' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("stroke-dash-corner");
    }

    set strokeDashCorner(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set strokeDashCorner' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'strokeDashCorner' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("stroke-dash-corner", V);
    }

    get strokeDashJustify() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get strokeDashJustify' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("stroke-dash-justify");
    }

    set strokeDashJustify(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set strokeDashJustify' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'strokeDashJustify' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("stroke-dash-justify", V);
    }

    get strokeDashadjust() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get strokeDashadjust' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("stroke-dashadjust");
    }

    set strokeDashadjust(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set strokeDashadjust' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'strokeDashadjust' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("stroke-dashadjust", V);
    }

    get strokeDasharray() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get strokeDasharray' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("stroke-dasharray");
    }

    set strokeDasharray(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set strokeDasharray' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'strokeDasharray' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("stroke-dasharray", V);
    }

    get strokeDashcorner() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get strokeDashcorner' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("stroke-dashcorner");
    }

    set strokeDashcorner(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set strokeDashcorner' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'strokeDashcorner' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("stroke-dashcorner", V);
    }

    get strokeDashoffset() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get strokeDashoffset' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("stroke-dashoffset");
    }

    set strokeDashoffset(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set strokeDashoffset' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'strokeDashoffset' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("stroke-dashoffset", V);
    }

    get strokeImage() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get strokeImage' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("stroke-image");
    }

    set strokeImage(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set strokeImage' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'strokeImage' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("stroke-image", V);
    }

    get strokeLinecap() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get strokeLinecap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("stroke-linecap");
    }

    set strokeLinecap(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set strokeLinecap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'strokeLinecap' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("stroke-linecap", V);
    }

    get strokeLinejoin() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get strokeLinejoin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("stroke-linejoin");
    }

    set strokeLinejoin(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set strokeLinejoin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'strokeLinejoin' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("stroke-linejoin", V);
    }

    get strokeMiterlimit() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get strokeMiterlimit' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("stroke-miterlimit");
    }

    set strokeMiterlimit(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set strokeMiterlimit' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'strokeMiterlimit' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("stroke-miterlimit", V);
    }

    get strokeOpacity() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get strokeOpacity' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("stroke-opacity");
    }

    set strokeOpacity(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set strokeOpacity' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'strokeOpacity' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("stroke-opacity", V);
    }

    get strokeOrigin() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get strokeOrigin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("stroke-origin");
    }

    set strokeOrigin(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set strokeOrigin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'strokeOrigin' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("stroke-origin", V);
    }

    get strokePosition() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get strokePosition' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("stroke-position");
    }

    set strokePosition(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set strokePosition' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'strokePosition' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("stroke-position", V);
    }

    get strokeRepeat() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get strokeRepeat' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("stroke-repeat");
    }

    set strokeRepeat(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set strokeRepeat' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'strokeRepeat' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("stroke-repeat", V);
    }

    get strokeSize() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get strokeSize' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("stroke-size");
    }

    set strokeSize(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set strokeSize' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'strokeSize' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("stroke-size", V);
    }

    get strokeWidth() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get strokeWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("stroke-width");
    }

    set strokeWidth(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set strokeWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'strokeWidth' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("stroke-width", V);
    }

    get tabSize() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get tabSize' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("tab-size");
    }

    set tabSize(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set tabSize' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'tabSize' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("tab-size", V);
    }

    get tableLayout() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get tableLayout' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("table-layout");
    }

    set tableLayout(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set tableLayout' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'tableLayout' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("table-layout", V);
    }

    get textAlign() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get textAlign' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-align");
    }

    set textAlign(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set textAlign' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'textAlign' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-align", V);
    }

    get textAlignAll() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get textAlignAll' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-align-all");
    }

    set textAlignAll(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set textAlignAll' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'textAlignAll' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-align-all", V);
    }

    get textAlignLast() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get textAlignLast' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-align-last");
    }

    set textAlignLast(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set textAlignLast' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'textAlignLast' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-align-last", V);
    }

    get textAnchor() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get textAnchor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-anchor");
    }

    set textAnchor(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set textAnchor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'textAnchor' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-anchor", V);
    }

    get textCombineUpright() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get textCombineUpright' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-combine-upright");
    }

    set textCombineUpright(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set textCombineUpright' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'textCombineUpright' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-combine-upright", V);
    }

    get textDecoration() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get textDecoration' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-decoration");
    }

    set textDecoration(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set textDecoration' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'textDecoration' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-decoration", V);
    }

    get textDecorationColor() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get textDecorationColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-decoration-color");
    }

    set textDecorationColor(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set textDecorationColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'textDecorationColor' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-decoration-color", V);
    }

    get textDecorationLine() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get textDecorationLine' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-decoration-line");
    }

    set textDecorationLine(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set textDecorationLine' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'textDecorationLine' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-decoration-line", V);
    }

    get textDecorationSkip() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get textDecorationSkip' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-decoration-skip");
    }

    set textDecorationSkip(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set textDecorationSkip' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'textDecorationSkip' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-decoration-skip", V);
    }

    get textDecorationSkipBox() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get textDecorationSkipBox' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-decoration-skip-box");
    }

    set textDecorationSkipBox(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set textDecorationSkipBox' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'textDecorationSkipBox' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-decoration-skip-box", V);
    }

    get textDecorationSkipInk() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get textDecorationSkipInk' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-decoration-skip-ink");
    }

    set textDecorationSkipInk(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set textDecorationSkipInk' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'textDecorationSkipInk' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-decoration-skip-ink", V);
    }

    get textDecorationSkipInset() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get textDecorationSkipInset' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-decoration-skip-inset");
    }

    set textDecorationSkipInset(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set textDecorationSkipInset' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'textDecorationSkipInset' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-decoration-skip-inset", V);
    }

    get textDecorationSkipSelf() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get textDecorationSkipSelf' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-decoration-skip-self");
    }

    set textDecorationSkipSelf(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set textDecorationSkipSelf' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'textDecorationSkipSelf' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-decoration-skip-self", V);
    }

    get textDecorationSkipSpaces() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get textDecorationSkipSpaces' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-decoration-skip-spaces");
    }

    set textDecorationSkipSpaces(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set textDecorationSkipSpaces' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'textDecorationSkipSpaces' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-decoration-skip-spaces", V);
    }

    get textDecorationStyle() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get textDecorationStyle' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-decoration-style");
    }

    set textDecorationStyle(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set textDecorationStyle' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'textDecorationStyle' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-decoration-style", V);
    }

    get textDecorationThickness() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get textDecorationThickness' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-decoration-thickness");
    }

    set textDecorationThickness(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set textDecorationThickness' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'textDecorationThickness' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-decoration-thickness", V);
    }

    get textEdge() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get textEdge' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-edge");
    }

    set textEdge(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set textEdge' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'textEdge' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-edge", V);
    }

    get textEmphasis() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get textEmphasis' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-emphasis");
    }

    set textEmphasis(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set textEmphasis' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'textEmphasis' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-emphasis", V);
    }

    get textEmphasisColor() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get textEmphasisColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-emphasis-color");
    }

    set textEmphasisColor(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set textEmphasisColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'textEmphasisColor' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-emphasis-color", V);
    }

    get textEmphasisPosition() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get textEmphasisPosition' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-emphasis-position");
    }

    set textEmphasisPosition(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set textEmphasisPosition' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'textEmphasisPosition' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-emphasis-position", V);
    }

    get textEmphasisSkip() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get textEmphasisSkip' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-emphasis-skip");
    }

    set textEmphasisSkip(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set textEmphasisSkip' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'textEmphasisSkip' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-emphasis-skip", V);
    }

    get textEmphasisStyle() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get textEmphasisStyle' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-emphasis-style");
    }

    set textEmphasisStyle(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set textEmphasisStyle' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'textEmphasisStyle' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-emphasis-style", V);
    }

    get textGroupAlign() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get textGroupAlign' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-group-align");
    }

    set textGroupAlign(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set textGroupAlign' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'textGroupAlign' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-group-align", V);
    }

    get textIndent() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get textIndent' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-indent");
    }

    set textIndent(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set textIndent' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'textIndent' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-indent", V);
    }

    get textJustify() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get textJustify' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-justify");
    }

    set textJustify(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set textJustify' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'textJustify' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-justify", V);
    }

    get textOrientation() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get textOrientation' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-orientation");
    }

    set textOrientation(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set textOrientation' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'textOrientation' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-orientation", V);
    }

    get textOverflow() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get textOverflow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-overflow");
    }

    set textOverflow(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set textOverflow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'textOverflow' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-overflow", V);
    }

    get textRendering() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get textRendering' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-rendering");
    }

    set textRendering(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set textRendering' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'textRendering' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-rendering", V);
    }

    get textShadow() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get textShadow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-shadow");
    }

    set textShadow(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set textShadow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'textShadow' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-shadow", V);
    }

    get textSizeAdjust() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get textSizeAdjust' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-size-adjust");
    }

    set textSizeAdjust(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set textSizeAdjust' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'textSizeAdjust' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-size-adjust", V);
    }

    get textSpaceCollapse() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get textSpaceCollapse' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-space-collapse");
    }

    set textSpaceCollapse(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set textSpaceCollapse' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'textSpaceCollapse' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-space-collapse", V);
    }

    get textSpaceTrim() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get textSpaceTrim' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-space-trim");
    }

    set textSpaceTrim(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set textSpaceTrim' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'textSpaceTrim' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-space-trim", V);
    }

    get textSpacing() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get textSpacing' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-spacing");
    }

    set textSpacing(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set textSpacing' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'textSpacing' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-spacing", V);
    }

    get textTransform() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get textTransform' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-transform");
    }

    set textTransform(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set textTransform' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'textTransform' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-transform", V);
    }

    get textUnderlineOffset() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get textUnderlineOffset' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-underline-offset");
    }

    set textUnderlineOffset(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set textUnderlineOffset' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'textUnderlineOffset' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-underline-offset", V);
    }

    get textUnderlinePosition() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get textUnderlinePosition' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-underline-position");
    }

    set textUnderlinePosition(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set textUnderlinePosition' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'textUnderlinePosition' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-underline-position", V);
    }

    get textWrap() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get textWrap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-wrap");
    }

    set textWrap(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set textWrap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'textWrap' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-wrap", V);
    }

    get top() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get top' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("top");
    }

    set top(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set top' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'top' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("top", V);
    }

    get touchAction() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get touchAction' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("touch-action");
    }

    set touchAction(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set touchAction' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'touchAction' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("touch-action", V);
    }

    get transform() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get transform' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("transform");
    }

    set transform(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set transform' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'transform' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("transform", V);
    }

    get transformBox() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get transformBox' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("transform-box");
    }

    set transformBox(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set transformBox' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'transformBox' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("transform-box", V);
    }

    get transformOrigin() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get transformOrigin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("transform-origin");
    }

    set transformOrigin(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set transformOrigin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'transformOrigin' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("transform-origin", V);
    }

    get transformStyle() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get transformStyle' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("transform-style");
    }

    set transformStyle(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set transformStyle' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'transformStyle' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("transform-style", V);
    }

    get transition() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get transition' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("transition");
    }

    set transition(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set transition' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'transition' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("transition", V);
    }

    get transitionDelay() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get transitionDelay' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("transition-delay");
    }

    set transitionDelay(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set transitionDelay' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'transitionDelay' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("transition-delay", V);
    }

    get transitionDuration() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get transitionDuration' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("transition-duration");
    }

    set transitionDuration(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set transitionDuration' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'transitionDuration' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("transition-duration", V);
    }

    get transitionProperty() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get transitionProperty' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("transition-property");
    }

    set transitionProperty(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set transitionProperty' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'transitionProperty' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("transition-property", V);
    }

    get transitionTimingFunction() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get transitionTimingFunction' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("transition-timing-function");
    }

    set transitionTimingFunction(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set transitionTimingFunction' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'transitionTimingFunction' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("transition-timing-function", V);
    }

    get translate() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get translate' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("translate");
    }

    set translate(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set translate' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'translate' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("translate", V);
    }

    get unicodeBidi() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get unicodeBidi' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("unicode-bidi");
    }

    set unicodeBidi(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set unicodeBidi' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'unicodeBidi' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("unicode-bidi", V);
    }

    get userSelect() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get userSelect' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("user-select");
    }

    set userSelect(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set userSelect' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'userSelect' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("user-select", V);
    }

    get vectorEffect() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get vectorEffect' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("vector-effect");
    }

    set vectorEffect(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set vectorEffect' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'vectorEffect' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("vector-effect", V);
    }

    get verticalAlign() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get verticalAlign' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("vertical-align");
    }

    set verticalAlign(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set verticalAlign' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'verticalAlign' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("vertical-align", V);
    }

    get visibility() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get visibility' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("visibility");
    }

    set visibility(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set visibility' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'visibility' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("visibility", V);
    }

    get voiceBalance() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get voiceBalance' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("voice-balance");
    }

    set voiceBalance(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set voiceBalance' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'voiceBalance' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("voice-balance", V);
    }

    get voiceDuration() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get voiceDuration' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("voice-duration");
    }

    set voiceDuration(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set voiceDuration' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'voiceDuration' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("voice-duration", V);
    }

    get voiceFamily() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get voiceFamily' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("voice-family");
    }

    set voiceFamily(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set voiceFamily' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'voiceFamily' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("voice-family", V);
    }

    get voicePitch() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get voicePitch' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("voice-pitch");
    }

    set voicePitch(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set voicePitch' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'voicePitch' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("voice-pitch", V);
    }

    get voiceRange() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get voiceRange' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("voice-range");
    }

    set voiceRange(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set voiceRange' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'voiceRange' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("voice-range", V);
    }

    get voiceRate() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get voiceRate' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("voice-rate");
    }

    set voiceRate(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set voiceRate' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'voiceRate' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("voice-rate", V);
    }

    get voiceStress() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get voiceStress' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("voice-stress");
    }

    set voiceStress(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set voiceStress' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'voiceStress' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("voice-stress", V);
    }

    get voiceVolume() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get voiceVolume' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("voice-volume");
    }

    set voiceVolume(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set voiceVolume' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'voiceVolume' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("voice-volume", V);
    }

    get whiteSpace() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get whiteSpace' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("white-space");
    }

    set whiteSpace(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set whiteSpace' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'whiteSpace' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("white-space", V);
    }

    get widows() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get widows' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("widows");
    }

    set widows(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set widows' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'widows' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("widows", V);
    }

    get width() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get width' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("width");
    }

    set width(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set width' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'width' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("width", V);
    }

    get willChange() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get willChange' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("will-change");
    }

    set willChange(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set willChange' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'willChange' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("will-change", V);
    }

    get wordBoundaryDetection() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get wordBoundaryDetection' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("word-boundary-detection");
    }

    set wordBoundaryDetection(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set wordBoundaryDetection' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'wordBoundaryDetection' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("word-boundary-detection", V);
    }

    get wordBoundaryExpansion() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get wordBoundaryExpansion' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("word-boundary-expansion");
    }

    set wordBoundaryExpansion(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set wordBoundaryExpansion' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'wordBoundaryExpansion' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("word-boundary-expansion", V);
    }

    get wordBreak() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get wordBreak' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("word-break");
    }

    set wordBreak(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set wordBreak' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'wordBreak' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("word-break", V);
    }

    get wordSpacing() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get wordSpacing' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("word-spacing");
    }

    set wordSpacing(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set wordSpacing' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'wordSpacing' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("word-spacing", V);
    }

    get wordWrap() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get wordWrap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("word-wrap");
    }

    set wordWrap(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set wordWrap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'wordWrap' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("word-wrap", V);
    }

    get wrapAfter() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get wrapAfter' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("wrap-after");
    }

    set wrapAfter(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set wrapAfter' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'wrapAfter' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("wrap-after", V);
    }

    get wrapBefore() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get wrapBefore' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("wrap-before");
    }

    set wrapBefore(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set wrapBefore' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'wrapBefore' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("wrap-before", V);
    }

    get wrapFlow() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get wrapFlow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("wrap-flow");
    }

    set wrapFlow(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set wrapFlow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'wrapFlow' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("wrap-flow", V);
    }

    get wrapInside() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get wrapInside' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("wrap-inside");
    }

    set wrapInside(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set wrapInside' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'wrapInside' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("wrap-inside", V);
    }

    get wrapThrough() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get wrapThrough' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("wrap-through");
    }

    set wrapThrough(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set wrapThrough' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'wrapThrough' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("wrap-through", V);
    }

    get writingMode() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get writingMode' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("writing-mode");
    }

    set writingMode(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set writingMode' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'writingMode' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("writing-mode", V);
    }

    get x() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get x' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("x");
    }

    set x(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set x' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'x' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("x", V);
    }

    get y() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get y' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("y");
    }

    set y(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set y' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'y' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("y", V);
    }

    get zIndex() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get zIndex' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("z-index");
    }

    set zIndex(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set zIndex' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'zIndex' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("z-index", V);
    }

    get webkitAppearance() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitAppearance' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-appearance");
    }

    set webkitAppearance(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitAppearance' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitAppearance' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-appearance", V);
    }

    get webkitAlignContent() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitAlignContent' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-align-content");
    }

    set webkitAlignContent(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitAlignContent' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitAlignContent' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-align-content", V);
    }

    get webkitAlignItems() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitAlignItems' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-align-items");
    }

    set webkitAlignItems(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitAlignItems' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitAlignItems' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-align-items", V);
    }

    get webkitAlignSelf() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitAlignSelf' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-align-self");
    }

    set webkitAlignSelf(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitAlignSelf' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitAlignSelf' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-align-self", V);
    }

    get webkitAnimation() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitAnimation' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-animation");
    }

    set webkitAnimation(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitAnimation' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitAnimation' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-animation", V);
    }

    get webkitAnimationDelay() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitAnimationDelay' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-animation-delay");
    }

    set webkitAnimationDelay(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitAnimationDelay' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitAnimationDelay' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-animation-delay", V);
    }

    get webkitAnimationDirection() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitAnimationDirection' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-animation-direction");
    }

    set webkitAnimationDirection(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitAnimationDirection' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitAnimationDirection' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-animation-direction", V);
    }

    get webkitAnimationDuration() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitAnimationDuration' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-animation-duration");
    }

    set webkitAnimationDuration(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitAnimationDuration' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitAnimationDuration' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-animation-duration", V);
    }

    get webkitAnimationFillMode() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitAnimationFillMode' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-animation-fill-mode");
    }

    set webkitAnimationFillMode(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitAnimationFillMode' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitAnimationFillMode' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-animation-fill-mode", V);
    }

    get webkitAnimationIterationCount() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitAnimationIterationCount' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-animation-iteration-count");
    }

    set webkitAnimationIterationCount(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitAnimationIterationCount' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context:
          "Failed to set the 'webkitAnimationIterationCount' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-animation-iteration-count", V);
    }

    get webkitAnimationName() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitAnimationName' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-animation-name");
    }

    set webkitAnimationName(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitAnimationName' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitAnimationName' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-animation-name", V);
    }

    get webkitAnimationPlayState() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitAnimationPlayState' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-animation-play-state");
    }

    set webkitAnimationPlayState(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitAnimationPlayState' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitAnimationPlayState' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-animation-play-state", V);
    }

    get webkitAnimationTimingFunction() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitAnimationTimingFunction' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-animation-timing-function");
    }

    set webkitAnimationTimingFunction(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitAnimationTimingFunction' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context:
          "Failed to set the 'webkitAnimationTimingFunction' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-animation-timing-function", V);
    }

    get webkitBackfaceVisibility() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitBackfaceVisibility' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-backface-visibility");
    }

    set webkitBackfaceVisibility(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitBackfaceVisibility' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitBackfaceVisibility' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-backface-visibility", V);
    }

    get webkitBackgroundOrigin() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitBackgroundOrigin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-background-origin");
    }

    set webkitBackgroundOrigin(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitBackgroundOrigin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitBackgroundOrigin' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-background-origin", V);
    }

    get webkitBackgroundSize() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitBackgroundSize' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-background-size");
    }

    set webkitBackgroundSize(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitBackgroundSize' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitBackgroundSize' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-background-size", V);
    }

    get webkitBorderBottomLeftRadius() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitBorderBottomLeftRadius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-border-bottom-left-radius");
    }

    set webkitBorderBottomLeftRadius(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitBorderBottomLeftRadius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context:
          "Failed to set the 'webkitBorderBottomLeftRadius' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-border-bottom-left-radius", V);
    }

    get webkitBorderBottomRightRadius() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitBorderBottomRightRadius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-border-bottom-right-radius");
    }

    set webkitBorderBottomRightRadius(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitBorderBottomRightRadius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context:
          "Failed to set the 'webkitBorderBottomRightRadius' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-border-bottom-right-radius", V);
    }

    get webkitBorderRadius() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitBorderRadius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-border-radius");
    }

    set webkitBorderRadius(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitBorderRadius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitBorderRadius' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-border-radius", V);
    }

    get webkitBorderTopLeftRadius() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitBorderTopLeftRadius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-border-top-left-radius");
    }

    set webkitBorderTopLeftRadius(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitBorderTopLeftRadius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitBorderTopLeftRadius' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-border-top-left-radius", V);
    }

    get webkitBorderTopRightRadius() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitBorderTopRightRadius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-border-top-right-radius");
    }

    set webkitBorderTopRightRadius(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitBorderTopRightRadius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitBorderTopRightRadius' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-border-top-right-radius", V);
    }

    get webkitBoxShadow() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitBoxShadow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-box-shadow");
    }

    set webkitBoxShadow(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitBoxShadow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitBoxShadow' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-box-shadow", V);
    }

    get webkitBoxSizing() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitBoxSizing' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-box-sizing");
    }

    set webkitBoxSizing(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitBoxSizing' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitBoxSizing' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-box-sizing", V);
    }

    get webkitFilter() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitFilter' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-filter");
    }

    set webkitFilter(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitFilter' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitFilter' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-filter", V);
    }

    get webkitFlex() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitFlex' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-flex");
    }

    set webkitFlex(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitFlex' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitFlex' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-flex", V);
    }

    get webkitFlexBasis() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitFlexBasis' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-flex-basis");
    }

    set webkitFlexBasis(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitFlexBasis' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitFlexBasis' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-flex-basis", V);
    }

    get webkitFlexDirection() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitFlexDirection' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-flex-direction");
    }

    set webkitFlexDirection(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitFlexDirection' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitFlexDirection' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-flex-direction", V);
    }

    get webkitFlexFlow() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitFlexFlow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-flex-flow");
    }

    set webkitFlexFlow(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitFlexFlow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitFlexFlow' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-flex-flow", V);
    }

    get webkitFlexGrow() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitFlexGrow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-flex-grow");
    }

    set webkitFlexGrow(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitFlexGrow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitFlexGrow' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-flex-grow", V);
    }

    get webkitFlexShrink() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitFlexShrink' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-flex-shrink");
    }

    set webkitFlexShrink(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitFlexShrink' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitFlexShrink' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-flex-shrink", V);
    }

    get webkitFlexWrap() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitFlexWrap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-flex-wrap");
    }

    set webkitFlexWrap(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitFlexWrap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitFlexWrap' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-flex-wrap", V);
    }

    get webkitJustifyContent() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitJustifyContent' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-justify-content");
    }

    set webkitJustifyContent(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitJustifyContent' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitJustifyContent' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-justify-content", V);
    }

    get webkitLineClamp() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitLineClamp' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-line-clamp");
    }

    set webkitLineClamp(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitLineClamp' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitLineClamp' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-line-clamp", V);
    }

    get webkitMask() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitMask' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-mask");
    }

    set webkitMask(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitMask' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitMask' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-mask", V);
    }

    get webkitMaskClip() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitMaskClip' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-mask-clip");
    }

    set webkitMaskClip(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitMaskClip' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitMaskClip' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-mask-clip", V);
    }

    get webkitMaskComposite() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitMaskComposite' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-mask-composite");
    }

    set webkitMaskComposite(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitMaskComposite' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitMaskComposite' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-mask-composite", V);
    }

    get webkitMaskImage() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitMaskImage' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-mask-image");
    }

    set webkitMaskImage(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitMaskImage' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitMaskImage' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-mask-image", V);
    }

    get webkitMaskOrigin() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitMaskOrigin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-mask-origin");
    }

    set webkitMaskOrigin(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitMaskOrigin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitMaskOrigin' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-mask-origin", V);
    }

    get webkitMaskPosition() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitMaskPosition' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-mask-position");
    }

    set webkitMaskPosition(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitMaskPosition' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitMaskPosition' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-mask-position", V);
    }

    get webkitMaskRepeat() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitMaskRepeat' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-mask-repeat");
    }

    set webkitMaskRepeat(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitMaskRepeat' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitMaskRepeat' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-mask-repeat", V);
    }

    get webkitMaskSize() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitMaskSize' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-mask-size");
    }

    set webkitMaskSize(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitMaskSize' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitMaskSize' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-mask-size", V);
    }

    get webkitOrder() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitOrder' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-order");
    }

    set webkitOrder(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitOrder' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitOrder' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-order", V);
    }

    get webkitPerspective() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitPerspective' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-perspective");
    }

    set webkitPerspective(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitPerspective' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitPerspective' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-perspective", V);
    }

    get webkitPerspectiveOrigin() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitPerspectiveOrigin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-perspective-origin");
    }

    set webkitPerspectiveOrigin(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitPerspectiveOrigin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitPerspectiveOrigin' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-perspective-origin", V);
    }

    get webkitTransform() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitTransform' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-transform");
    }

    set webkitTransform(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitTransform' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitTransform' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-transform", V);
    }

    get webkitTransformOrigin() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitTransformOrigin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-transform-origin");
    }

    set webkitTransformOrigin(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitTransformOrigin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitTransformOrigin' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-transform-origin", V);
    }

    get webkitTransformStyle() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitTransformStyle' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-transform-style");
    }

    set webkitTransformStyle(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitTransformStyle' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitTransformStyle' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-transform-style", V);
    }

    get webkitTransition() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitTransition' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-transition");
    }

    set webkitTransition(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitTransition' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitTransition' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-transition", V);
    }

    get webkitTransitionDelay() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitTransitionDelay' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-transition-delay");
    }

    set webkitTransitionDelay(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitTransitionDelay' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitTransitionDelay' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-transition-delay", V);
    }

    get webkitTransitionDuration() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitTransitionDuration' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-transition-duration");
    }

    set webkitTransitionDuration(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitTransitionDuration' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitTransitionDuration' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-transition-duration", V);
    }

    get webkitTransitionProperty() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitTransitionProperty' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-transition-property");
    }

    set webkitTransitionProperty(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitTransitionProperty' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitTransitionProperty' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-transition-property", V);
    }

    get webkitTransitionTimingFunction() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitTransitionTimingFunction' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-transition-timing-function");
    }

    set webkitTransitionTimingFunction(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitTransitionTimingFunction' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context:
          "Failed to set the 'webkitTransitionTimingFunction' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-transition-timing-function", V);
    }

    get webkitUserSelect() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitUserSelect' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-user-select");
    }

    set webkitUserSelect(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitUserSelect' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitUserSelect' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-user-select", V);
    }

    get webkitTextSizeAdjust() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitTextSizeAdjust' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-text-size-adjust");
    }

    set webkitTextSizeAdjust(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitTextSizeAdjust' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitTextSizeAdjust' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-text-size-adjust", V);
    }

    get webkitBoxAlign() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitBoxAlign' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-box-align");
    }

    set webkitBoxAlign(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitBoxAlign' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitBoxAlign' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-box-align", V);
    }

    get webkitBoxFlex() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitBoxFlex' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-box-flex");
    }

    set webkitBoxFlex(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitBoxFlex' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitBoxFlex' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-box-flex", V);
    }

    get webkitBoxOrdinalGroup() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitBoxOrdinalGroup' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-box-ordinal-group");
    }

    set webkitBoxOrdinalGroup(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitBoxOrdinalGroup' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitBoxOrdinalGroup' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-box-ordinal-group", V);
    }

    get webkitBoxOrient() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitBoxOrient' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-box-orient");
    }

    set webkitBoxOrient(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitBoxOrient' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitBoxOrient' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-box-orient", V);
    }

    get webkitBoxPack() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitBoxPack' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-box-pack");
    }

    set webkitBoxPack(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitBoxPack' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitBoxPack' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-box-pack", V);
    }

    get webkitMaskBoxImage() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitMaskBoxImage' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-mask-box-image");
    }

    set webkitMaskBoxImage(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitMaskBoxImage' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitMaskBoxImage' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-mask-box-image", V);
    }

    get webkitMaskBoxImageOutset() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitMaskBoxImageOutset' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-mask-box-image-outset");
    }

    set webkitMaskBoxImageOutset(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitMaskBoxImageOutset' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitMaskBoxImageOutset' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-mask-box-image-outset", V);
    }

    get webkitMaskBoxImageRepeat() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitMaskBoxImageRepeat' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-mask-box-image-repeat");
    }

    set webkitMaskBoxImageRepeat(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitMaskBoxImageRepeat' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitMaskBoxImageRepeat' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-mask-box-image-repeat", V);
    }

    get webkitMaskBoxImageSlice() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitMaskBoxImageSlice' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-mask-box-image-slice");
    }

    set webkitMaskBoxImageSlice(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitMaskBoxImageSlice' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitMaskBoxImageSlice' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-mask-box-image-slice", V);
    }

    get webkitMaskBoxImageSource() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitMaskBoxImageSource' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-mask-box-image-source");
    }

    set webkitMaskBoxImageSource(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitMaskBoxImageSource' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitMaskBoxImageSource' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-mask-box-image-source", V);
    }

    get webkitMaskBoxImageWidth() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitMaskBoxImageWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-mask-box-image-width");
    }

    set webkitMaskBoxImageWidth(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitMaskBoxImageWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitMaskBoxImageWidth' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-mask-box-image-width", V);
    }

    get webkitBackgroundClip() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitBackgroundClip' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-background-clip");
    }

    set webkitBackgroundClip(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitBackgroundClip' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitBackgroundClip' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-background-clip", V);
    }

    get webkitTextFillColor() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitTextFillColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-text-fill-color");
    }

    set webkitTextFillColor(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitTextFillColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitTextFillColor' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-text-fill-color", V);
    }

    get webkitTextStroke() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitTextStroke' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-text-stroke");
    }

    set webkitTextStroke(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitTextStroke' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitTextStroke' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-text-stroke", V);
    }

    get webkitTextStrokeColor() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitTextStrokeColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-text-stroke-color");
    }

    set webkitTextStrokeColor(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitTextStrokeColor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitTextStrokeColor' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-text-stroke-color", V);
    }

    get webkitTextStrokeWidth() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get webkitTextStrokeWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-text-stroke-width");
    }

    set webkitTextStrokeWidth(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set webkitTextStrokeWidth' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'webkitTextStrokeWidth' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-text-stroke-width", V);
    }

    get "grid-column-gap"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get grid-column-gap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("grid-column-gap");
    }

    set "grid-column-gap"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set grid-column-gap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'grid-column-gap' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("grid-column-gap", V);
    }

    get "grid-gap"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get grid-gap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("grid-gap");
    }

    set "grid-gap"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set grid-gap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'grid-gap' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("grid-gap", V);
    }

    get "grid-row-gap"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get grid-row-gap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("grid-row-gap");
    }

    set "grid-row-gap"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set grid-row-gap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'grid-row-gap' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("grid-row-gap", V);
    }

    get "-webkit-appearance"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-appearance' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-appearance");
    }

    set "-webkit-appearance"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-appearance' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-appearance' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-appearance", V);
    }

    get "-webkit-align-content"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-align-content' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-align-content");
    }

    set "-webkit-align-content"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-align-content' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-align-content' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-align-content", V);
    }

    get "-webkit-align-items"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-align-items' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-align-items");
    }

    set "-webkit-align-items"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-align-items' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-align-items' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-align-items", V);
    }

    get "-webkit-align-self"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-align-self' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-align-self");
    }

    set "-webkit-align-self"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-align-self' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-align-self' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-align-self", V);
    }

    get "-webkit-animation"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-animation' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-animation");
    }

    set "-webkit-animation"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-animation' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-animation' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-animation", V);
    }

    get "-webkit-animation-delay"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-animation-delay' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-animation-delay");
    }

    set "-webkit-animation-delay"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-animation-delay' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-animation-delay' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-animation-delay", V);
    }

    get "-webkit-animation-direction"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-animation-direction' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-animation-direction");
    }

    set "-webkit-animation-direction"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-animation-direction' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context:
          "Failed to set the '-webkit-animation-direction' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-animation-direction", V);
    }

    get "-webkit-animation-duration"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-animation-duration' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-animation-duration");
    }

    set "-webkit-animation-duration"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-animation-duration' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-animation-duration' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-animation-duration", V);
    }

    get "-webkit-animation-fill-mode"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-animation-fill-mode' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-animation-fill-mode");
    }

    set "-webkit-animation-fill-mode"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-animation-fill-mode' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context:
          "Failed to set the '-webkit-animation-fill-mode' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-animation-fill-mode", V);
    }

    get "-webkit-animation-iteration-count"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-animation-iteration-count' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-animation-iteration-count");
    }

    set "-webkit-animation-iteration-count"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-animation-iteration-count' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context:
          "Failed to set the '-webkit-animation-iteration-count' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-animation-iteration-count", V);
    }

    get "-webkit-animation-name"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-animation-name' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-animation-name");
    }

    set "-webkit-animation-name"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-animation-name' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-animation-name' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-animation-name", V);
    }

    get "-webkit-animation-play-state"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-animation-play-state' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-animation-play-state");
    }

    set "-webkit-animation-play-state"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-animation-play-state' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context:
          "Failed to set the '-webkit-animation-play-state' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-animation-play-state", V);
    }

    get "-webkit-animation-timing-function"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-animation-timing-function' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-animation-timing-function");
    }

    set "-webkit-animation-timing-function"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-animation-timing-function' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context:
          "Failed to set the '-webkit-animation-timing-function' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-animation-timing-function", V);
    }

    get "-webkit-backface-visibility"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-backface-visibility' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-backface-visibility");
    }

    set "-webkit-backface-visibility"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-backface-visibility' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context:
          "Failed to set the '-webkit-backface-visibility' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-backface-visibility", V);
    }

    get "-webkit-background-origin"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-background-origin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-background-origin");
    }

    set "-webkit-background-origin"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-background-origin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-background-origin' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-background-origin", V);
    }

    get "-webkit-background-size"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-background-size' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-background-size");
    }

    set "-webkit-background-size"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-background-size' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-background-size' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-background-size", V);
    }

    get "-webkit-border-bottom-left-radius"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-border-bottom-left-radius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-border-bottom-left-radius");
    }

    set "-webkit-border-bottom-left-radius"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-border-bottom-left-radius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context:
          "Failed to set the '-webkit-border-bottom-left-radius' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-border-bottom-left-radius", V);
    }

    get "-webkit-border-bottom-right-radius"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-border-bottom-right-radius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-border-bottom-right-radius");
    }

    set "-webkit-border-bottom-right-radius"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-border-bottom-right-radius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context:
          "Failed to set the '-webkit-border-bottom-right-radius' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-border-bottom-right-radius", V);
    }

    get "-webkit-border-radius"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-border-radius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-border-radius");
    }

    set "-webkit-border-radius"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-border-radius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-border-radius' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-border-radius", V);
    }

    get "-webkit-border-top-left-radius"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-border-top-left-radius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-border-top-left-radius");
    }

    set "-webkit-border-top-left-radius"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-border-top-left-radius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context:
          "Failed to set the '-webkit-border-top-left-radius' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-border-top-left-radius", V);
    }

    get "-webkit-border-top-right-radius"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-border-top-right-radius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-border-top-right-radius");
    }

    set "-webkit-border-top-right-radius"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-border-top-right-radius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context:
          "Failed to set the '-webkit-border-top-right-radius' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-border-top-right-radius", V);
    }

    get "-webkit-box-shadow"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-box-shadow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-box-shadow");
    }

    set "-webkit-box-shadow"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-box-shadow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-box-shadow' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-box-shadow", V);
    }

    get "-webkit-box-sizing"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-box-sizing' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-box-sizing");
    }

    set "-webkit-box-sizing"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-box-sizing' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-box-sizing' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-box-sizing", V);
    }

    get "-webkit-filter"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-filter' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-filter");
    }

    set "-webkit-filter"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-filter' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-filter' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-filter", V);
    }

    get "-webkit-flex"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-flex' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-flex");
    }

    set "-webkit-flex"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-flex' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-flex' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-flex", V);
    }

    get "-webkit-flex-basis"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-flex-basis' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-flex-basis");
    }

    set "-webkit-flex-basis"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-flex-basis' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-flex-basis' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-flex-basis", V);
    }

    get "-webkit-flex-direction"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-flex-direction' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-flex-direction");
    }

    set "-webkit-flex-direction"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-flex-direction' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-flex-direction' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-flex-direction", V);
    }

    get "-webkit-flex-flow"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-flex-flow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-flex-flow");
    }

    set "-webkit-flex-flow"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-flex-flow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-flex-flow' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-flex-flow", V);
    }

    get "-webkit-flex-grow"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-flex-grow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-flex-grow");
    }

    set "-webkit-flex-grow"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-flex-grow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-flex-grow' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-flex-grow", V);
    }

    get "-webkit-flex-shrink"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-flex-shrink' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-flex-shrink");
    }

    set "-webkit-flex-shrink"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-flex-shrink' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-flex-shrink' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-flex-shrink", V);
    }

    get "-webkit-flex-wrap"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-flex-wrap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-flex-wrap");
    }

    set "-webkit-flex-wrap"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-flex-wrap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-flex-wrap' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-flex-wrap", V);
    }

    get "-webkit-justify-content"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-justify-content' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-justify-content");
    }

    set "-webkit-justify-content"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-justify-content' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-justify-content' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-justify-content", V);
    }

    get "-webkit-line-clamp"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-line-clamp' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-line-clamp");
    }

    set "-webkit-line-clamp"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-line-clamp' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-line-clamp' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-line-clamp", V);
    }

    get "-webkit-mask"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-mask' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-mask");
    }

    set "-webkit-mask"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-mask' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-mask' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-mask", V);
    }

    get "-webkit-mask-clip"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-mask-clip' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-mask-clip");
    }

    set "-webkit-mask-clip"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-mask-clip' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-mask-clip' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-mask-clip", V);
    }

    get "-webkit-mask-composite"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-mask-composite' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-mask-composite");
    }

    set "-webkit-mask-composite"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-mask-composite' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-mask-composite' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-mask-composite", V);
    }

    get "-webkit-mask-image"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-mask-image' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-mask-image");
    }

    set "-webkit-mask-image"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-mask-image' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-mask-image' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-mask-image", V);
    }

    get "-webkit-mask-origin"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-mask-origin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-mask-origin");
    }

    set "-webkit-mask-origin"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-mask-origin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-mask-origin' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-mask-origin", V);
    }

    get "-webkit-mask-position"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-mask-position' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-mask-position");
    }

    set "-webkit-mask-position"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-mask-position' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-mask-position' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-mask-position", V);
    }

    get "-webkit-mask-repeat"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-mask-repeat' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-mask-repeat");
    }

    set "-webkit-mask-repeat"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-mask-repeat' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-mask-repeat' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-mask-repeat", V);
    }

    get "-webkit-mask-size"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-mask-size' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-mask-size");
    }

    set "-webkit-mask-size"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-mask-size' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-mask-size' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-mask-size", V);
    }

    get "-webkit-order"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-order' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-order");
    }

    set "-webkit-order"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-order' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-order' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-order", V);
    }

    get "-webkit-perspective"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-perspective' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-perspective");
    }

    set "-webkit-perspective"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-perspective' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-perspective' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-perspective", V);
    }

    get "-webkit-perspective-origin"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-perspective-origin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-perspective-origin");
    }

    set "-webkit-perspective-origin"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-perspective-origin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-perspective-origin' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-perspective-origin", V);
    }

    get "-webkit-transform"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-transform' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-transform");
    }

    set "-webkit-transform"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-transform' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-transform' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-transform", V);
    }

    get "-webkit-transform-origin"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-transform-origin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-transform-origin");
    }

    set "-webkit-transform-origin"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-transform-origin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-transform-origin' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-transform-origin", V);
    }

    get "-webkit-transform-style"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-transform-style' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-transform-style");
    }

    set "-webkit-transform-style"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-transform-style' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-transform-style' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-transform-style", V);
    }

    get "-webkit-transition"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-transition' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-transition");
    }

    set "-webkit-transition"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-transition' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-transition' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-transition", V);
    }

    get "-webkit-transition-delay"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-transition-delay' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-transition-delay");
    }

    set "-webkit-transition-delay"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-transition-delay' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-transition-delay' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-transition-delay", V);
    }

    get "-webkit-transition-duration"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-transition-duration' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-transition-duration");
    }

    set "-webkit-transition-duration"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-transition-duration' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context:
          "Failed to set the '-webkit-transition-duration' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-transition-duration", V);
    }

    get "-webkit-transition-property"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-transition-property' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-transition-property");
    }

    set "-webkit-transition-property"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-transition-property' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context:
          "Failed to set the '-webkit-transition-property' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-transition-property", V);
    }

    get "-webkit-transition-timing-function"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-transition-timing-function' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-transition-timing-function");
    }

    set "-webkit-transition-timing-function"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-transition-timing-function' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context:
          "Failed to set the '-webkit-transition-timing-function' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-transition-timing-function", V);
    }

    get "-webkit-user-select"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-user-select' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-user-select");
    }

    set "-webkit-user-select"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-user-select' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-user-select' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-user-select", V);
    }

    get "-webkit-text-size-adjust"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-text-size-adjust' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-text-size-adjust");
    }

    set "-webkit-text-size-adjust"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-text-size-adjust' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-text-size-adjust' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-text-size-adjust", V);
    }

    get "-webkit-box-align"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-box-align' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-box-align");
    }

    set "-webkit-box-align"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-box-align' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-box-align' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-box-align", V);
    }

    get "-webkit-box-flex"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-box-flex' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-box-flex");
    }

    set "-webkit-box-flex"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-box-flex' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-box-flex' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-box-flex", V);
    }

    get "-webkit-box-ordinal-group"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-box-ordinal-group' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-box-ordinal-group");
    }

    set "-webkit-box-ordinal-group"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-box-ordinal-group' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-box-ordinal-group' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-box-ordinal-group", V);
    }

    get "-webkit-box-orient"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-box-orient' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-box-orient");
    }

    set "-webkit-box-orient"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-box-orient' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-box-orient' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-box-orient", V);
    }

    get "-webkit-box-pack"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-box-pack' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-box-pack");
    }

    set "-webkit-box-pack"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-box-pack' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-box-pack' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-box-pack", V);
    }

    get "-webkit-mask-box-image"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-mask-box-image' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-mask-box-image");
    }

    set "-webkit-mask-box-image"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-mask-box-image' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-mask-box-image' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-mask-box-image", V);
    }

    get "-webkit-mask-box-image-outset"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-mask-box-image-outset' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-mask-box-image-outset");
    }

    set "-webkit-mask-box-image-outset"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-mask-box-image-outset' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context:
          "Failed to set the '-webkit-mask-box-image-outset' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-mask-box-image-outset", V);
    }

    get "-webkit-mask-box-image-repeat"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-mask-box-image-repeat' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-mask-box-image-repeat");
    }

    set "-webkit-mask-box-image-repeat"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-mask-box-image-repeat' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context:
          "Failed to set the '-webkit-mask-box-image-repeat' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-mask-box-image-repeat", V);
    }

    get "-webkit-mask-box-image-slice"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-mask-box-image-slice' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-mask-box-image-slice");
    }

    set "-webkit-mask-box-image-slice"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-mask-box-image-slice' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context:
          "Failed to set the '-webkit-mask-box-image-slice' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-mask-box-image-slice", V);
    }

    get "-webkit-mask-box-image-source"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-mask-box-image-source' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-mask-box-image-source");
    }

    set "-webkit-mask-box-image-source"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-mask-box-image-source' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context:
          "Failed to set the '-webkit-mask-box-image-source' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-mask-box-image-source", V);
    }

    get "-webkit-mask-box-image-width"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-mask-box-image-width' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-mask-box-image-width");
    }

    set "-webkit-mask-box-image-width"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-mask-box-image-width' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context:
          "Failed to set the '-webkit-mask-box-image-width' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-mask-box-image-width", V);
    }

    get "-webkit-background-clip"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-background-clip' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-background-clip");
    }

    set "-webkit-background-clip"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-background-clip' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-background-clip' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-background-clip", V);
    }

    get "-webkit-text-fill-color"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-text-fill-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-text-fill-color");
    }

    set "-webkit-text-fill-color"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-text-fill-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-text-fill-color' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-text-fill-color", V);
    }

    get "-webkit-text-stroke"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-text-stroke' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-text-stroke");
    }

    set "-webkit-text-stroke"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-text-stroke' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-text-stroke' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-text-stroke", V);
    }

    get "-webkit-text-stroke-color"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-text-stroke-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-text-stroke-color");
    }

    set "-webkit-text-stroke-color"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-text-stroke-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-text-stroke-color' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-text-stroke-color", V);
    }

    get "-webkit-text-stroke-width"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get -webkit-text-stroke-width' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("-webkit-text-stroke-width");
    }

    set "-webkit-text-stroke-width"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set -webkit-text-stroke-width' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the '-webkit-text-stroke-width' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("-webkit-text-stroke-width", V);
    }

    get "accent-color"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get accent-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("accent-color");
    }

    set "accent-color"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set accent-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'accent-color' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("accent-color", V);
    }

    get "align-content"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get align-content' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("align-content");
    }

    set "align-content"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set align-content' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'align-content' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("align-content", V);
    }

    get "align-items"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get align-items' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("align-items");
    }

    set "align-items"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set align-items' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'align-items' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("align-items", V);
    }

    get "align-self"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get align-self' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("align-self");
    }

    set "align-self"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set align-self' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'align-self' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("align-self", V);
    }

    get "align-tracks"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get align-tracks' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("align-tracks");
    }

    set "align-tracks"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set align-tracks' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'align-tracks' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("align-tracks", V);
    }

    get "alignment-baseline"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get alignment-baseline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("alignment-baseline");
    }

    set "alignment-baseline"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set alignment-baseline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'alignment-baseline' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("alignment-baseline", V);
    }

    get "animation-composition"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get animation-composition' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("animation-composition");
    }

    set "animation-composition"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set animation-composition' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'animation-composition' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("animation-composition", V);
    }

    get "animation-delay"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get animation-delay' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("animation-delay");
    }

    set "animation-delay"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set animation-delay' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'animation-delay' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("animation-delay", V);
    }

    get "animation-direction"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get animation-direction' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("animation-direction");
    }

    set "animation-direction"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set animation-direction' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'animation-direction' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("animation-direction", V);
    }

    get "animation-duration"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get animation-duration' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("animation-duration");
    }

    set "animation-duration"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set animation-duration' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'animation-duration' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("animation-duration", V);
    }

    get "animation-fill-mode"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get animation-fill-mode' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("animation-fill-mode");
    }

    set "animation-fill-mode"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set animation-fill-mode' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'animation-fill-mode' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("animation-fill-mode", V);
    }

    get "animation-iteration-count"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get animation-iteration-count' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("animation-iteration-count");
    }

    set "animation-iteration-count"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set animation-iteration-count' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'animation-iteration-count' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("animation-iteration-count", V);
    }

    get "animation-name"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get animation-name' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("animation-name");
    }

    set "animation-name"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set animation-name' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'animation-name' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("animation-name", V);
    }

    get "animation-play-state"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get animation-play-state' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("animation-play-state");
    }

    set "animation-play-state"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set animation-play-state' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'animation-play-state' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("animation-play-state", V);
    }

    get "animation-timeline"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get animation-timeline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("animation-timeline");
    }

    set "animation-timeline"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set animation-timeline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'animation-timeline' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("animation-timeline", V);
    }

    get "animation-timing-function"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get animation-timing-function' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("animation-timing-function");
    }

    set "animation-timing-function"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set animation-timing-function' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'animation-timing-function' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("animation-timing-function", V);
    }

    get "aspect-ratio"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get aspect-ratio' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("aspect-ratio");
    }

    set "aspect-ratio"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set aspect-ratio' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'aspect-ratio' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("aspect-ratio", V);
    }

    get "backdrop-filter"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get backdrop-filter' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("backdrop-filter");
    }

    set "backdrop-filter"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set backdrop-filter' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'backdrop-filter' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("backdrop-filter", V);
    }

    get "backface-visibility"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get backface-visibility' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("backface-visibility");
    }

    set "backface-visibility"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set backface-visibility' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'backface-visibility' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("backface-visibility", V);
    }

    get "background-attachment"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get background-attachment' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("background-attachment");
    }

    set "background-attachment"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set background-attachment' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'background-attachment' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("background-attachment", V);
    }

    get "background-blend-mode"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get background-blend-mode' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("background-blend-mode");
    }

    set "background-blend-mode"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set background-blend-mode' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'background-blend-mode' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("background-blend-mode", V);
    }

    get "background-clip"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get background-clip' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("background-clip");
    }

    set "background-clip"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set background-clip' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'background-clip' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("background-clip", V);
    }

    get "background-color"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get background-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("background-color");
    }

    set "background-color"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set background-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'background-color' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("background-color", V);
    }

    get "background-image"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get background-image' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("background-image");
    }

    set "background-image"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set background-image' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'background-image' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("background-image", V);
    }

    get "background-origin"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get background-origin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("background-origin");
    }

    set "background-origin"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set background-origin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'background-origin' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("background-origin", V);
    }

    get "background-position"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get background-position' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("background-position");
    }

    set "background-position"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set background-position' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'background-position' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("background-position", V);
    }

    get "background-position-block"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get background-position-block' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("background-position-block");
    }

    set "background-position-block"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set background-position-block' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'background-position-block' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("background-position-block", V);
    }

    get "background-position-inline"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get background-position-inline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("background-position-inline");
    }

    set "background-position-inline"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set background-position-inline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'background-position-inline' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("background-position-inline", V);
    }

    get "background-position-x"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get background-position-x' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("background-position-x");
    }

    set "background-position-x"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set background-position-x' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'background-position-x' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("background-position-x", V);
    }

    get "background-position-y"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get background-position-y' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("background-position-y");
    }

    set "background-position-y"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set background-position-y' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'background-position-y' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("background-position-y", V);
    }

    get "background-repeat"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get background-repeat' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("background-repeat");
    }

    set "background-repeat"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set background-repeat' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'background-repeat' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("background-repeat", V);
    }

    get "background-size"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get background-size' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("background-size");
    }

    set "background-size"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set background-size' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'background-size' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("background-size", V);
    }

    get "baseline-shift"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get baseline-shift' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("baseline-shift");
    }

    set "baseline-shift"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set baseline-shift' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'baseline-shift' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("baseline-shift", V);
    }

    get "baseline-source"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get baseline-source' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("baseline-source");
    }

    set "baseline-source"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set baseline-source' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'baseline-source' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("baseline-source", V);
    }

    get "block-ellipsis"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get block-ellipsis' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("block-ellipsis");
    }

    set "block-ellipsis"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set block-ellipsis' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'block-ellipsis' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("block-ellipsis", V);
    }

    get "block-size"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get block-size' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("block-size");
    }

    set "block-size"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set block-size' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'block-size' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("block-size", V);
    }

    get "block-step"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get block-step' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("block-step");
    }

    set "block-step"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set block-step' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'block-step' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("block-step", V);
    }

    get "block-step-align"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get block-step-align' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("block-step-align");
    }

    set "block-step-align"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set block-step-align' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'block-step-align' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("block-step-align", V);
    }

    get "block-step-insert"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get block-step-insert' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("block-step-insert");
    }

    set "block-step-insert"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set block-step-insert' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'block-step-insert' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("block-step-insert", V);
    }

    get "block-step-round"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get block-step-round' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("block-step-round");
    }

    set "block-step-round"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set block-step-round' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'block-step-round' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("block-step-round", V);
    }

    get "block-step-size"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get block-step-size' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("block-step-size");
    }

    set "block-step-size"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set block-step-size' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'block-step-size' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("block-step-size", V);
    }

    get "bookmark-label"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get bookmark-label' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("bookmark-label");
    }

    set "bookmark-label"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set bookmark-label' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'bookmark-label' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("bookmark-label", V);
    }

    get "bookmark-level"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get bookmark-level' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("bookmark-level");
    }

    set "bookmark-level"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set bookmark-level' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'bookmark-level' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("bookmark-level", V);
    }

    get "bookmark-state"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get bookmark-state' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("bookmark-state");
    }

    set "bookmark-state"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set bookmark-state' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'bookmark-state' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("bookmark-state", V);
    }

    get "border-block"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-block' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-block");
    }

    set "border-block"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-block' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-block' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-block", V);
    }

    get "border-block-color"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-block-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-block-color");
    }

    set "border-block-color"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-block-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-block-color' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-block-color", V);
    }

    get "border-block-end"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-block-end' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-block-end");
    }

    set "border-block-end"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-block-end' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-block-end' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-block-end", V);
    }

    get "border-block-end-color"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-block-end-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-block-end-color");
    }

    set "border-block-end-color"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-block-end-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-block-end-color' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-block-end-color", V);
    }

    get "border-block-end-style"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-block-end-style' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-block-end-style");
    }

    set "border-block-end-style"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-block-end-style' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-block-end-style' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-block-end-style", V);
    }

    get "border-block-end-width"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-block-end-width' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-block-end-width");
    }

    set "border-block-end-width"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-block-end-width' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-block-end-width' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-block-end-width", V);
    }

    get "border-block-start"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-block-start' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-block-start");
    }

    set "border-block-start"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-block-start' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-block-start' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-block-start", V);
    }

    get "border-block-start-color"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-block-start-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-block-start-color");
    }

    set "border-block-start-color"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-block-start-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-block-start-color' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-block-start-color", V);
    }

    get "border-block-start-style"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-block-start-style' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-block-start-style");
    }

    set "border-block-start-style"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-block-start-style' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-block-start-style' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-block-start-style", V);
    }

    get "border-block-start-width"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-block-start-width' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-block-start-width");
    }

    set "border-block-start-width"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-block-start-width' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-block-start-width' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-block-start-width", V);
    }

    get "border-block-style"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-block-style' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-block-style");
    }

    set "border-block-style"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-block-style' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-block-style' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-block-style", V);
    }

    get "border-block-width"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-block-width' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-block-width");
    }

    set "border-block-width"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-block-width' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-block-width' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-block-width", V);
    }

    get "border-bottom"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-bottom' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-bottom");
    }

    set "border-bottom"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-bottom' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-bottom' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-bottom", V);
    }

    get "border-bottom-color"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-bottom-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-bottom-color");
    }

    set "border-bottom-color"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-bottom-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-bottom-color' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-bottom-color", V);
    }

    get "border-bottom-left-radius"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-bottom-left-radius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-bottom-left-radius");
    }

    set "border-bottom-left-radius"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-bottom-left-radius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-bottom-left-radius' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-bottom-left-radius", V);
    }

    get "border-bottom-right-radius"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-bottom-right-radius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-bottom-right-radius");
    }

    set "border-bottom-right-radius"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-bottom-right-radius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-bottom-right-radius' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-bottom-right-radius", V);
    }

    get "border-bottom-style"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-bottom-style' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-bottom-style");
    }

    set "border-bottom-style"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-bottom-style' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-bottom-style' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-bottom-style", V);
    }

    get "border-bottom-width"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-bottom-width' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-bottom-width");
    }

    set "border-bottom-width"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-bottom-width' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-bottom-width' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-bottom-width", V);
    }

    get "border-boundary"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-boundary' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-boundary");
    }

    set "border-boundary"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-boundary' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-boundary' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-boundary", V);
    }

    get "border-clip"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-clip' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-clip");
    }

    set "border-clip"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-clip' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-clip' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-clip", V);
    }

    get "border-clip-bottom"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-clip-bottom' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-clip-bottom");
    }

    set "border-clip-bottom"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-clip-bottom' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-clip-bottom' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-clip-bottom", V);
    }

    get "border-clip-left"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-clip-left' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-clip-left");
    }

    set "border-clip-left"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-clip-left' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-clip-left' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-clip-left", V);
    }

    get "border-clip-right"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-clip-right' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-clip-right");
    }

    set "border-clip-right"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-clip-right' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-clip-right' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-clip-right", V);
    }

    get "border-clip-top"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-clip-top' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-clip-top");
    }

    set "border-clip-top"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-clip-top' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-clip-top' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-clip-top", V);
    }

    get "border-collapse"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-collapse' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-collapse");
    }

    set "border-collapse"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-collapse' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-collapse' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-collapse", V);
    }

    get "border-color"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-color");
    }

    set "border-color"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-color' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-color", V);
    }

    get "border-end-end-radius"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-end-end-radius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-end-end-radius");
    }

    set "border-end-end-radius"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-end-end-radius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-end-end-radius' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-end-end-radius", V);
    }

    get "border-end-start-radius"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-end-start-radius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-end-start-radius");
    }

    set "border-end-start-radius"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-end-start-radius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-end-start-radius' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-end-start-radius", V);
    }

    get "border-image"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-image' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-image");
    }

    set "border-image"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-image' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-image' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-image", V);
    }

    get "border-image-outset"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-image-outset' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-image-outset");
    }

    set "border-image-outset"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-image-outset' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-image-outset' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-image-outset", V);
    }

    get "border-image-repeat"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-image-repeat' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-image-repeat");
    }

    set "border-image-repeat"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-image-repeat' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-image-repeat' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-image-repeat", V);
    }

    get "border-image-slice"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-image-slice' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-image-slice");
    }

    set "border-image-slice"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-image-slice' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-image-slice' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-image-slice", V);
    }

    get "border-image-source"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-image-source' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-image-source");
    }

    set "border-image-source"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-image-source' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-image-source' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-image-source", V);
    }

    get "border-image-width"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-image-width' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-image-width");
    }

    set "border-image-width"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-image-width' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-image-width' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-image-width", V);
    }

    get "border-inline"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-inline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-inline");
    }

    set "border-inline"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-inline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-inline' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-inline", V);
    }

    get "border-inline-color"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-inline-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-inline-color");
    }

    set "border-inline-color"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-inline-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-inline-color' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-inline-color", V);
    }

    get "border-inline-end"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-inline-end' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-inline-end");
    }

    set "border-inline-end"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-inline-end' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-inline-end' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-inline-end", V);
    }

    get "border-inline-end-color"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-inline-end-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-inline-end-color");
    }

    set "border-inline-end-color"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-inline-end-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-inline-end-color' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-inline-end-color", V);
    }

    get "border-inline-end-style"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-inline-end-style' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-inline-end-style");
    }

    set "border-inline-end-style"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-inline-end-style' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-inline-end-style' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-inline-end-style", V);
    }

    get "border-inline-end-width"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-inline-end-width' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-inline-end-width");
    }

    set "border-inline-end-width"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-inline-end-width' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-inline-end-width' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-inline-end-width", V);
    }

    get "border-inline-start"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-inline-start' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-inline-start");
    }

    set "border-inline-start"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-inline-start' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-inline-start' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-inline-start", V);
    }

    get "border-inline-start-color"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-inline-start-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-inline-start-color");
    }

    set "border-inline-start-color"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-inline-start-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-inline-start-color' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-inline-start-color", V);
    }

    get "border-inline-start-style"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-inline-start-style' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-inline-start-style");
    }

    set "border-inline-start-style"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-inline-start-style' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-inline-start-style' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-inline-start-style", V);
    }

    get "border-inline-start-width"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-inline-start-width' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-inline-start-width");
    }

    set "border-inline-start-width"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-inline-start-width' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-inline-start-width' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-inline-start-width", V);
    }

    get "border-inline-style"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-inline-style' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-inline-style");
    }

    set "border-inline-style"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-inline-style' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-inline-style' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-inline-style", V);
    }

    get "border-inline-width"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-inline-width' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-inline-width");
    }

    set "border-inline-width"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-inline-width' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-inline-width' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-inline-width", V);
    }

    get "border-left"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-left' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-left");
    }

    set "border-left"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-left' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-left' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-left", V);
    }

    get "border-left-color"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-left-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-left-color");
    }

    set "border-left-color"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-left-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-left-color' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-left-color", V);
    }

    get "border-left-style"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-left-style' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-left-style");
    }

    set "border-left-style"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-left-style' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-left-style' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-left-style", V);
    }

    get "border-left-width"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-left-width' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-left-width");
    }

    set "border-left-width"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-left-width' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-left-width' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-left-width", V);
    }

    get "border-limit"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-limit' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-limit");
    }

    set "border-limit"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-limit' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-limit' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-limit", V);
    }

    get "border-radius"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-radius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-radius");
    }

    set "border-radius"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-radius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-radius' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-radius", V);
    }

    get "border-right"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-right' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-right");
    }

    set "border-right"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-right' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-right' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-right", V);
    }

    get "border-right-color"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-right-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-right-color");
    }

    set "border-right-color"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-right-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-right-color' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-right-color", V);
    }

    get "border-right-style"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-right-style' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-right-style");
    }

    set "border-right-style"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-right-style' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-right-style' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-right-style", V);
    }

    get "border-right-width"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-right-width' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-right-width");
    }

    set "border-right-width"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-right-width' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-right-width' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-right-width", V);
    }

    get "border-spacing"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-spacing' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-spacing");
    }

    set "border-spacing"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-spacing' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-spacing' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-spacing", V);
    }

    get "border-start-end-radius"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-start-end-radius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-start-end-radius");
    }

    set "border-start-end-radius"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-start-end-radius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-start-end-radius' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-start-end-radius", V);
    }

    get "border-start-start-radius"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-start-start-radius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-start-start-radius");
    }

    set "border-start-start-radius"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-start-start-radius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-start-start-radius' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-start-start-radius", V);
    }

    get "border-style"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-style' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-style");
    }

    set "border-style"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-style' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-style' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-style", V);
    }

    get "border-top"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-top' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-top");
    }

    set "border-top"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-top' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-top' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-top", V);
    }

    get "border-top-color"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-top-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-top-color");
    }

    set "border-top-color"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-top-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-top-color' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-top-color", V);
    }

    get "border-top-left-radius"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-top-left-radius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-top-left-radius");
    }

    set "border-top-left-radius"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-top-left-radius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-top-left-radius' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-top-left-radius", V);
    }

    get "border-top-right-radius"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-top-right-radius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-top-right-radius");
    }

    set "border-top-right-radius"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-top-right-radius' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-top-right-radius' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-top-right-radius", V);
    }

    get "border-top-style"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-top-style' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-top-style");
    }

    set "border-top-style"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-top-style' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-top-style' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-top-style", V);
    }

    get "border-top-width"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-top-width' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-top-width");
    }

    set "border-top-width"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-top-width' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-top-width' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-top-width", V);
    }

    get "border-width"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get border-width' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("border-width");
    }

    set "border-width"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set border-width' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'border-width' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("border-width", V);
    }

    get "box-decoration-break"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get box-decoration-break' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("box-decoration-break");
    }

    set "box-decoration-break"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set box-decoration-break' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'box-decoration-break' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("box-decoration-break", V);
    }

    get "box-shadow"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get box-shadow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("box-shadow");
    }

    set "box-shadow"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set box-shadow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'box-shadow' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("box-shadow", V);
    }

    get "box-sizing"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get box-sizing' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("box-sizing");
    }

    set "box-sizing"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set box-sizing' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'box-sizing' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("box-sizing", V);
    }

    get "box-snap"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get box-snap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("box-snap");
    }

    set "box-snap"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set box-snap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'box-snap' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("box-snap", V);
    }

    get "break-after"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get break-after' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("break-after");
    }

    set "break-after"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set break-after' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'break-after' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("break-after", V);
    }

    get "break-before"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get break-before' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("break-before");
    }

    set "break-before"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set break-before' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'break-before' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("break-before", V);
    }

    get "break-inside"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get break-inside' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("break-inside");
    }

    set "break-inside"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set break-inside' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'break-inside' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("break-inside", V);
    }

    get "caption-side"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get caption-side' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("caption-side");
    }

    set "caption-side"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set caption-side' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'caption-side' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("caption-side", V);
    }

    get "caret-color"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get caret-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("caret-color");
    }

    set "caret-color"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set caret-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'caret-color' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("caret-color", V);
    }

    get "caret-shape"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get caret-shape' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("caret-shape");
    }

    set "caret-shape"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set caret-shape' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'caret-shape' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("caret-shape", V);
    }

    get "clip-path"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get clip-path' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("clip-path");
    }

    set "clip-path"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set clip-path' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'clip-path' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("clip-path", V);
    }

    get "clip-rule"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get clip-rule' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("clip-rule");
    }

    set "clip-rule"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set clip-rule' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'clip-rule' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("clip-rule", V);
    }

    get "color-adjust"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get color-adjust' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("color-adjust");
    }

    set "color-adjust"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set color-adjust' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'color-adjust' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("color-adjust", V);
    }

    get "color-interpolation"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get color-interpolation' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("color-interpolation");
    }

    set "color-interpolation"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set color-interpolation' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'color-interpolation' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("color-interpolation", V);
    }

    get "color-interpolation-filters"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get color-interpolation-filters' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("color-interpolation-filters");
    }

    set "color-interpolation-filters"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set color-interpolation-filters' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context:
          "Failed to set the 'color-interpolation-filters' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("color-interpolation-filters", V);
    }

    get "color-scheme"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get color-scheme' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("color-scheme");
    }

    set "color-scheme"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set color-scheme' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'color-scheme' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("color-scheme", V);
    }

    get "column-count"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get column-count' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("column-count");
    }

    set "column-count"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set column-count' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'column-count' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("column-count", V);
    }

    get "column-fill"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get column-fill' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("column-fill");
    }

    set "column-fill"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set column-fill' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'column-fill' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("column-fill", V);
    }

    get "column-gap"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get column-gap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("column-gap");
    }

    set "column-gap"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set column-gap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'column-gap' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("column-gap", V);
    }

    get "column-rule"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get column-rule' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("column-rule");
    }

    set "column-rule"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set column-rule' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'column-rule' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("column-rule", V);
    }

    get "column-rule-color"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get column-rule-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("column-rule-color");
    }

    set "column-rule-color"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set column-rule-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'column-rule-color' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("column-rule-color", V);
    }

    get "column-rule-style"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get column-rule-style' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("column-rule-style");
    }

    set "column-rule-style"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set column-rule-style' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'column-rule-style' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("column-rule-style", V);
    }

    get "column-rule-width"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get column-rule-width' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("column-rule-width");
    }

    set "column-rule-width"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set column-rule-width' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'column-rule-width' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("column-rule-width", V);
    }

    get "column-span"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get column-span' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("column-span");
    }

    set "column-span"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set column-span' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'column-span' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("column-span", V);
    }

    get "column-width"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get column-width' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("column-width");
    }

    set "column-width"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set column-width' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'column-width' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("column-width", V);
    }

    get "contain-intrinsic-block-size"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get contain-intrinsic-block-size' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("contain-intrinsic-block-size");
    }

    set "contain-intrinsic-block-size"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set contain-intrinsic-block-size' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context:
          "Failed to set the 'contain-intrinsic-block-size' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("contain-intrinsic-block-size", V);
    }

    get "contain-intrinsic-height"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get contain-intrinsic-height' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("contain-intrinsic-height");
    }

    set "contain-intrinsic-height"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set contain-intrinsic-height' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'contain-intrinsic-height' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("contain-intrinsic-height", V);
    }

    get "contain-intrinsic-inline-size"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get contain-intrinsic-inline-size' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("contain-intrinsic-inline-size");
    }

    set "contain-intrinsic-inline-size"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set contain-intrinsic-inline-size' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context:
          "Failed to set the 'contain-intrinsic-inline-size' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("contain-intrinsic-inline-size", V);
    }

    get "contain-intrinsic-size"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get contain-intrinsic-size' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("contain-intrinsic-size");
    }

    set "contain-intrinsic-size"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set contain-intrinsic-size' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'contain-intrinsic-size' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("contain-intrinsic-size", V);
    }

    get "contain-intrinsic-width"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get contain-intrinsic-width' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("contain-intrinsic-width");
    }

    set "contain-intrinsic-width"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set contain-intrinsic-width' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'contain-intrinsic-width' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("contain-intrinsic-width", V);
    }

    get "content-visibility"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get content-visibility' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("content-visibility");
    }

    set "content-visibility"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set content-visibility' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'content-visibility' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("content-visibility", V);
    }

    get "copy-into"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get copy-into' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("copy-into");
    }

    set "copy-into"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set copy-into' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'copy-into' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("copy-into", V);
    }

    get "corner-shape"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get corner-shape' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("corner-shape");
    }

    set "corner-shape"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set corner-shape' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'corner-shape' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("corner-shape", V);
    }

    get "counter-increment"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get counter-increment' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("counter-increment");
    }

    set "counter-increment"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set counter-increment' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'counter-increment' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("counter-increment", V);
    }

    get "counter-reset"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get counter-reset' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("counter-reset");
    }

    set "counter-reset"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set counter-reset' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'counter-reset' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("counter-reset", V);
    }

    get "counter-set"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get counter-set' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("counter-set");
    }

    set "counter-set"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set counter-set' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'counter-set' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("counter-set", V);
    }

    get "cue-after"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get cue-after' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("cue-after");
    }

    set "cue-after"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set cue-after' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'cue-after' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("cue-after", V);
    }

    get "cue-before"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get cue-before' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("cue-before");
    }

    set "cue-before"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set cue-before' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'cue-before' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("cue-before", V);
    }

    get "dominant-baseline"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get dominant-baseline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("dominant-baseline");
    }

    set "dominant-baseline"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set dominant-baseline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'dominant-baseline' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("dominant-baseline", V);
    }

    get "empty-cells"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get empty-cells' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("empty-cells");
    }

    set "empty-cells"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set empty-cells' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'empty-cells' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("empty-cells", V);
    }

    get "fill-break"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get fill-break' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("fill-break");
    }

    set "fill-break"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set fill-break' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'fill-break' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("fill-break", V);
    }

    get "fill-color"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get fill-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("fill-color");
    }

    set "fill-color"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set fill-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'fill-color' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("fill-color", V);
    }

    get "fill-image"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get fill-image' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("fill-image");
    }

    set "fill-image"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set fill-image' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'fill-image' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("fill-image", V);
    }

    get "fill-opacity"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get fill-opacity' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("fill-opacity");
    }

    set "fill-opacity"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set fill-opacity' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'fill-opacity' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("fill-opacity", V);
    }

    get "fill-origin"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get fill-origin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("fill-origin");
    }

    set "fill-origin"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set fill-origin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'fill-origin' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("fill-origin", V);
    }

    get "fill-position"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get fill-position' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("fill-position");
    }

    set "fill-position"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set fill-position' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'fill-position' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("fill-position", V);
    }

    get "fill-repeat"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get fill-repeat' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("fill-repeat");
    }

    set "fill-repeat"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set fill-repeat' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'fill-repeat' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("fill-repeat", V);
    }

    get "fill-rule"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get fill-rule' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("fill-rule");
    }

    set "fill-rule"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set fill-rule' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'fill-rule' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("fill-rule", V);
    }

    get "fill-size"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get fill-size' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("fill-size");
    }

    set "fill-size"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set fill-size' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'fill-size' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("fill-size", V);
    }

    get "flex-basis"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get flex-basis' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("flex-basis");
    }

    set "flex-basis"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set flex-basis' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'flex-basis' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("flex-basis", V);
    }

    get "flex-direction"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get flex-direction' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("flex-direction");
    }

    set "flex-direction"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set flex-direction' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'flex-direction' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("flex-direction", V);
    }

    get "flex-flow"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get flex-flow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("flex-flow");
    }

    set "flex-flow"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set flex-flow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'flex-flow' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("flex-flow", V);
    }

    get "flex-grow"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get flex-grow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("flex-grow");
    }

    set "flex-grow"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set flex-grow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'flex-grow' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("flex-grow", V);
    }

    get "flex-shrink"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get flex-shrink' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("flex-shrink");
    }

    set "flex-shrink"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set flex-shrink' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'flex-shrink' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("flex-shrink", V);
    }

    get "flex-wrap"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get flex-wrap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("flex-wrap");
    }

    set "flex-wrap"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set flex-wrap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'flex-wrap' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("flex-wrap", V);
    }

    get "float-defer"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get float-defer' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("float-defer");
    }

    set "float-defer"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set float-defer' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'float-defer' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("float-defer", V);
    }

    get "float-offset"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get float-offset' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("float-offset");
    }

    set "float-offset"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set float-offset' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'float-offset' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("float-offset", V);
    }

    get "float-reference"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get float-reference' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("float-reference");
    }

    set "float-reference"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set float-reference' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'float-reference' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("float-reference", V);
    }

    get "flood-color"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get flood-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("flood-color");
    }

    set "flood-color"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set flood-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'flood-color' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("flood-color", V);
    }

    get "flood-opacity"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get flood-opacity' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("flood-opacity");
    }

    set "flood-opacity"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set flood-opacity' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'flood-opacity' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("flood-opacity", V);
    }

    get "flow-from"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get flow-from' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("flow-from");
    }

    set "flow-from"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set flow-from' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'flow-from' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("flow-from", V);
    }

    get "flow-into"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get flow-into' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("flow-into");
    }

    set "flow-into"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set flow-into' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'flow-into' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("flow-into", V);
    }

    get "font-family"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get font-family' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("font-family");
    }

    set "font-family"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set font-family' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'font-family' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("font-family", V);
    }

    get "font-feature-settings"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get font-feature-settings' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("font-feature-settings");
    }

    set "font-feature-settings"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set font-feature-settings' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'font-feature-settings' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("font-feature-settings", V);
    }

    get "font-kerning"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get font-kerning' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("font-kerning");
    }

    set "font-kerning"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set font-kerning' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'font-kerning' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("font-kerning", V);
    }

    get "font-language-override"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get font-language-override' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("font-language-override");
    }

    set "font-language-override"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set font-language-override' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'font-language-override' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("font-language-override", V);
    }

    get "font-optical-sizing"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get font-optical-sizing' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("font-optical-sizing");
    }

    set "font-optical-sizing"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set font-optical-sizing' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'font-optical-sizing' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("font-optical-sizing", V);
    }

    get "font-palette"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get font-palette' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("font-palette");
    }

    set "font-palette"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set font-palette' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'font-palette' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("font-palette", V);
    }

    get "font-size"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get font-size' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("font-size");
    }

    set "font-size"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set font-size' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'font-size' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("font-size", V);
    }

    get "font-size-adjust"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get font-size-adjust' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("font-size-adjust");
    }

    set "font-size-adjust"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set font-size-adjust' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'font-size-adjust' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("font-size-adjust", V);
    }

    get "font-stretch"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get font-stretch' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("font-stretch");
    }

    set "font-stretch"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set font-stretch' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'font-stretch' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("font-stretch", V);
    }

    get "font-style"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get font-style' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("font-style");
    }

    set "font-style"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set font-style' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'font-style' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("font-style", V);
    }

    get "font-synthesis"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get font-synthesis' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("font-synthesis");
    }

    set "font-synthesis"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set font-synthesis' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'font-synthesis' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("font-synthesis", V);
    }

    get "font-synthesis-small-caps"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get font-synthesis-small-caps' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("font-synthesis-small-caps");
    }

    set "font-synthesis-small-caps"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set font-synthesis-small-caps' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'font-synthesis-small-caps' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("font-synthesis-small-caps", V);
    }

    get "font-synthesis-style"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get font-synthesis-style' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("font-synthesis-style");
    }

    set "font-synthesis-style"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set font-synthesis-style' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'font-synthesis-style' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("font-synthesis-style", V);
    }

    get "font-synthesis-weight"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get font-synthesis-weight' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("font-synthesis-weight");
    }

    set "font-synthesis-weight"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set font-synthesis-weight' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'font-synthesis-weight' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("font-synthesis-weight", V);
    }

    get "font-variant"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get font-variant' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("font-variant");
    }

    set "font-variant"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set font-variant' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'font-variant' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("font-variant", V);
    }

    get "font-variant-alternates"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get font-variant-alternates' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("font-variant-alternates");
    }

    set "font-variant-alternates"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set font-variant-alternates' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'font-variant-alternates' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("font-variant-alternates", V);
    }

    get "font-variant-caps"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get font-variant-caps' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("font-variant-caps");
    }

    set "font-variant-caps"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set font-variant-caps' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'font-variant-caps' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("font-variant-caps", V);
    }

    get "font-variant-east-asian"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get font-variant-east-asian' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("font-variant-east-asian");
    }

    set "font-variant-east-asian"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set font-variant-east-asian' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'font-variant-east-asian' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("font-variant-east-asian", V);
    }

    get "font-variant-emoji"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get font-variant-emoji' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("font-variant-emoji");
    }

    set "font-variant-emoji"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set font-variant-emoji' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'font-variant-emoji' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("font-variant-emoji", V);
    }

    get "font-variant-ligatures"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get font-variant-ligatures' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("font-variant-ligatures");
    }

    set "font-variant-ligatures"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set font-variant-ligatures' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'font-variant-ligatures' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("font-variant-ligatures", V);
    }

    get "font-variant-numeric"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get font-variant-numeric' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("font-variant-numeric");
    }

    set "font-variant-numeric"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set font-variant-numeric' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'font-variant-numeric' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("font-variant-numeric", V);
    }

    get "font-variant-position"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get font-variant-position' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("font-variant-position");
    }

    set "font-variant-position"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set font-variant-position' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'font-variant-position' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("font-variant-position", V);
    }

    get "font-variation-settings"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get font-variation-settings' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("font-variation-settings");
    }

    set "font-variation-settings"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set font-variation-settings' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'font-variation-settings' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("font-variation-settings", V);
    }

    get "font-weight"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get font-weight' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("font-weight");
    }

    set "font-weight"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set font-weight' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'font-weight' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("font-weight", V);
    }

    get "footnote-display"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get footnote-display' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("footnote-display");
    }

    set "footnote-display"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set footnote-display' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'footnote-display' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("footnote-display", V);
    }

    get "footnote-policy"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get footnote-policy' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("footnote-policy");
    }

    set "footnote-policy"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set footnote-policy' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'footnote-policy' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("footnote-policy", V);
    }

    get "forced-color-adjust"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get forced-color-adjust' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("forced-color-adjust");
    }

    set "forced-color-adjust"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set forced-color-adjust' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'forced-color-adjust' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("forced-color-adjust", V);
    }

    get "glyph-orientation-vertical"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get glyph-orientation-vertical' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("glyph-orientation-vertical");
    }

    set "glyph-orientation-vertical"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set glyph-orientation-vertical' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'glyph-orientation-vertical' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("glyph-orientation-vertical", V);
    }

    get "grid-area"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get grid-area' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("grid-area");
    }

    set "grid-area"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set grid-area' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'grid-area' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("grid-area", V);
    }

    get "grid-auto-columns"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get grid-auto-columns' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("grid-auto-columns");
    }

    set "grid-auto-columns"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set grid-auto-columns' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'grid-auto-columns' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("grid-auto-columns", V);
    }

    get "grid-auto-flow"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get grid-auto-flow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("grid-auto-flow");
    }

    set "grid-auto-flow"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set grid-auto-flow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'grid-auto-flow' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("grid-auto-flow", V);
    }

    get "grid-auto-rows"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get grid-auto-rows' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("grid-auto-rows");
    }

    set "grid-auto-rows"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set grid-auto-rows' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'grid-auto-rows' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("grid-auto-rows", V);
    }

    get "grid-column"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get grid-column' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("grid-column");
    }

    set "grid-column"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set grid-column' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'grid-column' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("grid-column", V);
    }

    get "grid-column-end"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get grid-column-end' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("grid-column-end");
    }

    set "grid-column-end"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set grid-column-end' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'grid-column-end' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("grid-column-end", V);
    }

    get "grid-column-start"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get grid-column-start' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("grid-column-start");
    }

    set "grid-column-start"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set grid-column-start' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'grid-column-start' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("grid-column-start", V);
    }

    get "grid-row"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get grid-row' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("grid-row");
    }

    set "grid-row"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set grid-row' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'grid-row' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("grid-row", V);
    }

    get "grid-row-end"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get grid-row-end' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("grid-row-end");
    }

    set "grid-row-end"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set grid-row-end' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'grid-row-end' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("grid-row-end", V);
    }

    get "grid-row-start"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get grid-row-start' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("grid-row-start");
    }

    set "grid-row-start"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set grid-row-start' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'grid-row-start' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("grid-row-start", V);
    }

    get "grid-template"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get grid-template' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("grid-template");
    }

    set "grid-template"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set grid-template' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'grid-template' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("grid-template", V);
    }

    get "grid-template-areas"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get grid-template-areas' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("grid-template-areas");
    }

    set "grid-template-areas"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set grid-template-areas' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'grid-template-areas' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("grid-template-areas", V);
    }

    get "grid-template-columns"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get grid-template-columns' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("grid-template-columns");
    }

    set "grid-template-columns"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set grid-template-columns' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'grid-template-columns' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("grid-template-columns", V);
    }

    get "grid-template-rows"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get grid-template-rows' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("grid-template-rows");
    }

    set "grid-template-rows"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set grid-template-rows' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'grid-template-rows' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("grid-template-rows", V);
    }

    get "hanging-punctuation"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get hanging-punctuation' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("hanging-punctuation");
    }

    set "hanging-punctuation"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set hanging-punctuation' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'hanging-punctuation' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("hanging-punctuation", V);
    }

    get "hyphenate-character"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get hyphenate-character' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("hyphenate-character");
    }

    set "hyphenate-character"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set hyphenate-character' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'hyphenate-character' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("hyphenate-character", V);
    }

    get "hyphenate-limit-chars"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get hyphenate-limit-chars' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("hyphenate-limit-chars");
    }

    set "hyphenate-limit-chars"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set hyphenate-limit-chars' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'hyphenate-limit-chars' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("hyphenate-limit-chars", V);
    }

    get "hyphenate-limit-last"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get hyphenate-limit-last' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("hyphenate-limit-last");
    }

    set "hyphenate-limit-last"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set hyphenate-limit-last' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'hyphenate-limit-last' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("hyphenate-limit-last", V);
    }

    get "hyphenate-limit-lines"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get hyphenate-limit-lines' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("hyphenate-limit-lines");
    }

    set "hyphenate-limit-lines"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set hyphenate-limit-lines' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'hyphenate-limit-lines' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("hyphenate-limit-lines", V);
    }

    get "hyphenate-limit-zone"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get hyphenate-limit-zone' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("hyphenate-limit-zone");
    }

    set "hyphenate-limit-zone"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set hyphenate-limit-zone' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'hyphenate-limit-zone' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("hyphenate-limit-zone", V);
    }

    get "image-orientation"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get image-orientation' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("image-orientation");
    }

    set "image-orientation"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set image-orientation' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'image-orientation' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("image-orientation", V);
    }

    get "image-rendering"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get image-rendering' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("image-rendering");
    }

    set "image-rendering"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set image-rendering' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'image-rendering' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("image-rendering", V);
    }

    get "image-resolution"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get image-resolution' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("image-resolution");
    }

    set "image-resolution"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set image-resolution' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'image-resolution' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("image-resolution", V);
    }

    get "initial-letter"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get initial-letter' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("initial-letter");
    }

    set "initial-letter"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set initial-letter' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'initial-letter' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("initial-letter", V);
    }

    get "initial-letter-align"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get initial-letter-align' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("initial-letter-align");
    }

    set "initial-letter-align"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set initial-letter-align' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'initial-letter-align' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("initial-letter-align", V);
    }

    get "initial-letter-wrap"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get initial-letter-wrap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("initial-letter-wrap");
    }

    set "initial-letter-wrap"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set initial-letter-wrap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'initial-letter-wrap' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("initial-letter-wrap", V);
    }

    get "inline-size"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get inline-size' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("inline-size");
    }

    set "inline-size"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set inline-size' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'inline-size' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("inline-size", V);
    }

    get "inline-sizing"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get inline-sizing' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("inline-sizing");
    }

    set "inline-sizing"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set inline-sizing' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'inline-sizing' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("inline-sizing", V);
    }

    get "input-security"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get input-security' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("input-security");
    }

    set "input-security"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set input-security' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'input-security' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("input-security", V);
    }

    get "inset-block"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get inset-block' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("inset-block");
    }

    set "inset-block"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set inset-block' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'inset-block' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("inset-block", V);
    }

    get "inset-block-end"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get inset-block-end' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("inset-block-end");
    }

    set "inset-block-end"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set inset-block-end' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'inset-block-end' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("inset-block-end", V);
    }

    get "inset-block-start"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get inset-block-start' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("inset-block-start");
    }

    set "inset-block-start"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set inset-block-start' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'inset-block-start' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("inset-block-start", V);
    }

    get "inset-inline"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get inset-inline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("inset-inline");
    }

    set "inset-inline"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set inset-inline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'inset-inline' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("inset-inline", V);
    }

    get "inset-inline-end"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get inset-inline-end' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("inset-inline-end");
    }

    set "inset-inline-end"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set inset-inline-end' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'inset-inline-end' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("inset-inline-end", V);
    }

    get "inset-inline-start"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get inset-inline-start' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("inset-inline-start");
    }

    set "inset-inline-start"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set inset-inline-start' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'inset-inline-start' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("inset-inline-start", V);
    }

    get "justify-content"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get justify-content' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("justify-content");
    }

    set "justify-content"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set justify-content' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'justify-content' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("justify-content", V);
    }

    get "justify-items"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get justify-items' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("justify-items");
    }

    set "justify-items"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set justify-items' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'justify-items' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("justify-items", V);
    }

    get "justify-self"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get justify-self' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("justify-self");
    }

    set "justify-self"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set justify-self' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'justify-self' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("justify-self", V);
    }

    get "justify-tracks"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get justify-tracks' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("justify-tracks");
    }

    set "justify-tracks"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set justify-tracks' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'justify-tracks' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("justify-tracks", V);
    }

    get "leading-trim"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get leading-trim' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("leading-trim");
    }

    set "leading-trim"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set leading-trim' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'leading-trim' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("leading-trim", V);
    }

    get "letter-spacing"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get letter-spacing' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("letter-spacing");
    }

    set "letter-spacing"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set letter-spacing' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'letter-spacing' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("letter-spacing", V);
    }

    get "lighting-color"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get lighting-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("lighting-color");
    }

    set "lighting-color"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set lighting-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'lighting-color' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("lighting-color", V);
    }

    get "line-break"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get line-break' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("line-break");
    }

    set "line-break"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set line-break' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'line-break' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("line-break", V);
    }

    get "line-clamp"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get line-clamp' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("line-clamp");
    }

    set "line-clamp"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set line-clamp' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'line-clamp' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("line-clamp", V);
    }

    get "line-grid"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get line-grid' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("line-grid");
    }

    set "line-grid"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set line-grid' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'line-grid' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("line-grid", V);
    }

    get "line-height"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get line-height' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("line-height");
    }

    set "line-height"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set line-height' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'line-height' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("line-height", V);
    }

    get "line-height-step"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get line-height-step' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("line-height-step");
    }

    set "line-height-step"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set line-height-step' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'line-height-step' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("line-height-step", V);
    }

    get "line-padding"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get line-padding' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("line-padding");
    }

    set "line-padding"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set line-padding' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'line-padding' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("line-padding", V);
    }

    get "line-snap"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get line-snap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("line-snap");
    }

    set "line-snap"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set line-snap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'line-snap' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("line-snap", V);
    }

    get "list-style"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get list-style' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("list-style");
    }

    set "list-style"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set list-style' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'list-style' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("list-style", V);
    }

    get "list-style-image"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get list-style-image' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("list-style-image");
    }

    set "list-style-image"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set list-style-image' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'list-style-image' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("list-style-image", V);
    }

    get "list-style-position"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get list-style-position' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("list-style-position");
    }

    set "list-style-position"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set list-style-position' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'list-style-position' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("list-style-position", V);
    }

    get "list-style-type"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get list-style-type' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("list-style-type");
    }

    set "list-style-type"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set list-style-type' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'list-style-type' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("list-style-type", V);
    }

    get "margin-block"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get margin-block' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("margin-block");
    }

    set "margin-block"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set margin-block' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'margin-block' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("margin-block", V);
    }

    get "margin-block-end"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get margin-block-end' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("margin-block-end");
    }

    set "margin-block-end"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set margin-block-end' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'margin-block-end' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("margin-block-end", V);
    }

    get "margin-block-start"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get margin-block-start' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("margin-block-start");
    }

    set "margin-block-start"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set margin-block-start' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'margin-block-start' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("margin-block-start", V);
    }

    get "margin-bottom"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get margin-bottom' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("margin-bottom");
    }

    set "margin-bottom"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set margin-bottom' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'margin-bottom' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("margin-bottom", V);
    }

    get "margin-break"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get margin-break' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("margin-break");
    }

    set "margin-break"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set margin-break' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'margin-break' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("margin-break", V);
    }

    get "margin-inline"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get margin-inline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("margin-inline");
    }

    set "margin-inline"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set margin-inline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'margin-inline' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("margin-inline", V);
    }

    get "margin-inline-end"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get margin-inline-end' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("margin-inline-end");
    }

    set "margin-inline-end"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set margin-inline-end' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'margin-inline-end' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("margin-inline-end", V);
    }

    get "margin-inline-start"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get margin-inline-start' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("margin-inline-start");
    }

    set "margin-inline-start"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set margin-inline-start' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'margin-inline-start' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("margin-inline-start", V);
    }

    get "margin-left"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get margin-left' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("margin-left");
    }

    set "margin-left"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set margin-left' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'margin-left' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("margin-left", V);
    }

    get "margin-right"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get margin-right' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("margin-right");
    }

    set "margin-right"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set margin-right' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'margin-right' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("margin-right", V);
    }

    get "margin-top"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get margin-top' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("margin-top");
    }

    set "margin-top"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set margin-top' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'margin-top' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("margin-top", V);
    }

    get "margin-trim"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get margin-trim' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("margin-trim");
    }

    set "margin-trim"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set margin-trim' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'margin-trim' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("margin-trim", V);
    }

    get "marker-end"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get marker-end' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("marker-end");
    }

    set "marker-end"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set marker-end' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'marker-end' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("marker-end", V);
    }

    get "marker-mid"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get marker-mid' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("marker-mid");
    }

    set "marker-mid"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set marker-mid' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'marker-mid' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("marker-mid", V);
    }

    get "marker-side"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get marker-side' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("marker-side");
    }

    set "marker-side"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set marker-side' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'marker-side' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("marker-side", V);
    }

    get "marker-start"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get marker-start' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("marker-start");
    }

    set "marker-start"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set marker-start' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'marker-start' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("marker-start", V);
    }

    get "mask-border"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get mask-border' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("mask-border");
    }

    set "mask-border"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set mask-border' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'mask-border' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("mask-border", V);
    }

    get "mask-border-mode"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get mask-border-mode' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("mask-border-mode");
    }

    set "mask-border-mode"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set mask-border-mode' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'mask-border-mode' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("mask-border-mode", V);
    }

    get "mask-border-outset"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get mask-border-outset' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("mask-border-outset");
    }

    set "mask-border-outset"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set mask-border-outset' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'mask-border-outset' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("mask-border-outset", V);
    }

    get "mask-border-repeat"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get mask-border-repeat' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("mask-border-repeat");
    }

    set "mask-border-repeat"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set mask-border-repeat' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'mask-border-repeat' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("mask-border-repeat", V);
    }

    get "mask-border-slice"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get mask-border-slice' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("mask-border-slice");
    }

    set "mask-border-slice"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set mask-border-slice' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'mask-border-slice' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("mask-border-slice", V);
    }

    get "mask-border-source"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get mask-border-source' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("mask-border-source");
    }

    set "mask-border-source"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set mask-border-source' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'mask-border-source' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("mask-border-source", V);
    }

    get "mask-border-width"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get mask-border-width' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("mask-border-width");
    }

    set "mask-border-width"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set mask-border-width' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'mask-border-width' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("mask-border-width", V);
    }

    get "mask-clip"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get mask-clip' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("mask-clip");
    }

    set "mask-clip"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set mask-clip' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'mask-clip' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("mask-clip", V);
    }

    get "mask-composite"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get mask-composite' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("mask-composite");
    }

    set "mask-composite"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set mask-composite' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'mask-composite' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("mask-composite", V);
    }

    get "mask-image"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get mask-image' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("mask-image");
    }

    set "mask-image"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set mask-image' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'mask-image' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("mask-image", V);
    }

    get "mask-mode"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get mask-mode' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("mask-mode");
    }

    set "mask-mode"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set mask-mode' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'mask-mode' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("mask-mode", V);
    }

    get "mask-origin"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get mask-origin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("mask-origin");
    }

    set "mask-origin"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set mask-origin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'mask-origin' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("mask-origin", V);
    }

    get "mask-position"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get mask-position' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("mask-position");
    }

    set "mask-position"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set mask-position' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'mask-position' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("mask-position", V);
    }

    get "mask-repeat"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get mask-repeat' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("mask-repeat");
    }

    set "mask-repeat"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set mask-repeat' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'mask-repeat' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("mask-repeat", V);
    }

    get "mask-size"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get mask-size' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("mask-size");
    }

    set "mask-size"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set mask-size' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'mask-size' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("mask-size", V);
    }

    get "mask-type"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get mask-type' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("mask-type");
    }

    set "mask-type"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set mask-type' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'mask-type' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("mask-type", V);
    }

    get "masonry-auto-flow"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get masonry-auto-flow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("masonry-auto-flow");
    }

    set "masonry-auto-flow"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set masonry-auto-flow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'masonry-auto-flow' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("masonry-auto-flow", V);
    }

    get "max-block-size"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get max-block-size' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("max-block-size");
    }

    set "max-block-size"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set max-block-size' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'max-block-size' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("max-block-size", V);
    }

    get "max-height"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get max-height' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("max-height");
    }

    set "max-height"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set max-height' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'max-height' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("max-height", V);
    }

    get "max-inline-size"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get max-inline-size' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("max-inline-size");
    }

    set "max-inline-size"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set max-inline-size' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'max-inline-size' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("max-inline-size", V);
    }

    get "max-lines"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get max-lines' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("max-lines");
    }

    set "max-lines"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set max-lines' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'max-lines' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("max-lines", V);
    }

    get "max-width"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get max-width' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("max-width");
    }

    set "max-width"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set max-width' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'max-width' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("max-width", V);
    }

    get "min-block-size"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get min-block-size' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("min-block-size");
    }

    set "min-block-size"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set min-block-size' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'min-block-size' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("min-block-size", V);
    }

    get "min-height"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get min-height' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("min-height");
    }

    set "min-height"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set min-height' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'min-height' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("min-height", V);
    }

    get "min-inline-size"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get min-inline-size' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("min-inline-size");
    }

    set "min-inline-size"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set min-inline-size' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'min-inline-size' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("min-inline-size", V);
    }

    get "min-intrinsic-sizing"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get min-intrinsic-sizing' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("min-intrinsic-sizing");
    }

    set "min-intrinsic-sizing"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set min-intrinsic-sizing' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'min-intrinsic-sizing' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("min-intrinsic-sizing", V);
    }

    get "min-width"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get min-width' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("min-width");
    }

    set "min-width"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set min-width' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'min-width' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("min-width", V);
    }

    get "mix-blend-mode"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get mix-blend-mode' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("mix-blend-mode");
    }

    set "mix-blend-mode"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set mix-blend-mode' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'mix-blend-mode' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("mix-blend-mode", V);
    }

    get "nav-down"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get nav-down' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("nav-down");
    }

    set "nav-down"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set nav-down' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'nav-down' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("nav-down", V);
    }

    get "nav-left"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get nav-left' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("nav-left");
    }

    set "nav-left"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set nav-left' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'nav-left' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("nav-left", V);
    }

    get "nav-right"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get nav-right' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("nav-right");
    }

    set "nav-right"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set nav-right' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'nav-right' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("nav-right", V);
    }

    get "nav-up"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get nav-up' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("nav-up");
    }

    set "nav-up"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set nav-up' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'nav-up' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("nav-up", V);
    }

    get "object-fit"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get object-fit' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("object-fit");
    }

    set "object-fit"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set object-fit' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'object-fit' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("object-fit", V);
    }

    get "object-position"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get object-position' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("object-position");
    }

    set "object-position"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set object-position' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'object-position' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("object-position", V);
    }

    get "offset-anchor"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get offset-anchor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("offset-anchor");
    }

    set "offset-anchor"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set offset-anchor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'offset-anchor' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("offset-anchor", V);
    }

    get "offset-distance"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get offset-distance' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("offset-distance");
    }

    set "offset-distance"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set offset-distance' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'offset-distance' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("offset-distance", V);
    }

    get "offset-path"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get offset-path' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("offset-path");
    }

    set "offset-path"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set offset-path' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'offset-path' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("offset-path", V);
    }

    get "offset-position"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get offset-position' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("offset-position");
    }

    set "offset-position"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set offset-position' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'offset-position' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("offset-position", V);
    }

    get "offset-rotate"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get offset-rotate' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("offset-rotate");
    }

    set "offset-rotate"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set offset-rotate' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'offset-rotate' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("offset-rotate", V);
    }

    get "outline-color"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get outline-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("outline-color");
    }

    set "outline-color"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set outline-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'outline-color' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("outline-color", V);
    }

    get "outline-offset"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get outline-offset' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("outline-offset");
    }

    set "outline-offset"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set outline-offset' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'outline-offset' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("outline-offset", V);
    }

    get "outline-style"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get outline-style' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("outline-style");
    }

    set "outline-style"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set outline-style' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'outline-style' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("outline-style", V);
    }

    get "outline-width"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get outline-width' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("outline-width");
    }

    set "outline-width"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set outline-width' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'outline-width' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("outline-width", V);
    }

    get "overflow-anchor"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get overflow-anchor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("overflow-anchor");
    }

    set "overflow-anchor"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set overflow-anchor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'overflow-anchor' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("overflow-anchor", V);
    }

    get "overflow-block"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get overflow-block' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("overflow-block");
    }

    set "overflow-block"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set overflow-block' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'overflow-block' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("overflow-block", V);
    }

    get "overflow-clip-margin"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get overflow-clip-margin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("overflow-clip-margin");
    }

    set "overflow-clip-margin"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set overflow-clip-margin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'overflow-clip-margin' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("overflow-clip-margin", V);
    }

    get "overflow-inline"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get overflow-inline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("overflow-inline");
    }

    set "overflow-inline"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set overflow-inline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'overflow-inline' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("overflow-inline", V);
    }

    get "overflow-wrap"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get overflow-wrap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("overflow-wrap");
    }

    set "overflow-wrap"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set overflow-wrap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'overflow-wrap' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("overflow-wrap", V);
    }

    get "overflow-x"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get overflow-x' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("overflow-x");
    }

    set "overflow-x"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set overflow-x' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'overflow-x' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("overflow-x", V);
    }

    get "overflow-y"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get overflow-y' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("overflow-y");
    }

    set "overflow-y"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set overflow-y' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'overflow-y' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("overflow-y", V);
    }

    get "overscroll-behavior"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get overscroll-behavior' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("overscroll-behavior");
    }

    set "overscroll-behavior"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set overscroll-behavior' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'overscroll-behavior' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("overscroll-behavior", V);
    }

    get "overscroll-behavior-block"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get overscroll-behavior-block' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("overscroll-behavior-block");
    }

    set "overscroll-behavior-block"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set overscroll-behavior-block' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'overscroll-behavior-block' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("overscroll-behavior-block", V);
    }

    get "overscroll-behavior-inline"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get overscroll-behavior-inline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("overscroll-behavior-inline");
    }

    set "overscroll-behavior-inline"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set overscroll-behavior-inline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'overscroll-behavior-inline' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("overscroll-behavior-inline", V);
    }

    get "overscroll-behavior-x"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get overscroll-behavior-x' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("overscroll-behavior-x");
    }

    set "overscroll-behavior-x"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set overscroll-behavior-x' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'overscroll-behavior-x' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("overscroll-behavior-x", V);
    }

    get "overscroll-behavior-y"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get overscroll-behavior-y' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("overscroll-behavior-y");
    }

    set "overscroll-behavior-y"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set overscroll-behavior-y' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'overscroll-behavior-y' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("overscroll-behavior-y", V);
    }

    get "padding-block"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get padding-block' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("padding-block");
    }

    set "padding-block"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set padding-block' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'padding-block' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("padding-block", V);
    }

    get "padding-block-end"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get padding-block-end' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("padding-block-end");
    }

    set "padding-block-end"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set padding-block-end' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'padding-block-end' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("padding-block-end", V);
    }

    get "padding-block-start"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get padding-block-start' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("padding-block-start");
    }

    set "padding-block-start"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set padding-block-start' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'padding-block-start' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("padding-block-start", V);
    }

    get "padding-bottom"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get padding-bottom' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("padding-bottom");
    }

    set "padding-bottom"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set padding-bottom' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'padding-bottom' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("padding-bottom", V);
    }

    get "padding-inline"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get padding-inline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("padding-inline");
    }

    set "padding-inline"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set padding-inline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'padding-inline' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("padding-inline", V);
    }

    get "padding-inline-end"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get padding-inline-end' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("padding-inline-end");
    }

    set "padding-inline-end"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set padding-inline-end' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'padding-inline-end' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("padding-inline-end", V);
    }

    get "padding-inline-start"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get padding-inline-start' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("padding-inline-start");
    }

    set "padding-inline-start"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set padding-inline-start' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'padding-inline-start' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("padding-inline-start", V);
    }

    get "padding-left"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get padding-left' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("padding-left");
    }

    set "padding-left"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set padding-left' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'padding-left' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("padding-left", V);
    }

    get "padding-right"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get padding-right' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("padding-right");
    }

    set "padding-right"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set padding-right' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'padding-right' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("padding-right", V);
    }

    get "padding-top"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get padding-top' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("padding-top");
    }

    set "padding-top"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set padding-top' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'padding-top' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("padding-top", V);
    }

    get "page-break-after"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get page-break-after' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("page-break-after");
    }

    set "page-break-after"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set page-break-after' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'page-break-after' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("page-break-after", V);
    }

    get "page-break-before"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get page-break-before' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("page-break-before");
    }

    set "page-break-before"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set page-break-before' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'page-break-before' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("page-break-before", V);
    }

    get "page-break-inside"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get page-break-inside' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("page-break-inside");
    }

    set "page-break-inside"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set page-break-inside' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'page-break-inside' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("page-break-inside", V);
    }

    get "paint-order"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get paint-order' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("paint-order");
    }

    set "paint-order"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set paint-order' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'paint-order' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("paint-order", V);
    }

    get "pause-after"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get pause-after' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("pause-after");
    }

    set "pause-after"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set pause-after' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'pause-after' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("pause-after", V);
    }

    get "pause-before"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get pause-before' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("pause-before");
    }

    set "pause-before"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set pause-before' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'pause-before' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("pause-before", V);
    }

    get "perspective-origin"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get perspective-origin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("perspective-origin");
    }

    set "perspective-origin"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set perspective-origin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'perspective-origin' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("perspective-origin", V);
    }

    get "place-content"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get place-content' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("place-content");
    }

    set "place-content"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set place-content' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'place-content' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("place-content", V);
    }

    get "place-items"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get place-items' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("place-items");
    }

    set "place-items"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set place-items' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'place-items' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("place-items", V);
    }

    get "place-self"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get place-self' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("place-self");
    }

    set "place-self"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set place-self' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'place-self' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("place-self", V);
    }

    get "pointer-events"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get pointer-events' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("pointer-events");
    }

    set "pointer-events"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set pointer-events' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'pointer-events' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("pointer-events", V);
    }

    get "print-color-adjust"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get print-color-adjust' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("print-color-adjust");
    }

    set "print-color-adjust"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set print-color-adjust' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'print-color-adjust' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("print-color-adjust", V);
    }

    get "region-fragment"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get region-fragment' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("region-fragment");
    }

    set "region-fragment"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set region-fragment' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'region-fragment' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("region-fragment", V);
    }

    get "rest-after"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get rest-after' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("rest-after");
    }

    set "rest-after"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set rest-after' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'rest-after' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("rest-after", V);
    }

    get "rest-before"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get rest-before' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("rest-before");
    }

    set "rest-before"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set rest-before' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'rest-before' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("rest-before", V);
    }

    get "row-gap"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get row-gap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("row-gap");
    }

    set "row-gap"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set row-gap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'row-gap' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("row-gap", V);
    }

    get "ruby-align"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get ruby-align' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("ruby-align");
    }

    set "ruby-align"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set ruby-align' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'ruby-align' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("ruby-align", V);
    }

    get "ruby-merge"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get ruby-merge' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("ruby-merge");
    }

    set "ruby-merge"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set ruby-merge' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'ruby-merge' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("ruby-merge", V);
    }

    get "ruby-overhang"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get ruby-overhang' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("ruby-overhang");
    }

    set "ruby-overhang"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set ruby-overhang' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'ruby-overhang' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("ruby-overhang", V);
    }

    get "ruby-position"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get ruby-position' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("ruby-position");
    }

    set "ruby-position"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set ruby-position' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'ruby-position' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("ruby-position", V);
    }

    get "scroll-behavior"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scroll-behavior' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-behavior");
    }

    set "scroll-behavior"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scroll-behavior' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scroll-behavior' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-behavior", V);
    }

    get "scroll-margin"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scroll-margin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-margin");
    }

    set "scroll-margin"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scroll-margin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scroll-margin' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-margin", V);
    }

    get "scroll-margin-block"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scroll-margin-block' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-margin-block");
    }

    set "scroll-margin-block"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scroll-margin-block' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scroll-margin-block' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-margin-block", V);
    }

    get "scroll-margin-block-end"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scroll-margin-block-end' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-margin-block-end");
    }

    set "scroll-margin-block-end"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scroll-margin-block-end' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scroll-margin-block-end' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-margin-block-end", V);
    }

    get "scroll-margin-block-start"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scroll-margin-block-start' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-margin-block-start");
    }

    set "scroll-margin-block-start"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scroll-margin-block-start' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scroll-margin-block-start' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-margin-block-start", V);
    }

    get "scroll-margin-bottom"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scroll-margin-bottom' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-margin-bottom");
    }

    set "scroll-margin-bottom"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scroll-margin-bottom' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scroll-margin-bottom' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-margin-bottom", V);
    }

    get "scroll-margin-inline"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scroll-margin-inline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-margin-inline");
    }

    set "scroll-margin-inline"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scroll-margin-inline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scroll-margin-inline' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-margin-inline", V);
    }

    get "scroll-margin-inline-end"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scroll-margin-inline-end' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-margin-inline-end");
    }

    set "scroll-margin-inline-end"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scroll-margin-inline-end' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scroll-margin-inline-end' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-margin-inline-end", V);
    }

    get "scroll-margin-inline-start"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scroll-margin-inline-start' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-margin-inline-start");
    }

    set "scroll-margin-inline-start"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scroll-margin-inline-start' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scroll-margin-inline-start' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-margin-inline-start", V);
    }

    get "scroll-margin-left"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scroll-margin-left' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-margin-left");
    }

    set "scroll-margin-left"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scroll-margin-left' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scroll-margin-left' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-margin-left", V);
    }

    get "scroll-margin-right"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scroll-margin-right' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-margin-right");
    }

    set "scroll-margin-right"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scroll-margin-right' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scroll-margin-right' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-margin-right", V);
    }

    get "scroll-margin-top"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scroll-margin-top' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-margin-top");
    }

    set "scroll-margin-top"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scroll-margin-top' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scroll-margin-top' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-margin-top", V);
    }

    get "scroll-padding"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scroll-padding' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-padding");
    }

    set "scroll-padding"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scroll-padding' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scroll-padding' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-padding", V);
    }

    get "scroll-padding-block"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scroll-padding-block' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-padding-block");
    }

    set "scroll-padding-block"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scroll-padding-block' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scroll-padding-block' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-padding-block", V);
    }

    get "scroll-padding-block-end"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scroll-padding-block-end' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-padding-block-end");
    }

    set "scroll-padding-block-end"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scroll-padding-block-end' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scroll-padding-block-end' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-padding-block-end", V);
    }

    get "scroll-padding-block-start"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scroll-padding-block-start' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-padding-block-start");
    }

    set "scroll-padding-block-start"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scroll-padding-block-start' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scroll-padding-block-start' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-padding-block-start", V);
    }

    get "scroll-padding-bottom"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scroll-padding-bottom' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-padding-bottom");
    }

    set "scroll-padding-bottom"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scroll-padding-bottom' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scroll-padding-bottom' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-padding-bottom", V);
    }

    get "scroll-padding-inline"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scroll-padding-inline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-padding-inline");
    }

    set "scroll-padding-inline"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scroll-padding-inline' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scroll-padding-inline' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-padding-inline", V);
    }

    get "scroll-padding-inline-end"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scroll-padding-inline-end' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-padding-inline-end");
    }

    set "scroll-padding-inline-end"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scroll-padding-inline-end' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scroll-padding-inline-end' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-padding-inline-end", V);
    }

    get "scroll-padding-inline-start"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scroll-padding-inline-start' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-padding-inline-start");
    }

    set "scroll-padding-inline-start"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scroll-padding-inline-start' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context:
          "Failed to set the 'scroll-padding-inline-start' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-padding-inline-start", V);
    }

    get "scroll-padding-left"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scroll-padding-left' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-padding-left");
    }

    set "scroll-padding-left"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scroll-padding-left' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scroll-padding-left' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-padding-left", V);
    }

    get "scroll-padding-right"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scroll-padding-right' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-padding-right");
    }

    set "scroll-padding-right"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scroll-padding-right' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scroll-padding-right' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-padding-right", V);
    }

    get "scroll-padding-top"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scroll-padding-top' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-padding-top");
    }

    set "scroll-padding-top"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scroll-padding-top' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scroll-padding-top' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-padding-top", V);
    }

    get "scroll-snap-align"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scroll-snap-align' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-snap-align");
    }

    set "scroll-snap-align"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scroll-snap-align' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scroll-snap-align' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-snap-align", V);
    }

    get "scroll-snap-stop"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scroll-snap-stop' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-snap-stop");
    }

    set "scroll-snap-stop"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scroll-snap-stop' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scroll-snap-stop' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-snap-stop", V);
    }

    get "scroll-snap-type"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scroll-snap-type' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scroll-snap-type");
    }

    set "scroll-snap-type"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scroll-snap-type' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scroll-snap-type' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scroll-snap-type", V);
    }

    get "scrollbar-color"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scrollbar-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scrollbar-color");
    }

    set "scrollbar-color"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scrollbar-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scrollbar-color' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scrollbar-color", V);
    }

    get "scrollbar-gutter"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scrollbar-gutter' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scrollbar-gutter");
    }

    set "scrollbar-gutter"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scrollbar-gutter' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scrollbar-gutter' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scrollbar-gutter", V);
    }

    get "scrollbar-width"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get scrollbar-width' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("scrollbar-width");
    }

    set "scrollbar-width"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set scrollbar-width' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'scrollbar-width' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("scrollbar-width", V);
    }

    get "shape-image-threshold"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get shape-image-threshold' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("shape-image-threshold");
    }

    set "shape-image-threshold"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set shape-image-threshold' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'shape-image-threshold' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("shape-image-threshold", V);
    }

    get "shape-inside"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get shape-inside' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("shape-inside");
    }

    set "shape-inside"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set shape-inside' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'shape-inside' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("shape-inside", V);
    }

    get "shape-margin"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get shape-margin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("shape-margin");
    }

    set "shape-margin"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set shape-margin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'shape-margin' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("shape-margin", V);
    }

    get "shape-outside"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get shape-outside' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("shape-outside");
    }

    set "shape-outside"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set shape-outside' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'shape-outside' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("shape-outside", V);
    }

    get "shape-padding"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get shape-padding' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("shape-padding");
    }

    set "shape-padding"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set shape-padding' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'shape-padding' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("shape-padding", V);
    }

    get "shape-rendering"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get shape-rendering' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("shape-rendering");
    }

    set "shape-rendering"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set shape-rendering' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'shape-rendering' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("shape-rendering", V);
    }

    get "shape-subtract"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get shape-subtract' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("shape-subtract");
    }

    set "shape-subtract"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set shape-subtract' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'shape-subtract' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("shape-subtract", V);
    }

    get "spatial-navigation-action"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get spatial-navigation-action' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("spatial-navigation-action");
    }

    set "spatial-navigation-action"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set spatial-navigation-action' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'spatial-navigation-action' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("spatial-navigation-action", V);
    }

    get "spatial-navigation-contain"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get spatial-navigation-contain' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("spatial-navigation-contain");
    }

    set "spatial-navigation-contain"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set spatial-navigation-contain' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'spatial-navigation-contain' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("spatial-navigation-contain", V);
    }

    get "spatial-navigation-function"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get spatial-navigation-function' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("spatial-navigation-function");
    }

    set "spatial-navigation-function"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set spatial-navigation-function' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context:
          "Failed to set the 'spatial-navigation-function' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("spatial-navigation-function", V);
    }

    get "speak-as"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get speak-as' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("speak-as");
    }

    set "speak-as"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set speak-as' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'speak-as' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("speak-as", V);
    }

    get "stop-color"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get stop-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("stop-color");
    }

    set "stop-color"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set stop-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'stop-color' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("stop-color", V);
    }

    get "stop-opacity"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get stop-opacity' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("stop-opacity");
    }

    set "stop-opacity"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set stop-opacity' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'stop-opacity' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("stop-opacity", V);
    }

    get "string-set"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get string-set' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("string-set");
    }

    set "string-set"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set string-set' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'string-set' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("string-set", V);
    }

    get "stroke-align"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get stroke-align' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("stroke-align");
    }

    set "stroke-align"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set stroke-align' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'stroke-align' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("stroke-align", V);
    }

    get "stroke-alignment"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get stroke-alignment' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("stroke-alignment");
    }

    set "stroke-alignment"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set stroke-alignment' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'stroke-alignment' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("stroke-alignment", V);
    }

    get "stroke-break"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get stroke-break' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("stroke-break");
    }

    set "stroke-break"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set stroke-break' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'stroke-break' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("stroke-break", V);
    }

    get "stroke-color"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get stroke-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("stroke-color");
    }

    set "stroke-color"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set stroke-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'stroke-color' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("stroke-color", V);
    }

    get "stroke-dash-corner"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get stroke-dash-corner' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("stroke-dash-corner");
    }

    set "stroke-dash-corner"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set stroke-dash-corner' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'stroke-dash-corner' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("stroke-dash-corner", V);
    }

    get "stroke-dash-justify"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get stroke-dash-justify' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("stroke-dash-justify");
    }

    set "stroke-dash-justify"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set stroke-dash-justify' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'stroke-dash-justify' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("stroke-dash-justify", V);
    }

    get "stroke-dashadjust"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get stroke-dashadjust' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("stroke-dashadjust");
    }

    set "stroke-dashadjust"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set stroke-dashadjust' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'stroke-dashadjust' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("stroke-dashadjust", V);
    }

    get "stroke-dasharray"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get stroke-dasharray' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("stroke-dasharray");
    }

    set "stroke-dasharray"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set stroke-dasharray' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'stroke-dasharray' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("stroke-dasharray", V);
    }

    get "stroke-dashcorner"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get stroke-dashcorner' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("stroke-dashcorner");
    }

    set "stroke-dashcorner"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set stroke-dashcorner' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'stroke-dashcorner' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("stroke-dashcorner", V);
    }

    get "stroke-dashoffset"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get stroke-dashoffset' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("stroke-dashoffset");
    }

    set "stroke-dashoffset"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set stroke-dashoffset' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'stroke-dashoffset' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("stroke-dashoffset", V);
    }

    get "stroke-image"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get stroke-image' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("stroke-image");
    }

    set "stroke-image"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set stroke-image' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'stroke-image' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("stroke-image", V);
    }

    get "stroke-linecap"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get stroke-linecap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("stroke-linecap");
    }

    set "stroke-linecap"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set stroke-linecap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'stroke-linecap' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("stroke-linecap", V);
    }

    get "stroke-linejoin"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get stroke-linejoin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("stroke-linejoin");
    }

    set "stroke-linejoin"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set stroke-linejoin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'stroke-linejoin' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("stroke-linejoin", V);
    }

    get "stroke-miterlimit"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get stroke-miterlimit' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("stroke-miterlimit");
    }

    set "stroke-miterlimit"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set stroke-miterlimit' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'stroke-miterlimit' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("stroke-miterlimit", V);
    }

    get "stroke-opacity"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get stroke-opacity' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("stroke-opacity");
    }

    set "stroke-opacity"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set stroke-opacity' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'stroke-opacity' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("stroke-opacity", V);
    }

    get "stroke-origin"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get stroke-origin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("stroke-origin");
    }

    set "stroke-origin"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set stroke-origin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'stroke-origin' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("stroke-origin", V);
    }

    get "stroke-position"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get stroke-position' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("stroke-position");
    }

    set "stroke-position"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set stroke-position' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'stroke-position' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("stroke-position", V);
    }

    get "stroke-repeat"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get stroke-repeat' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("stroke-repeat");
    }

    set "stroke-repeat"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set stroke-repeat' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'stroke-repeat' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("stroke-repeat", V);
    }

    get "stroke-size"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get stroke-size' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("stroke-size");
    }

    set "stroke-size"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set stroke-size' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'stroke-size' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("stroke-size", V);
    }

    get "stroke-width"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get stroke-width' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("stroke-width");
    }

    set "stroke-width"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set stroke-width' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'stroke-width' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("stroke-width", V);
    }

    get "tab-size"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get tab-size' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("tab-size");
    }

    set "tab-size"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set tab-size' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'tab-size' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("tab-size", V);
    }

    get "table-layout"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get table-layout' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("table-layout");
    }

    set "table-layout"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set table-layout' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'table-layout' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("table-layout", V);
    }

    get "text-align"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get text-align' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-align");
    }

    set "text-align"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set text-align' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'text-align' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-align", V);
    }

    get "text-align-all"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get text-align-all' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-align-all");
    }

    set "text-align-all"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set text-align-all' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'text-align-all' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-align-all", V);
    }

    get "text-align-last"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get text-align-last' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-align-last");
    }

    set "text-align-last"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set text-align-last' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'text-align-last' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-align-last", V);
    }

    get "text-anchor"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get text-anchor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-anchor");
    }

    set "text-anchor"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set text-anchor' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'text-anchor' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-anchor", V);
    }

    get "text-combine-upright"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get text-combine-upright' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-combine-upright");
    }

    set "text-combine-upright"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set text-combine-upright' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'text-combine-upright' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-combine-upright", V);
    }

    get "text-decoration"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get text-decoration' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-decoration");
    }

    set "text-decoration"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set text-decoration' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'text-decoration' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-decoration", V);
    }

    get "text-decoration-color"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get text-decoration-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-decoration-color");
    }

    set "text-decoration-color"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set text-decoration-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'text-decoration-color' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-decoration-color", V);
    }

    get "text-decoration-line"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get text-decoration-line' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-decoration-line");
    }

    set "text-decoration-line"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set text-decoration-line' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'text-decoration-line' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-decoration-line", V);
    }

    get "text-decoration-skip"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get text-decoration-skip' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-decoration-skip");
    }

    set "text-decoration-skip"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set text-decoration-skip' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'text-decoration-skip' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-decoration-skip", V);
    }

    get "text-decoration-skip-box"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get text-decoration-skip-box' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-decoration-skip-box");
    }

    set "text-decoration-skip-box"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set text-decoration-skip-box' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'text-decoration-skip-box' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-decoration-skip-box", V);
    }

    get "text-decoration-skip-ink"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get text-decoration-skip-ink' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-decoration-skip-ink");
    }

    set "text-decoration-skip-ink"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set text-decoration-skip-ink' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'text-decoration-skip-ink' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-decoration-skip-ink", V);
    }

    get "text-decoration-skip-inset"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get text-decoration-skip-inset' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-decoration-skip-inset");
    }

    set "text-decoration-skip-inset"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set text-decoration-skip-inset' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'text-decoration-skip-inset' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-decoration-skip-inset", V);
    }

    get "text-decoration-skip-self"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get text-decoration-skip-self' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-decoration-skip-self");
    }

    set "text-decoration-skip-self"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set text-decoration-skip-self' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'text-decoration-skip-self' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-decoration-skip-self", V);
    }

    get "text-decoration-skip-spaces"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get text-decoration-skip-spaces' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-decoration-skip-spaces");
    }

    set "text-decoration-skip-spaces"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set text-decoration-skip-spaces' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context:
          "Failed to set the 'text-decoration-skip-spaces' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-decoration-skip-spaces", V);
    }

    get "text-decoration-style"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get text-decoration-style' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-decoration-style");
    }

    set "text-decoration-style"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set text-decoration-style' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'text-decoration-style' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-decoration-style", V);
    }

    get "text-decoration-thickness"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get text-decoration-thickness' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-decoration-thickness");
    }

    set "text-decoration-thickness"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set text-decoration-thickness' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'text-decoration-thickness' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-decoration-thickness", V);
    }

    get "text-edge"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get text-edge' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-edge");
    }

    set "text-edge"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set text-edge' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'text-edge' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-edge", V);
    }

    get "text-emphasis"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get text-emphasis' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-emphasis");
    }

    set "text-emphasis"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set text-emphasis' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'text-emphasis' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-emphasis", V);
    }

    get "text-emphasis-color"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get text-emphasis-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-emphasis-color");
    }

    set "text-emphasis-color"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set text-emphasis-color' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'text-emphasis-color' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-emphasis-color", V);
    }

    get "text-emphasis-position"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get text-emphasis-position' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-emphasis-position");
    }

    set "text-emphasis-position"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set text-emphasis-position' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'text-emphasis-position' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-emphasis-position", V);
    }

    get "text-emphasis-skip"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get text-emphasis-skip' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-emphasis-skip");
    }

    set "text-emphasis-skip"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set text-emphasis-skip' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'text-emphasis-skip' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-emphasis-skip", V);
    }

    get "text-emphasis-style"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get text-emphasis-style' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-emphasis-style");
    }

    set "text-emphasis-style"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set text-emphasis-style' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'text-emphasis-style' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-emphasis-style", V);
    }

    get "text-group-align"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get text-group-align' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-group-align");
    }

    set "text-group-align"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set text-group-align' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'text-group-align' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-group-align", V);
    }

    get "text-indent"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get text-indent' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-indent");
    }

    set "text-indent"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set text-indent' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'text-indent' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-indent", V);
    }

    get "text-justify"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get text-justify' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-justify");
    }

    set "text-justify"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set text-justify' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'text-justify' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-justify", V);
    }

    get "text-orientation"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get text-orientation' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-orientation");
    }

    set "text-orientation"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set text-orientation' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'text-orientation' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-orientation", V);
    }

    get "text-overflow"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get text-overflow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-overflow");
    }

    set "text-overflow"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set text-overflow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'text-overflow' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-overflow", V);
    }

    get "text-rendering"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get text-rendering' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-rendering");
    }

    set "text-rendering"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set text-rendering' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'text-rendering' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-rendering", V);
    }

    get "text-shadow"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get text-shadow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-shadow");
    }

    set "text-shadow"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set text-shadow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'text-shadow' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-shadow", V);
    }

    get "text-size-adjust"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get text-size-adjust' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-size-adjust");
    }

    set "text-size-adjust"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set text-size-adjust' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'text-size-adjust' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-size-adjust", V);
    }

    get "text-space-collapse"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get text-space-collapse' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-space-collapse");
    }

    set "text-space-collapse"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set text-space-collapse' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'text-space-collapse' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-space-collapse", V);
    }

    get "text-space-trim"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get text-space-trim' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-space-trim");
    }

    set "text-space-trim"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set text-space-trim' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'text-space-trim' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-space-trim", V);
    }

    get "text-spacing"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get text-spacing' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-spacing");
    }

    set "text-spacing"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set text-spacing' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'text-spacing' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-spacing", V);
    }

    get "text-transform"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get text-transform' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-transform");
    }

    set "text-transform"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set text-transform' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'text-transform' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-transform", V);
    }

    get "text-underline-offset"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get text-underline-offset' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-underline-offset");
    }

    set "text-underline-offset"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set text-underline-offset' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'text-underline-offset' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-underline-offset", V);
    }

    get "text-underline-position"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get text-underline-position' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-underline-position");
    }

    set "text-underline-position"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set text-underline-position' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'text-underline-position' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-underline-position", V);
    }

    get "text-wrap"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get text-wrap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("text-wrap");
    }

    set "text-wrap"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set text-wrap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'text-wrap' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("text-wrap", V);
    }

    get "touch-action"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get touch-action' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("touch-action");
    }

    set "touch-action"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set touch-action' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'touch-action' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("touch-action", V);
    }

    get "transform-box"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get transform-box' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("transform-box");
    }

    set "transform-box"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set transform-box' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'transform-box' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("transform-box", V);
    }

    get "transform-origin"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get transform-origin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("transform-origin");
    }

    set "transform-origin"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set transform-origin' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'transform-origin' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("transform-origin", V);
    }

    get "transform-style"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get transform-style' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("transform-style");
    }

    set "transform-style"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set transform-style' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'transform-style' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("transform-style", V);
    }

    get "transition-delay"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get transition-delay' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("transition-delay");
    }

    set "transition-delay"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set transition-delay' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'transition-delay' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("transition-delay", V);
    }

    get "transition-duration"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get transition-duration' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("transition-duration");
    }

    set "transition-duration"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set transition-duration' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'transition-duration' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("transition-duration", V);
    }

    get "transition-property"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get transition-property' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("transition-property");
    }

    set "transition-property"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set transition-property' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'transition-property' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("transition-property", V);
    }

    get "transition-timing-function"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get transition-timing-function' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("transition-timing-function");
    }

    set "transition-timing-function"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set transition-timing-function' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'transition-timing-function' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("transition-timing-function", V);
    }

    get "unicode-bidi"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get unicode-bidi' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("unicode-bidi");
    }

    set "unicode-bidi"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set unicode-bidi' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'unicode-bidi' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("unicode-bidi", V);
    }

    get "user-select"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get user-select' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("user-select");
    }

    set "user-select"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set user-select' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'user-select' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("user-select", V);
    }

    get "vector-effect"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get vector-effect' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("vector-effect");
    }

    set "vector-effect"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set vector-effect' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'vector-effect' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("vector-effect", V);
    }

    get "vertical-align"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get vertical-align' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("vertical-align");
    }

    set "vertical-align"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set vertical-align' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'vertical-align' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("vertical-align", V);
    }

    get "voice-balance"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get voice-balance' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("voice-balance");
    }

    set "voice-balance"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set voice-balance' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'voice-balance' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("voice-balance", V);
    }

    get "voice-duration"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get voice-duration' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("voice-duration");
    }

    set "voice-duration"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set voice-duration' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'voice-duration' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("voice-duration", V);
    }

    get "voice-family"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get voice-family' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("voice-family");
    }

    set "voice-family"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set voice-family' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'voice-family' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("voice-family", V);
    }

    get "voice-pitch"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get voice-pitch' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("voice-pitch");
    }

    set "voice-pitch"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set voice-pitch' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'voice-pitch' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("voice-pitch", V);
    }

    get "voice-range"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get voice-range' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("voice-range");
    }

    set "voice-range"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set voice-range' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'voice-range' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("voice-range", V);
    }

    get "voice-rate"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get voice-rate' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("voice-rate");
    }

    set "voice-rate"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set voice-rate' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'voice-rate' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("voice-rate", V);
    }

    get "voice-stress"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get voice-stress' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("voice-stress");
    }

    set "voice-stress"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set voice-stress' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'voice-stress' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("voice-stress", V);
    }

    get "voice-volume"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get voice-volume' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("voice-volume");
    }

    set "voice-volume"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set voice-volume' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'voice-volume' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("voice-volume", V);
    }

    get "white-space"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get white-space' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("white-space");
    }

    set "white-space"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set white-space' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'white-space' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("white-space", V);
    }

    get "will-change"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get will-change' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("will-change");
    }

    set "will-change"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set will-change' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'will-change' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("will-change", V);
    }

    get "word-boundary-detection"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get word-boundary-detection' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("word-boundary-detection");
    }

    set "word-boundary-detection"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set word-boundary-detection' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'word-boundary-detection' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("word-boundary-detection", V);
    }

    get "word-boundary-expansion"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get word-boundary-expansion' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("word-boundary-expansion");
    }

    set "word-boundary-expansion"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set word-boundary-expansion' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'word-boundary-expansion' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("word-boundary-expansion", V);
    }

    get "word-break"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get word-break' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("word-break");
    }

    set "word-break"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set word-break' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'word-break' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("word-break", V);
    }

    get "word-spacing"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get word-spacing' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("word-spacing");
    }

    set "word-spacing"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set word-spacing' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'word-spacing' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("word-spacing", V);
    }

    get "word-wrap"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get word-wrap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("word-wrap");
    }

    set "word-wrap"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set word-wrap' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'word-wrap' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("word-wrap", V);
    }

    get "wrap-after"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get wrap-after' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("wrap-after");
    }

    set "wrap-after"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set wrap-after' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'wrap-after' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("wrap-after", V);
    }

    get "wrap-before"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get wrap-before' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("wrap-before");
    }

    set "wrap-before"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set wrap-before' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'wrap-before' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("wrap-before", V);
    }

    get "wrap-flow"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get wrap-flow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("wrap-flow");
    }

    set "wrap-flow"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set wrap-flow' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'wrap-flow' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("wrap-flow", V);
    }

    get "wrap-inside"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get wrap-inside' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("wrap-inside");
    }

    set "wrap-inside"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set wrap-inside' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'wrap-inside' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("wrap-inside", V);
    }

    get "wrap-through"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get wrap-through' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("wrap-through");
    }

    set "wrap-through"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set wrap-through' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'wrap-through' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("wrap-through", V);
    }

    get "writing-mode"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get writing-mode' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("writing-mode");
    }

    set "writing-mode"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set writing-mode' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'writing-mode' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("writing-mode", V);
    }

    get "z-index"() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'get z-index' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      return esValue[implSymbol].getPropertyValue("z-index");
    }

    set "z-index"(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new globalObject.TypeError(
          "'set z-index' called on an object that is not a valid instance of CSSStyleDeclaration."
        );
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'z-index' property on 'CSSStyleDeclaration': The provided value",
        globals: globalObject,
        treatNullAsEmptyString: true
      });

      esValue[implSymbol].setProperty("z-index", V);
    }
  }
  Object.defineProperties(CSSStyleDeclaration.prototype, {
    item: { enumerable: true },
    getPropertyValue: { enumerable: true },
    getPropertyPriority: { enumerable: true },
    setProperty: { enumerable: true },
    removeProperty: { enumerable: true },
    cssText: { enumerable: true },
    length: { enumerable: true },
    parentRule: { enumerable: true },
    cssFloat: { enumerable: true },
    gridColumnGap: { enumerable: true },
    gridGap: { enumerable: true },
    gridRowGap: { enumerable: true },
    WebkitAppearance: { enumerable: true },
    WebkitAlignContent: { enumerable: true },
    WebkitAlignItems: { enumerable: true },
    WebkitAlignSelf: { enumerable: true },
    WebkitAnimation: { enumerable: true },
    WebkitAnimationDelay: { enumerable: true },
    WebkitAnimationDirection: { enumerable: true },
    WebkitAnimationDuration: { enumerable: true },
    WebkitAnimationFillMode: { enumerable: true },
    WebkitAnimationIterationCount: { enumerable: true },
    WebkitAnimationName: { enumerable: true },
    WebkitAnimationPlayState: { enumerable: true },
    WebkitAnimationTimingFunction: { enumerable: true },
    WebkitBackfaceVisibility: { enumerable: true },
    WebkitBackgroundOrigin: { enumerable: true },
    WebkitBackgroundSize: { enumerable: true },
    WebkitBorderBottomLeftRadius: { enumerable: true },
    WebkitBorderBottomRightRadius: { enumerable: true },
    WebkitBorderRadius: { enumerable: true },
    WebkitBorderTopLeftRadius: { enumerable: true },
    WebkitBorderTopRightRadius: { enumerable: true },
    WebkitBoxShadow: { enumerable: true },
    WebkitBoxSizing: { enumerable: true },
    WebkitFilter: { enumerable: true },
    WebkitFlex: { enumerable: true },
    WebkitFlexBasis: { enumerable: true },
    WebkitFlexDirection: { enumerable: true },
    WebkitFlexFlow: { enumerable: true },
    WebkitFlexGrow: { enumerable: true },
    WebkitFlexShrink: { enumerable: true },
    WebkitFlexWrap: { enumerable: true },
    WebkitJustifyContent: { enumerable: true },
    WebkitLineClamp: { enumerable: true },
    WebkitMask: { enumerable: true },
    WebkitMaskClip: { enumerable: true },
    WebkitMaskComposite: { enumerable: true },
    WebkitMaskImage: { enumerable: true },
    WebkitMaskOrigin: { enumerable: true },
    WebkitMaskPosition: { enumerable: true },
    WebkitMaskRepeat: { enumerable: true },
    WebkitMaskSize: { enumerable: true },
    WebkitOrder: { enumerable: true },
    WebkitPerspective: { enumerable: true },
    WebkitPerspectiveOrigin: { enumerable: true },
    WebkitTransform: { enumerable: true },
    WebkitTransformOrigin: { enumerable: true },
    WebkitTransformStyle: { enumerable: true },
    WebkitTransition: { enumerable: true },
    WebkitTransitionDelay: { enumerable: true },
    WebkitTransitionDuration: { enumerable: true },
    WebkitTransitionProperty: { enumerable: true },
    WebkitTransitionTimingFunction: { enumerable: true },
    WebkitUserSelect: { enumerable: true },
    WebkitTextSizeAdjust: { enumerable: true },
    WebkitBoxAlign: { enumerable: true },
    WebkitBoxFlex: { enumerable: true },
    WebkitBoxOrdinalGroup: { enumerable: true },
    WebkitBoxOrient: { enumerable: true },
    WebkitBoxPack: { enumerable: true },
    WebkitMaskBoxImage: { enumerable: true },
    WebkitMaskBoxImageOutset: { enumerable: true },
    WebkitMaskBoxImageRepeat: { enumerable: true },
    WebkitMaskBoxImageSlice: { enumerable: true },
    WebkitMaskBoxImageSource: { enumerable: true },
    WebkitMaskBoxImageWidth: { enumerable: true },
    WebkitBackgroundClip: { enumerable: true },
    WebkitTextFillColor: { enumerable: true },
    WebkitTextStroke: { enumerable: true },
    WebkitTextStrokeColor: { enumerable: true },
    WebkitTextStrokeWidth: { enumerable: true },
    accentColor: { enumerable: true },
    alignContent: { enumerable: true },
    alignItems: { enumerable: true },
    alignSelf: { enumerable: true },
    alignTracks: { enumerable: true },
    alignmentBaseline: { enumerable: true },
    all: { enumerable: true },
    animation: { enumerable: true },
    animationComposition: { enumerable: true },
    animationDelay: { enumerable: true },
    animationDirection: { enumerable: true },
    animationDuration: { enumerable: true },
    animationFillMode: { enumerable: true },
    animationIterationCount: { enumerable: true },
    animationName: { enumerable: true },
    animationPlayState: { enumerable: true },
    animationTimeline: { enumerable: true },
    animationTimingFunction: { enumerable: true },
    appearance: { enumerable: true },
    aspectRatio: { enumerable: true },
    backdropFilter: { enumerable: true },
    backfaceVisibility: { enumerable: true },
    background: { enumerable: true },
    backgroundAttachment: { enumerable: true },
    backgroundBlendMode: { enumerable: true },
    backgroundClip: { enumerable: true },
    backgroundColor: { enumerable: true },
    backgroundImage: { enumerable: true },
    backgroundOrigin: { enumerable: true },
    backgroundPosition: { enumerable: true },
    backgroundPositionBlock: { enumerable: true },
    backgroundPositionInline: { enumerable: true },
    backgroundPositionX: { enumerable: true },
    backgroundPositionY: { enumerable: true },
    backgroundRepeat: { enumerable: true },
    backgroundSize: { enumerable: true },
    baselineShift: { enumerable: true },
    baselineSource: { enumerable: true },
    blockEllipsis: { enumerable: true },
    blockSize: { enumerable: true },
    blockStep: { enumerable: true },
    blockStepAlign: { enumerable: true },
    blockStepInsert: { enumerable: true },
    blockStepRound: { enumerable: true },
    blockStepSize: { enumerable: true },
    bookmarkLabel: { enumerable: true },
    bookmarkLevel: { enumerable: true },
    bookmarkState: { enumerable: true },
    border: { enumerable: true },
    borderBlock: { enumerable: true },
    borderBlockColor: { enumerable: true },
    borderBlockEnd: { enumerable: true },
    borderBlockEndColor: { enumerable: true },
    borderBlockEndStyle: { enumerable: true },
    borderBlockEndWidth: { enumerable: true },
    borderBlockStart: { enumerable: true },
    borderBlockStartColor: { enumerable: true },
    borderBlockStartStyle: { enumerable: true },
    borderBlockStartWidth: { enumerable: true },
    borderBlockStyle: { enumerable: true },
    borderBlockWidth: { enumerable: true },
    borderBottom: { enumerable: true },
    borderBottomColor: { enumerable: true },
    borderBottomLeftRadius: { enumerable: true },
    borderBottomRightRadius: { enumerable: true },
    borderBottomStyle: { enumerable: true },
    borderBottomWidth: { enumerable: true },
    borderBoundary: { enumerable: true },
    borderClip: { enumerable: true },
    borderClipBottom: { enumerable: true },
    borderClipLeft: { enumerable: true },
    borderClipRight: { enumerable: true },
    borderClipTop: { enumerable: true },
    borderCollapse: { enumerable: true },
    borderColor: { enumerable: true },
    borderEndEndRadius: { enumerable: true },
    borderEndStartRadius: { enumerable: true },
    borderImage: { enumerable: true },
    borderImageOutset: { enumerable: true },
    borderImageRepeat: { enumerable: true },
    borderImageSlice: { enumerable: true },
    borderImageSource: { enumerable: true },
    borderImageWidth: { enumerable: true },
    borderInline: { enumerable: true },
    borderInlineColor: { enumerable: true },
    borderInlineEnd: { enumerable: true },
    borderInlineEndColor: { enumerable: true },
    borderInlineEndStyle: { enumerable: true },
    borderInlineEndWidth: { enumerable: true },
    borderInlineStart: { enumerable: true },
    borderInlineStartColor: { enumerable: true },
    borderInlineStartStyle: { enumerable: true },
    borderInlineStartWidth: { enumerable: true },
    borderInlineStyle: { enumerable: true },
    borderInlineWidth: { enumerable: true },
    borderLeft: { enumerable: true },
    borderLeftColor: { enumerable: true },
    borderLeftStyle: { enumerable: true },
    borderLeftWidth: { enumerable: true },
    borderLimit: { enumerable: true },
    borderRadius: { enumerable: true },
    borderRight: { enumerable: true },
    borderRightColor: { enumerable: true },
    borderRightStyle: { enumerable: true },
    borderRightWidth: { enumerable: true },
    borderSpacing: { enumerable: true },
    borderStartEndRadius: { enumerable: true },
    borderStartStartRadius: { enumerable: true },
    borderStyle: { enumerable: true },
    borderTop: { enumerable: true },
    borderTopColor: { enumerable: true },
    borderTopLeftRadius: { enumerable: true },
    borderTopRightRadius: { enumerable: true },
    borderTopStyle: { enumerable: true },
    borderTopWidth: { enumerable: true },
    borderWidth: { enumerable: true },
    bottom: { enumerable: true },
    boxDecorationBreak: { enumerable: true },
    boxShadow: { enumerable: true },
    boxSizing: { enumerable: true },
    boxSnap: { enumerable: true },
    breakAfter: { enumerable: true },
    breakBefore: { enumerable: true },
    breakInside: { enumerable: true },
    captionSide: { enumerable: true },
    caret: { enumerable: true },
    caretColor: { enumerable: true },
    caretShape: { enumerable: true },
    clear: { enumerable: true },
    clip: { enumerable: true },
    clipPath: { enumerable: true },
    clipRule: { enumerable: true },
    color: { enumerable: true },
    colorAdjust: { enumerable: true },
    colorInterpolation: { enumerable: true },
    colorInterpolationFilters: { enumerable: true },
    colorScheme: { enumerable: true },
    columnCount: { enumerable: true },
    columnFill: { enumerable: true },
    columnGap: { enumerable: true },
    columnRule: { enumerable: true },
    columnRuleColor: { enumerable: true },
    columnRuleStyle: { enumerable: true },
    columnRuleWidth: { enumerable: true },
    columnSpan: { enumerable: true },
    columnWidth: { enumerable: true },
    columns: { enumerable: true },
    contain: { enumerable: true },
    containIntrinsicBlockSize: { enumerable: true },
    containIntrinsicHeight: { enumerable: true },
    containIntrinsicInlineSize: { enumerable: true },
    containIntrinsicSize: { enumerable: true },
    containIntrinsicWidth: { enumerable: true },
    content: { enumerable: true },
    contentVisibility: { enumerable: true },
    continue: { enumerable: true },
    copyInto: { enumerable: true },
    cornerShape: { enumerable: true },
    corners: { enumerable: true },
    counterIncrement: { enumerable: true },
    counterReset: { enumerable: true },
    counterSet: { enumerable: true },
    cue: { enumerable: true },
    cueAfter: { enumerable: true },
    cueBefore: { enumerable: true },
    cursor: { enumerable: true },
    cx: { enumerable: true },
    cy: { enumerable: true },
    d: { enumerable: true },
    direction: { enumerable: true },
    display: { enumerable: true },
    dominantBaseline: { enumerable: true },
    emptyCells: { enumerable: true },
    fill: { enumerable: true },
    fillBreak: { enumerable: true },
    fillColor: { enumerable: true },
    fillImage: { enumerable: true },
    fillOpacity: { enumerable: true },
    fillOrigin: { enumerable: true },
    fillPosition: { enumerable: true },
    fillRepeat: { enumerable: true },
    fillRule: { enumerable: true },
    fillSize: { enumerable: true },
    filter: { enumerable: true },
    flex: { enumerable: true },
    flexBasis: { enumerable: true },
    flexDirection: { enumerable: true },
    flexFlow: { enumerable: true },
    flexGrow: { enumerable: true },
    flexShrink: { enumerable: true },
    flexWrap: { enumerable: true },
    float: { enumerable: true },
    floatDefer: { enumerable: true },
    floatOffset: { enumerable: true },
    floatReference: { enumerable: true },
    floodColor: { enumerable: true },
    floodOpacity: { enumerable: true },
    flowFrom: { enumerable: true },
    flowInto: { enumerable: true },
    font: { enumerable: true },
    fontFamily: { enumerable: true },
    fontFeatureSettings: { enumerable: true },
    fontKerning: { enumerable: true },
    fontLanguageOverride: { enumerable: true },
    fontOpticalSizing: { enumerable: true },
    fontPalette: { enumerable: true },
    fontSize: { enumerable: true },
    fontSizeAdjust: { enumerable: true },
    fontStretch: { enumerable: true },
    fontStyle: { enumerable: true },
    fontSynthesis: { enumerable: true },
    fontSynthesisSmallCaps: { enumerable: true },
    fontSynthesisStyle: { enumerable: true },
    fontSynthesisWeight: { enumerable: true },
    fontVariant: { enumerable: true },
    fontVariantAlternates: { enumerable: true },
    fontVariantCaps: { enumerable: true },
    fontVariantEastAsian: { enumerable: true },
    fontVariantEmoji: { enumerable: true },
    fontVariantLigatures: { enumerable: true },
    fontVariantNumeric: { enumerable: true },
    fontVariantPosition: { enumerable: true },
    fontVariationSettings: { enumerable: true },
    fontWeight: { enumerable: true },
    footnoteDisplay: { enumerable: true },
    footnotePolicy: { enumerable: true },
    forcedColorAdjust: { enumerable: true },
    gap: { enumerable: true },
    glyphOrientationVertical: { enumerable: true },
    grid: { enumerable: true },
    gridArea: { enumerable: true },
    gridAutoColumns: { enumerable: true },
    gridAutoFlow: { enumerable: true },
    gridAutoRows: { enumerable: true },
    gridColumn: { enumerable: true },
    gridColumnEnd: { enumerable: true },
    gridColumnStart: { enumerable: true },
    gridRow: { enumerable: true },
    gridRowEnd: { enumerable: true },
    gridRowStart: { enumerable: true },
    gridTemplate: { enumerable: true },
    gridTemplateAreas: { enumerable: true },
    gridTemplateColumns: { enumerable: true },
    gridTemplateRows: { enumerable: true },
    hangingPunctuation: { enumerable: true },
    height: { enumerable: true },
    hyphenateCharacter: { enumerable: true },
    hyphenateLimitChars: { enumerable: true },
    hyphenateLimitLast: { enumerable: true },
    hyphenateLimitLines: { enumerable: true },
    hyphenateLimitZone: { enumerable: true },
    hyphens: { enumerable: true },
    imageOrientation: { enumerable: true },
    imageRendering: { enumerable: true },
    imageResolution: { enumerable: true },
    initialLetter: { enumerable: true },
    initialLetterAlign: { enumerable: true },
    initialLetterWrap: { enumerable: true },
    inlineSize: { enumerable: true },
    inlineSizing: { enumerable: true },
    inputSecurity: { enumerable: true },
    inset: { enumerable: true },
    insetBlock: { enumerable: true },
    insetBlockEnd: { enumerable: true },
    insetBlockStart: { enumerable: true },
    insetInline: { enumerable: true },
    insetInlineEnd: { enumerable: true },
    insetInlineStart: { enumerable: true },
    isolation: { enumerable: true },
    justifyContent: { enumerable: true },
    justifyItems: { enumerable: true },
    justifySelf: { enumerable: true },
    justifyTracks: { enumerable: true },
    leadingTrim: { enumerable: true },
    left: { enumerable: true },
    letterSpacing: { enumerable: true },
    lightingColor: { enumerable: true },
    lineBreak: { enumerable: true },
    lineClamp: { enumerable: true },
    lineGrid: { enumerable: true },
    lineHeight: { enumerable: true },
    lineHeightStep: { enumerable: true },
    linePadding: { enumerable: true },
    lineSnap: { enumerable: true },
    listStyle: { enumerable: true },
    listStyleImage: { enumerable: true },
    listStylePosition: { enumerable: true },
    listStyleType: { enumerable: true },
    margin: { enumerable: true },
    marginBlock: { enumerable: true },
    marginBlockEnd: { enumerable: true },
    marginBlockStart: { enumerable: true },
    marginBottom: { enumerable: true },
    marginBreak: { enumerable: true },
    marginInline: { enumerable: true },
    marginInlineEnd: { enumerable: true },
    marginInlineStart: { enumerable: true },
    marginLeft: { enumerable: true },
    marginRight: { enumerable: true },
    marginTop: { enumerable: true },
    marginTrim: { enumerable: true },
    marker: { enumerable: true },
    markerEnd: { enumerable: true },
    markerMid: { enumerable: true },
    markerSide: { enumerable: true },
    markerStart: { enumerable: true },
    mask: { enumerable: true },
    maskBorder: { enumerable: true },
    maskBorderMode: { enumerable: true },
    maskBorderOutset: { enumerable: true },
    maskBorderRepeat: { enumerable: true },
    maskBorderSlice: { enumerable: true },
    maskBorderSource: { enumerable: true },
    maskBorderWidth: { enumerable: true },
    maskClip: { enumerable: true },
    maskComposite: { enumerable: true },
    maskImage: { enumerable: true },
    maskMode: { enumerable: true },
    maskOrigin: { enumerable: true },
    maskPosition: { enumerable: true },
    maskRepeat: { enumerable: true },
    maskSize: { enumerable: true },
    maskType: { enumerable: true },
    masonryAutoFlow: { enumerable: true },
    maxBlockSize: { enumerable: true },
    maxHeight: { enumerable: true },
    maxInlineSize: { enumerable: true },
    maxLines: { enumerable: true },
    maxWidth: { enumerable: true },
    minBlockSize: { enumerable: true },
    minHeight: { enumerable: true },
    minInlineSize: { enumerable: true },
    minIntrinsicSizing: { enumerable: true },
    minWidth: { enumerable: true },
    mixBlendMode: { enumerable: true },
    navDown: { enumerable: true },
    navLeft: { enumerable: true },
    navRight: { enumerable: true },
    navUp: { enumerable: true },
    objectFit: { enumerable: true },
    objectPosition: { enumerable: true },
    offset: { enumerable: true },
    offsetAnchor: { enumerable: true },
    offsetDistance: { enumerable: true },
    offsetPath: { enumerable: true },
    offsetPosition: { enumerable: true },
    offsetRotate: { enumerable: true },
    opacity: { enumerable: true },
    order: { enumerable: true },
    orphans: { enumerable: true },
    outline: { enumerable: true },
    outlineColor: { enumerable: true },
    outlineOffset: { enumerable: true },
    outlineStyle: { enumerable: true },
    outlineWidth: { enumerable: true },
    overflow: { enumerable: true },
    overflowAnchor: { enumerable: true },
    overflowBlock: { enumerable: true },
    overflowClipMargin: { enumerable: true },
    overflowInline: { enumerable: true },
    overflowWrap: { enumerable: true },
    overflowX: { enumerable: true },
    overflowY: { enumerable: true },
    overscrollBehavior: { enumerable: true },
    overscrollBehaviorBlock: { enumerable: true },
    overscrollBehaviorInline: { enumerable: true },
    overscrollBehaviorX: { enumerable: true },
    overscrollBehaviorY: { enumerable: true },
    padding: { enumerable: true },
    paddingBlock: { enumerable: true },
    paddingBlockEnd: { enumerable: true },
    paddingBlockStart: { enumerable: true },
    paddingBottom: { enumerable: true },
    paddingInline: { enumerable: true },
    paddingInlineEnd: { enumerable: true },
    paddingInlineStart: { enumerable: true },
    paddingLeft: { enumerable: true },
    paddingRight: { enumerable: true },
    paddingTop: { enumerable: true },
    page: { enumerable: true },
    pageBreakAfter: { enumerable: true },
    pageBreakBefore: { enumerable: true },
    pageBreakInside: { enumerable: true },
    paintOrder: { enumerable: true },
    pause: { enumerable: true },
    pauseAfter: { enumerable: true },
    pauseBefore: { enumerable: true },
    perspective: { enumerable: true },
    perspectiveOrigin: { enumerable: true },
    placeContent: { enumerable: true },
    placeItems: { enumerable: true },
    placeSelf: { enumerable: true },
    pointerEvents: { enumerable: true },
    position: { enumerable: true },
    printColorAdjust: { enumerable: true },
    quotes: { enumerable: true },
    r: { enumerable: true },
    regionFragment: { enumerable: true },
    resize: { enumerable: true },
    rest: { enumerable: true },
    restAfter: { enumerable: true },
    restBefore: { enumerable: true },
    right: { enumerable: true },
    rotate: { enumerable: true },
    rowGap: { enumerable: true },
    rubyAlign: { enumerable: true },
    rubyMerge: { enumerable: true },
    rubyOverhang: { enumerable: true },
    rubyPosition: { enumerable: true },
    rx: { enumerable: true },
    ry: { enumerable: true },
    scale: { enumerable: true },
    scrollBehavior: { enumerable: true },
    scrollMargin: { enumerable: true },
    scrollMarginBlock: { enumerable: true },
    scrollMarginBlockEnd: { enumerable: true },
    scrollMarginBlockStart: { enumerable: true },
    scrollMarginBottom: { enumerable: true },
    scrollMarginInline: { enumerable: true },
    scrollMarginInlineEnd: { enumerable: true },
    scrollMarginInlineStart: { enumerable: true },
    scrollMarginLeft: { enumerable: true },
    scrollMarginRight: { enumerable: true },
    scrollMarginTop: { enumerable: true },
    scrollPadding: { enumerable: true },
    scrollPaddingBlock: { enumerable: true },
    scrollPaddingBlockEnd: { enumerable: true },
    scrollPaddingBlockStart: { enumerable: true },
    scrollPaddingBottom: { enumerable: true },
    scrollPaddingInline: { enumerable: true },
    scrollPaddingInlineEnd: { enumerable: true },
    scrollPaddingInlineStart: { enumerable: true },
    scrollPaddingLeft: { enumerable: true },
    scrollPaddingRight: { enumerable: true },
    scrollPaddingTop: { enumerable: true },
    scrollSnapAlign: { enumerable: true },
    scrollSnapStop: { enumerable: true },
    scrollSnapType: { enumerable: true },
    scrollbarColor: { enumerable: true },
    scrollbarGutter: { enumerable: true },
    scrollbarWidth: { enumerable: true },
    shapeImageThreshold: { enumerable: true },
    shapeInside: { enumerable: true },
    shapeMargin: { enumerable: true },
    shapeOutside: { enumerable: true },
    shapePadding: { enumerable: true },
    shapeRendering: { enumerable: true },
    shapeSubtract: { enumerable: true },
    spatialNavigationAction: { enumerable: true },
    spatialNavigationContain: { enumerable: true },
    spatialNavigationFunction: { enumerable: true },
    speak: { enumerable: true },
    speakAs: { enumerable: true },
    stopColor: { enumerable: true },
    stopOpacity: { enumerable: true },
    stringSet: { enumerable: true },
    stroke: { enumerable: true },
    strokeAlign: { enumerable: true },
    strokeAlignment: { enumerable: true },
    strokeBreak: { enumerable: true },
    strokeColor: { enumerable: true },
    strokeDashCorner: { enumerable: true },
    strokeDashJustify: { enumerable: true },
    strokeDashadjust: { enumerable: true },
    strokeDasharray: { enumerable: true },
    strokeDashcorner: { enumerable: true },
    strokeDashoffset: { enumerable: true },
    strokeImage: { enumerable: true },
    strokeLinecap: { enumerable: true },
    strokeLinejoin: { enumerable: true },
    strokeMiterlimit: { enumerable: true },
    strokeOpacity: { enumerable: true },
    strokeOrigin: { enumerable: true },
    strokePosition: { enumerable: true },
    strokeRepeat: { enumerable: true },
    strokeSize: { enumerable: true },
    strokeWidth: { enumerable: true },
    tabSize: { enumerable: true },
    tableLayout: { enumerable: true },
    textAlign: { enumerable: true },
    textAlignAll: { enumerable: true },
    textAlignLast: { enumerable: true },
    textAnchor: { enumerable: true },
    textCombineUpright: { enumerable: true },
    textDecoration: { enumerable: true },
    textDecorationColor: { enumerable: true },
    textDecorationLine: { enumerable: true },
    textDecorationSkip: { enumerable: true },
    textDecorationSkipBox: { enumerable: true },
    textDecorationSkipInk: { enumerable: true },
    textDecorationSkipInset: { enumerable: true },
    textDecorationSkipSelf: { enumerable: true },
    textDecorationSkipSpaces: { enumerable: true },
    textDecorationStyle: { enumerable: true },
    textDecorationThickness: { enumerable: true },
    textEdge: { enumerable: true },
    textEmphasis: { enumerable: true },
    textEmphasisColor: { enumerable: true },
    textEmphasisPosition: { enumerable: true },
    textEmphasisSkip: { enumerable: true },
    textEmphasisStyle: { enumerable: true },
    textGroupAlign: { enumerable: true },
    textIndent: { enumerable: true },
    textJustify: { enumerable: true },
    textOrientation: { enumerable: true },
    textOverflow: { enumerable: true },
    textRendering: { enumerable: true },
    textShadow: { enumerable: true },
    textSizeAdjust: { enumerable: true },
    textSpaceCollapse: { enumerable: true },
    textSpaceTrim: { enumerable: true },
    textSpacing: { enumerable: true },
    textTransform: { enumerable: true },
    textUnderlineOffset: { enumerable: true },
    textUnderlinePosition: { enumerable: true },
    textWrap: { enumerable: true },
    top: { enumerable: true },
    touchAction: { enumerable: true },
    transform: { enumerable: true },
    transformBox: { enumerable: true },
    transformOrigin: { enumerable: true },
    transformStyle: { enumerable: true },
    transition: { enumerable: true },
    transitionDelay: { enumerable: true },
    transitionDuration: { enumerable: true },
    transitionProperty: { enumerable: true },
    transitionTimingFunction: { enumerable: true },
    translate: { enumerable: true },
    unicodeBidi: { enumerable: true },
    userSelect: { enumerable: true },
    vectorEffect: { enumerable: true },
    verticalAlign: { enumerable: true },
    visibility: { enumerable: true },
    voiceBalance: { enumerable: true },
    voiceDuration: { enumerable: true },
    voiceFamily: { enumerable: true },
    voicePitch: { enumerable: true },
    voiceRange: { enumerable: true },
    voiceRate: { enumerable: true },
    voiceStress: { enumerable: true },
    voiceVolume: { enumerable: true },
    whiteSpace: { enumerable: true },
    widows: { enumerable: true },
    width: { enumerable: true },
    willChange: { enumerable: true },
    wordBoundaryDetection: { enumerable: true },
    wordBoundaryExpansion: { enumerable: true },
    wordBreak: { enumerable: true },
    wordSpacing: { enumerable: true },
    wordWrap: { enumerable: true },
    wrapAfter: { enumerable: true },
    wrapBefore: { enumerable: true },
    wrapFlow: { enumerable: true },
    wrapInside: { enumerable: true },
    wrapThrough: { enumerable: true },
    writingMode: { enumerable: true },
    x: { enumerable: true },
    y: { enumerable: true },
    zIndex: { enumerable: true },
    webkitAppearance: { enumerable: true },
    webkitAlignContent: { enumerable: true },
    webkitAlignItems: { enumerable: true },
    webkitAlignSelf: { enumerable: true },
    webkitAnimation: { enumerable: true },
    webkitAnimationDelay: { enumerable: true },
    webkitAnimationDirection: { enumerable: true },
    webkitAnimationDuration: { enumerable: true },
    webkitAnimationFillMode: { enumerable: true },
    webkitAnimationIterationCount: { enumerable: true },
    webkitAnimationName: { enumerable: true },
    webkitAnimationPlayState: { enumerable: true },
    webkitAnimationTimingFunction: { enumerable: true },
    webkitBackfaceVisibility: { enumerable: true },
    webkitBackgroundOrigin: { enumerable: true },
    webkitBackgroundSize: { enumerable: true },
    webkitBorderBottomLeftRadius: { enumerable: true },
    webkitBorderBottomRightRadius: { enumerable: true },
    webkitBorderRadius: { enumerable: true },
    webkitBorderTopLeftRadius: { enumerable: true },
    webkitBorderTopRightRadius: { enumerable: true },
    webkitBoxShadow: { enumerable: true },
    webkitBoxSizing: { enumerable: true },
    webkitFilter: { enumerable: true },
    webkitFlex: { enumerable: true },
    webkitFlexBasis: { enumerable: true },
    webkitFlexDirection: { enumerable: true },
    webkitFlexFlow: { enumerable: true },
    webkitFlexGrow: { enumerable: true },
    webkitFlexShrink: { enumerable: true },
    webkitFlexWrap: { enumerable: true },
    webkitJustifyContent: { enumerable: true },
    webkitLineClamp: { enumerable: true },
    webkitMask: { enumerable: true },
    webkitMaskClip: { enumerable: true },
    webkitMaskComposite: { enumerable: true },
    webkitMaskImage: { enumerable: true },
    webkitMaskOrigin: { enumerable: true },
    webkitMaskPosition: { enumerable: true },
    webkitMaskRepeat: { enumerable: true },
    webkitMaskSize: { enumerable: true },
    webkitOrder: { enumerable: true },
    webkitPerspective: { enumerable: true },
    webkitPerspectiveOrigin: { enumerable: true },
    webkitTransform: { enumerable: true },
    webkitTransformOrigin: { enumerable: true },
    webkitTransformStyle: { enumerable: true },
    webkitTransition: { enumerable: true },
    webkitTransitionDelay: { enumerable: true },
    webkitTransitionDuration: { enumerable: true },
    webkitTransitionProperty: { enumerable: true },
    webkitTransitionTimingFunction: { enumerable: true },
    webkitUserSelect: { enumerable: true },
    webkitTextSizeAdjust: { enumerable: true },
    webkitBoxAlign: { enumerable: true },
    webkitBoxFlex: { enumerable: true },
    webkitBoxOrdinalGroup: { enumerable: true },
    webkitBoxOrient: { enumerable: true },
    webkitBoxPack: { enumerable: true },
    webkitMaskBoxImage: { enumerable: true },
    webkitMaskBoxImageOutset: { enumerable: true },
    webkitMaskBoxImageRepeat: { enumerable: true },
    webkitMaskBoxImageSlice: { enumerable: true },
    webkitMaskBoxImageSource: { enumerable: true },
    webkitMaskBoxImageWidth: { enumerable: true },
    webkitBackgroundClip: { enumerable: true },
    webkitTextFillColor: { enumerable: true },
    webkitTextStroke: { enumerable: true },
    webkitTextStrokeColor: { enumerable: true },
    webkitTextStrokeWidth: { enumerable: true },
    "grid-column-gap": { enumerable: true },
    "grid-gap": { enumerable: true },
    "grid-row-gap": { enumerable: true },
    "-webkit-appearance": { enumerable: true },
    "-webkit-align-content": { enumerable: true },
    "-webkit-align-items": { enumerable: true },
    "-webkit-align-self": { enumerable: true },
    "-webkit-animation": { enumerable: true },
    "-webkit-animation-delay": { enumerable: true },
    "-webkit-animation-direction": { enumerable: true },
    "-webkit-animation-duration": { enumerable: true },
    "-webkit-animation-fill-mode": { enumerable: true },
    "-webkit-animation-iteration-count": { enumerable: true },
    "-webkit-animation-name": { enumerable: true },
    "-webkit-animation-play-state": { enumerable: true },
    "-webkit-animation-timing-function": { enumerable: true },
    "-webkit-backface-visibility": { enumerable: true },
    "-webkit-background-origin": { enumerable: true },
    "-webkit-background-size": { enumerable: true },
    "-webkit-border-bottom-left-radius": { enumerable: true },
    "-webkit-border-bottom-right-radius": { enumerable: true },
    "-webkit-border-radius": { enumerable: true },
    "-webkit-border-top-left-radius": { enumerable: true },
    "-webkit-border-top-right-radius": { enumerable: true },
    "-webkit-box-shadow": { enumerable: true },
    "-webkit-box-sizing": { enumerable: true },
    "-webkit-filter": { enumerable: true },
    "-webkit-flex": { enumerable: true },
    "-webkit-flex-basis": { enumerable: true },
    "-webkit-flex-direction": { enumerable: true },
    "-webkit-flex-flow": { enumerable: true },
    "-webkit-flex-grow": { enumerable: true },
    "-webkit-flex-shrink": { enumerable: true },
    "-webkit-flex-wrap": { enumerable: true },
    "-webkit-justify-content": { enumerable: true },
    "-webkit-line-clamp": { enumerable: true },
    "-webkit-mask": { enumerable: true },
    "-webkit-mask-clip": { enumerable: true },
    "-webkit-mask-composite": { enumerable: true },
    "-webkit-mask-image": { enumerable: true },
    "-webkit-mask-origin": { enumerable: true },
    "-webkit-mask-position": { enumerable: true },
    "-webkit-mask-repeat": { enumerable: true },
    "-webkit-mask-size": { enumerable: true },
    "-webkit-order": { enumerable: true },
    "-webkit-perspective": { enumerable: true },
    "-webkit-perspective-origin": { enumerable: true },
    "-webkit-transform": { enumerable: true },
    "-webkit-transform-origin": { enumerable: true },
    "-webkit-transform-style": { enumerable: true },
    "-webkit-transition": { enumerable: true },
    "-webkit-transition-delay": { enumerable: true },
    "-webkit-transition-duration": { enumerable: true },
    "-webkit-transition-property": { enumerable: true },
    "-webkit-transition-timing-function": { enumerable: true },
    "-webkit-user-select": { enumerable: true },
    "-webkit-text-size-adjust": { enumerable: true },
    "-webkit-box-align": { enumerable: true },
    "-webkit-box-flex": { enumerable: true },
    "-webkit-box-ordinal-group": { enumerable: true },
    "-webkit-box-orient": { enumerable: true },
    "-webkit-box-pack": { enumerable: true },
    "-webkit-mask-box-image": { enumerable: true },
    "-webkit-mask-box-image-outset": { enumerable: true },
    "-webkit-mask-box-image-repeat": { enumerable: true },
    "-webkit-mask-box-image-slice": { enumerable: true },
    "-webkit-mask-box-image-source": { enumerable: true },
    "-webkit-mask-box-image-width": { enumerable: true },
    "-webkit-background-clip": { enumerable: true },
    "-webkit-text-fill-color": { enumerable: true },
    "-webkit-text-stroke": { enumerable: true },
    "-webkit-text-stroke-color": { enumerable: true },
    "-webkit-text-stroke-width": { enumerable: true },
    "accent-color": { enumerable: true },
    "align-content": { enumerable: true },
    "align-items": { enumerable: true },
    "align-self": { enumerable: true },
    "align-tracks": { enumerable: true },
    "alignment-baseline": { enumerable: true },
    "animation-composition": { enumerable: true },
    "animation-delay": { enumerable: true },
    "animation-direction": { enumerable: true },
    "animation-duration": { enumerable: true },
    "animation-fill-mode": { enumerable: true },
    "animation-iteration-count": { enumerable: true },
    "animation-name": { enumerable: true },
    "animation-play-state": { enumerable: true },
    "animation-timeline": { enumerable: true },
    "animation-timing-function": { enumerable: true },
    "aspect-ratio": { enumerable: true },
    "backdrop-filter": { enumerable: true },
    "backface-visibility": { enumerable: true },
    "background-attachment": { enumerable: true },
    "background-blend-mode": { enumerable: true },
    "background-clip": { enumerable: true },
    "background-color": { enumerable: true },
    "background-image": { enumerable: true },
    "background-origin": { enumerable: true },
    "background-position": { enumerable: true },
    "background-position-block": { enumerable: true },
    "background-position-inline": { enumerable: true },
    "background-position-x": { enumerable: true },
    "background-position-y": { enumerable: true },
    "background-repeat": { enumerable: true },
    "background-size": { enumerable: true },
    "baseline-shift": { enumerable: true },
    "baseline-source": { enumerable: true },
    "block-ellipsis": { enumerable: true },
    "block-size": { enumerable: true },
    "block-step": { enumerable: true },
    "block-step-align": { enumerable: true },
    "block-step-insert": { enumerable: true },
    "block-step-round": { enumerable: true },
    "block-step-size": { enumerable: true },
    "bookmark-label": { enumerable: true },
    "bookmark-level": { enumerable: true },
    "bookmark-state": { enumerable: true },
    "border-block": { enumerable: true },
    "border-block-color": { enumerable: true },
    "border-block-end": { enumerable: true },
    "border-block-end-color": { enumerable: true },
    "border-block-end-style": { enumerable: true },
    "border-block-end-width": { enumerable: true },
    "border-block-start": { enumerable: true },
    "border-block-start-color": { enumerable: true },
    "border-block-start-style": { enumerable: true },
    "border-block-start-width": { enumerable: true },
    "border-block-style": { enumerable: true },
    "border-block-width": { enumerable: true },
    "border-bottom": { enumerable: true },
    "border-bottom-color": { enumerable: true },
    "border-bottom-left-radius": { enumerable: true },
    "border-bottom-right-radius": { enumerable: true },
    "border-bottom-style": { enumerable: true },
    "border-bottom-width": { enumerable: true },
    "border-boundary": { enumerable: true },
    "border-clip": { enumerable: true },
    "border-clip-bottom": { enumerable: true },
    "border-clip-left": { enumerable: true },
    "border-clip-right": { enumerable: true },
    "border-clip-top": { enumerable: true },
    "border-collapse": { enumerable: true },
    "border-color": { enumerable: true },
    "border-end-end-radius": { enumerable: true },
    "border-end-start-radius": { enumerable: true },
    "border-image": { enumerable: true },
    "border-image-outset": { enumerable: true },
    "border-image-repeat": { enumerable: true },
    "border-image-slice": { enumerable: true },
    "border-image-source": { enumerable: true },
    "border-image-width": { enumerable: true },
    "border-inline": { enumerable: true },
    "border-inline-color": { enumerable: true },
    "border-inline-end": { enumerable: true },
    "border-inline-end-color": { enumerable: true },
    "border-inline-end-style": { enumerable: true },
    "border-inline-end-width": { enumerable: true },
    "border-inline-start": { enumerable: true },
    "border-inline-start-color": { enumerable: true },
    "border-inline-start-style": { enumerable: true },
    "border-inline-start-width": { enumerable: true },
    "border-inline-style": { enumerable: true },
    "border-inline-width": { enumerable: true },
    "border-left": { enumerable: true },
    "border-left-color": { enumerable: true },
    "border-left-style": { enumerable: true },
    "border-left-width": { enumerable: true },
    "border-limit": { enumerable: true },
    "border-radius": { enumerable: true },
    "border-right": { enumerable: true },
    "border-right-color": { enumerable: true },
    "border-right-style": { enumerable: true },
    "border-right-width": { enumerable: true },
    "border-spacing": { enumerable: true },
    "border-start-end-radius": { enumerable: true },
    "border-start-start-radius": { enumerable: true },
    "border-style": { enumerable: true },
    "border-top": { enumerable: true },
    "border-top-color": { enumerable: true },
    "border-top-left-radius": { enumerable: true },
    "border-top-right-radius": { enumerable: true },
    "border-top-style": { enumerable: true },
    "border-top-width": { enumerable: true },
    "border-width": { enumerable: true },
    "box-decoration-break": { enumerable: true },
    "box-shadow": { enumerable: true },
    "box-sizing": { enumerable: true },
    "box-snap": { enumerable: true },
    "break-after": { enumerable: true },
    "break-before": { enumerable: true },
    "break-inside": { enumerable: true },
    "caption-side": { enumerable: true },
    "caret-color": { enumerable: true },
    "caret-shape": { enumerable: true },
    "clip-path": { enumerable: true },
    "clip-rule": { enumerable: true },
    "color-adjust": { enumerable: true },
    "color-interpolation": { enumerable: true },
    "color-interpolation-filters": { enumerable: true },
    "color-scheme": { enumerable: true },
    "column-count": { enumerable: true },
    "column-fill": { enumerable: true },
    "column-gap": { enumerable: true },
    "column-rule": { enumerable: true },
    "column-rule-color": { enumerable: true },
    "column-rule-style": { enumerable: true },
    "column-rule-width": { enumerable: true },
    "column-span": { enumerable: true },
    "column-width": { enumerable: true },
    "contain-intrinsic-block-size": { enumerable: true },
    "contain-intrinsic-height": { enumerable: true },
    "contain-intrinsic-inline-size": { enumerable: true },
    "contain-intrinsic-size": { enumerable: true },
    "contain-intrinsic-width": { enumerable: true },
    "content-visibility": { enumerable: true },
    "copy-into": { enumerable: true },
    "corner-shape": { enumerable: true },
    "counter-increment": { enumerable: true },
    "counter-reset": { enumerable: true },
    "counter-set": { enumerable: true },
    "cue-after": { enumerable: true },
    "cue-before": { enumerable: true },
    "dominant-baseline": { enumerable: true },
    "empty-cells": { enumerable: true },
    "fill-break": { enumerable: true },
    "fill-color": { enumerable: true },
    "fill-image": { enumerable: true },
    "fill-opacity": { enumerable: true },
    "fill-origin": { enumerable: true },
    "fill-position": { enumerable: true },
    "fill-repeat": { enumerable: true },
    "fill-rule": { enumerable: true },
    "fill-size": { enumerable: true },
    "flex-basis": { enumerable: true },
    "flex-direction": { enumerable: true },
    "flex-flow": { enumerable: true },
    "flex-grow": { enumerable: true },
    "flex-shrink": { enumerable: true },
    "flex-wrap": { enumerable: true },
    "float-defer": { enumerable: true },
    "float-offset": { enumerable: true },
    "float-reference": { enumerable: true },
    "flood-color": { enumerable: true },
    "flood-opacity": { enumerable: true },
    "flow-from": { enumerable: true },
    "flow-into": { enumerable: true },
    "font-family": { enumerable: true },
    "font-feature-settings": { enumerable: true },
    "font-kerning": { enumerable: true },
    "font-language-override": { enumerable: true },
    "font-optical-sizing": { enumerable: true },
    "font-palette": { enumerable: true },
    "font-size": { enumerable: true },
    "font-size-adjust": { enumerable: true },
    "font-stretch": { enumerable: true },
    "font-style": { enumerable: true },
    "font-synthesis": { enumerable: true },
    "font-synthesis-small-caps": { enumerable: true },
    "font-synthesis-style": { enumerable: true },
    "font-synthesis-weight": { enumerable: true },
    "font-variant": { enumerable: true },
    "font-variant-alternates": { enumerable: true },
    "font-variant-caps": { enumerable: true },
    "font-variant-east-asian": { enumerable: true },
    "font-variant-emoji": { enumerable: true },
    "font-variant-ligatures": { enumerable: true },
    "font-variant-numeric": { enumerable: true },
    "font-variant-position": { enumerable: true },
    "font-variation-settings": { enumerable: true },
    "font-weight": { enumerable: true },
    "footnote-display": { enumerable: true },
    "footnote-policy": { enumerable: true },
    "forced-color-adjust": { enumerable: true },
    "glyph-orientation-vertical": { enumerable: true },
    "grid-area": { enumerable: true },
    "grid-auto-columns": { enumerable: true },
    "grid-auto-flow": { enumerable: true },
    "grid-auto-rows": { enumerable: true },
    "grid-column": { enumerable: true },
    "grid-column-end": { enumerable: true },
    "grid-column-start": { enumerable: true },
    "grid-row": { enumerable: true },
    "grid-row-end": { enumerable: true },
    "grid-row-start": { enumerable: true },
    "grid-template": { enumerable: true },
    "grid-template-areas": { enumerable: true },
    "grid-template-columns": { enumerable: true },
    "grid-template-rows": { enumerable: true },
    "hanging-punctuation": { enumerable: true },
    "hyphenate-character": { enumerable: true },
    "hyphenate-limit-chars": { enumerable: true },
    "hyphenate-limit-last": { enumerable: true },
    "hyphenate-limit-lines": { enumerable: true },
    "hyphenate-limit-zone": { enumerable: true },
    "image-orientation": { enumerable: true },
    "image-rendering": { enumerable: true },
    "image-resolution": { enumerable: true },
    "initial-letter": { enumerable: true },
    "initial-letter-align": { enumerable: true },
    "initial-letter-wrap": { enumerable: true },
    "inline-size": { enumerable: true },
    "inline-sizing": { enumerable: true },
    "input-security": { enumerable: true },
    "inset-block": { enumerable: true },
    "inset-block-end": { enumerable: true },
    "inset-block-start": { enumerable: true },
    "inset-inline": { enumerable: true },
    "inset-inline-end": { enumerable: true },
    "inset-inline-start": { enumerable: true },
    "justify-content": { enumerable: true },
    "justify-items": { enumerable: true },
    "justify-self": { enumerable: true },
    "justify-tracks": { enumerable: true },
    "leading-trim": { enumerable: true },
    "letter-spacing": { enumerable: true },
    "lighting-color": { enumerable: true },
    "line-break": { enumerable: true },
    "line-clamp": { enumerable: true },
    "line-grid": { enumerable: true },
    "line-height": { enumerable: true },
    "line-height-step": { enumerable: true },
    "line-padding": { enumerable: true },
    "line-snap": { enumerable: true },
    "list-style": { enumerable: true },
    "list-style-image": { enumerable: true },
    "list-style-position": { enumerable: true },
    "list-style-type": { enumerable: true },
    "margin-block": { enumerable: true },
    "margin-block-end": { enumerable: true },
    "margin-block-start": { enumerable: true },
    "margin-bottom": { enumerable: true },
    "margin-break": { enumerable: true },
    "margin-inline": { enumerable: true },
    "margin-inline-end": { enumerable: true },
    "margin-inline-start": { enumerable: true },
    "margin-left": { enumerable: true },
    "margin-right": { enumerable: true },
    "margin-top": { enumerable: true },
    "margin-trim": { enumerable: true },
    "marker-end": { enumerable: true },
    "marker-mid": { enumerable: true },
    "marker-side": { enumerable: true },
    "marker-start": { enumerable: true },
    "mask-border": { enumerable: true },
    "mask-border-mode": { enumerable: true },
    "mask-border-outset": { enumerable: true },
    "mask-border-repeat": { enumerable: true },
    "mask-border-slice": { enumerable: true },
    "mask-border-source": { enumerable: true },
    "mask-border-width": { enumerable: true },
    "mask-clip": { enumerable: true },
    "mask-composite": { enumerable: true },
    "mask-image": { enumerable: true },
    "mask-mode": { enumerable: true },
    "mask-origin": { enumerable: true },
    "mask-position": { enumerable: true },
    "mask-repeat": { enumerable: true },
    "mask-size": { enumerable: true },
    "mask-type": { enumerable: true },
    "masonry-auto-flow": { enumerable: true },
    "max-block-size": { enumerable: true },
    "max-height": { enumerable: true },
    "max-inline-size": { enumerable: true },
    "max-lines": { enumerable: true },
    "max-width": { enumerable: true },
    "min-block-size": { enumerable: true },
    "min-height": { enumerable: true },
    "min-inline-size": { enumerable: true },
    "min-intrinsic-sizing": { enumerable: true },
    "min-width": { enumerable: true },
    "mix-blend-mode": { enumerable: true },
    "nav-down": { enumerable: true },
    "nav-left": { enumerable: true },
    "nav-right": { enumerable: true },
    "nav-up": { enumerable: true },
    "object-fit": { enumerable: true },
    "object-position": { enumerable: true },
    "offset-anchor": { enumerable: true },
    "offset-distance": { enumerable: true },
    "offset-path": { enumerable: true },
    "offset-position": { enumerable: true },
    "offset-rotate": { enumerable: true },
    "outline-color": { enumerable: true },
    "outline-offset": { enumerable: true },
    "outline-style": { enumerable: true },
    "outline-width": { enumerable: true },
    "overflow-anchor": { enumerable: true },
    "overflow-block": { enumerable: true },
    "overflow-clip-margin": { enumerable: true },
    "overflow-inline": { enumerable: true },
    "overflow-wrap": { enumerable: true },
    "overflow-x": { enumerable: true },
    "overflow-y": { enumerable: true },
    "overscroll-behavior": { enumerable: true },
    "overscroll-behavior-block": { enumerable: true },
    "overscroll-behavior-inline": { enumerable: true },
    "overscroll-behavior-x": { enumerable: true },
    "overscroll-behavior-y": { enumerable: true },
    "padding-block": { enumerable: true },
    "padding-block-end": { enumerable: true },
    "padding-block-start": { enumerable: true },
    "padding-bottom": { enumerable: true },
    "padding-inline": { enumerable: true },
    "padding-inline-end": { enumerable: true },
    "padding-inline-start": { enumerable: true },
    "padding-left": { enumerable: true },
    "padding-right": { enumerable: true },
    "padding-top": { enumerable: true },
    "page-break-after": { enumerable: true },
    "page-break-before": { enumerable: true },
    "page-break-inside": { enumerable: true },
    "paint-order": { enumerable: true },
    "pause-after": { enumerable: true },
    "pause-before": { enumerable: true },
    "perspective-origin": { enumerable: true },
    "place-content": { enumerable: true },
    "place-items": { enumerable: true },
    "place-self": { enumerable: true },
    "pointer-events": { enumerable: true },
    "print-color-adjust": { enumerable: true },
    "region-fragment": { enumerable: true },
    "rest-after": { enumerable: true },
    "rest-before": { enumerable: true },
    "row-gap": { enumerable: true },
    "ruby-align": { enumerable: true },
    "ruby-merge": { enumerable: true },
    "ruby-overhang": { enumerable: true },
    "ruby-position": { enumerable: true },
    "scroll-behavior": { enumerable: true },
    "scroll-margin": { enumerable: true },
    "scroll-margin-block": { enumerable: true },
    "scroll-margin-block-end": { enumerable: true },
    "scroll-margin-block-start": { enumerable: true },
    "scroll-margin-bottom": { enumerable: true },
    "scroll-margin-inline": { enumerable: true },
    "scroll-margin-inline-end": { enumerable: true },
    "scroll-margin-inline-start": { enumerable: true },
    "scroll-margin-left": { enumerable: true },
    "scroll-margin-right": { enumerable: true },
    "scroll-margin-top": { enumerable: true },
    "scroll-padding": { enumerable: true },
    "scroll-padding-block": { enumerable: true },
    "scroll-padding-block-end": { enumerable: true },
    "scroll-padding-block-start": { enumerable: true },
    "scroll-padding-bottom": { enumerable: true },
    "scroll-padding-inline": { enumerable: true },
    "scroll-padding-inline-end": { enumerable: true },
    "scroll-padding-inline-start": { enumerable: true },
    "scroll-padding-left": { enumerable: true },
    "scroll-padding-right": { enumerable: true },
    "scroll-padding-top": { enumerable: true },
    "scroll-snap-align": { enumerable: true },
    "scroll-snap-stop": { enumerable: true },
    "scroll-snap-type": { enumerable: true },
    "scrollbar-color": { enumerable: true },
    "scrollbar-gutter": { enumerable: true },
    "scrollbar-width": { enumerable: true },
    "shape-image-threshold": { enumerable: true },
    "shape-inside": { enumerable: true },
    "shape-margin": { enumerable: true },
    "shape-outside": { enumerable: true },
    "shape-padding": { enumerable: true },
    "shape-rendering": { enumerable: true },
    "shape-subtract": { enumerable: true },
    "spatial-navigation-action": { enumerable: true },
    "spatial-navigation-contain": { enumerable: true },
    "spatial-navigation-function": { enumerable: true },
    "speak-as": { enumerable: true },
    "stop-color": { enumerable: true },
    "stop-opacity": { enumerable: true },
    "string-set": { enumerable: true },
    "stroke-align": { enumerable: true },
    "stroke-alignment": { enumerable: true },
    "stroke-break": { enumerable: true },
    "stroke-color": { enumerable: true },
    "stroke-dash-corner": { enumerable: true },
    "stroke-dash-justify": { enumerable: true },
    "stroke-dashadjust": { enumerable: true },
    "stroke-dasharray": { enumerable: true },
    "stroke-dashcorner": { enumerable: true },
    "stroke-dashoffset": { enumerable: true },
    "stroke-image": { enumerable: true },
    "stroke-linecap": { enumerable: true },
    "stroke-linejoin": { enumerable: true },
    "stroke-miterlimit": { enumerable: true },
    "stroke-opacity": { enumerable: true },
    "stroke-origin": { enumerable: true },
    "stroke-position": { enumerable: true },
    "stroke-repeat": { enumerable: true },
    "stroke-size": { enumerable: true },
    "stroke-width": { enumerable: true },
    "tab-size": { enumerable: true },
    "table-layout": { enumerable: true },
    "text-align": { enumerable: true },
    "text-align-all": { enumerable: true },
    "text-align-last": { enumerable: true },
    "text-anchor": { enumerable: true },
    "text-combine-upright": { enumerable: true },
    "text-decoration": { enumerable: true },
    "text-decoration-color": { enumerable: true },
    "text-decoration-line": { enumerable: true },
    "text-decoration-skip": { enumerable: true },
    "text-decoration-skip-box": { enumerable: true },
    "text-decoration-skip-ink": { enumerable: true },
    "text-decoration-skip-inset": { enumerable: true },
    "text-decoration-skip-self": { enumerable: true },
    "text-decoration-skip-spaces": { enumerable: true },
    "text-decoration-style": { enumerable: true },
    "text-decoration-thickness": { enumerable: true },
    "text-edge": { enumerable: true },
    "text-emphasis": { enumerable: true },
    "text-emphasis-color": { enumerable: true },
    "text-emphasis-position": { enumerable: true },
    "text-emphasis-skip": { enumerable: true },
    "text-emphasis-style": { enumerable: true },
    "text-group-align": { enumerable: true },
    "text-indent": { enumerable: true },
    "text-justify": { enumerable: true },
    "text-orientation": { enumerable: true },
    "text-overflow": { enumerable: true },
    "text-rendering": { enumerable: true },
    "text-shadow": { enumerable: true },
    "text-size-adjust": { enumerable: true },
    "text-space-collapse": { enumerable: true },
    "text-space-trim": { enumerable: true },
    "text-spacing": { enumerable: true },
    "text-transform": { enumerable: true },
    "text-underline-offset": { enumerable: true },
    "text-underline-position": { enumerable: true },
    "text-wrap": { enumerable: true },
    "touch-action": { enumerable: true },
    "transform-box": { enumerable: true },
    "transform-origin": { enumerable: true },
    "transform-style": { enumerable: true },
    "transition-delay": { enumerable: true },
    "transition-duration": { enumerable: true },
    "transition-property": { enumerable: true },
    "transition-timing-function": { enumerable: true },
    "unicode-bidi": { enumerable: true },
    "user-select": { enumerable: true },
    "vector-effect": { enumerable: true },
    "vertical-align": { enumerable: true },
    "voice-balance": { enumerable: true },
    "voice-duration": { enumerable: true },
    "voice-family": { enumerable: true },
    "voice-pitch": { enumerable: true },
    "voice-range": { enumerable: true },
    "voice-rate": { enumerable: true },
    "voice-stress": { enumerable: true },
    "voice-volume": { enumerable: true },
    "white-space": { enumerable: true },
    "will-change": { enumerable: true },
    "word-boundary-detection": { enumerable: true },
    "word-boundary-expansion": { enumerable: true },
    "word-break": { enumerable: true },
    "word-spacing": { enumerable: true },
    "word-wrap": { enumerable: true },
    "wrap-after": { enumerable: true },
    "wrap-before": { enumerable: true },
    "wrap-flow": { enumerable: true },
    "wrap-inside": { enumerable: true },
    "wrap-through": { enumerable: true },
    "writing-mode": { enumerable: true },
    "z-index": { enumerable: true },
    [Symbol.toStringTag]: { value: "CSSStyleDeclaration", configurable: true },
    [Symbol.iterator]: { value: globalObject.Array.prototype[Symbol.iterator], configurable: true, writable: true }
  });
  ctorRegistry[interfaceName] = CSSStyleDeclaration;

  Object.defineProperty(globalObject, interfaceName, {
    configurable: true,
    writable: true,
    value: CSSStyleDeclaration
  });
};

const proxyHandlerCache = new WeakMap();
class ProxyHandler {
  constructor(globalObject) {
    this._globalObject = globalObject;
  }

  get(target, P, receiver) {
    if (typeof P === "symbol") {
      return Reflect.get(target, P, receiver);
    }
    const desc = this.getOwnPropertyDescriptor(target, P);
    if (desc === undefined) {
      const parent = Object.getPrototypeOf(target);
      if (parent === null) {
        return undefined;
      }
      return Reflect.get(target, P, receiver);
    }
    if (!desc.get && !desc.set) {
      return desc.value;
    }
    const getter = desc.get;
    if (getter === undefined) {
      return undefined;
    }
    return Reflect.apply(getter, receiver, []);
  }

  has(target, P) {
    if (typeof P === "symbol") {
      return Reflect.has(target, P);
    }
    const desc = this.getOwnPropertyDescriptor(target, P);
    if (desc !== undefined) {
      return true;
    }
    const parent = Object.getPrototypeOf(target);
    if (parent !== null) {
      return Reflect.has(parent, P);
    }
    return false;
  }

  ownKeys(target) {
    const keys = new Set();

    for (const key of target[implSymbol][utils.supportedPropertyIndices]) {
      keys.add(`${key}`);
    }

    for (const key of Reflect.ownKeys(target)) {
      keys.add(key);
    }
    return [...keys];
  }

  getOwnPropertyDescriptor(target, P) {
    if (typeof P === "symbol") {
      return Reflect.getOwnPropertyDescriptor(target, P);
    }
    let ignoreNamedProps = false;

    if (utils.isArrayIndexPropName(P)) {
      const index = P >>> 0;

      if (target[implSymbol][utils.supportsPropertyIndex](index)) {
        const indexedValue = target[implSymbol].item(index);
        return {
          writable: false,
          enumerable: true,
          configurable: true,
          value: utils.tryWrapperForImpl(indexedValue)
        };
      }
      ignoreNamedProps = true;
    }

    return Reflect.getOwnPropertyDescriptor(target, P);
  }

  set(target, P, V, receiver) {
    if (typeof P === "symbol") {
      return Reflect.set(target, P, V, receiver);
    }
    // The `receiver` argument refers to the Proxy exotic object or an object
    // that inherits from it, whereas `target` refers to the Proxy target:
    if (target[implSymbol][utils.wrapperSymbol] === receiver) {
      const globalObject = this._globalObject;
    }
    let ownDesc;

    if (utils.isArrayIndexPropName(P)) {
      const index = P >>> 0;

      if (target[implSymbol][utils.supportsPropertyIndex](index)) {
        const indexedValue = target[implSymbol].item(index);
        ownDesc = {
          writable: false,
          enumerable: true,
          configurable: true,
          value: utils.tryWrapperForImpl(indexedValue)
        };
      }
    }

    if (ownDesc === undefined) {
      ownDesc = Reflect.getOwnPropertyDescriptor(target, P);
    }
    if (ownDesc === undefined) {
      const parent = Reflect.getPrototypeOf(target);
      if (parent !== null) {
        return Reflect.set(parent, P, V, receiver);
      }
      ownDesc = { writable: true, enumerable: true, configurable: true, value: undefined };
    }
    if (!ownDesc.writable) {
      return false;
    }
    if (!utils.isObject(receiver)) {
      return false;
    }
    const existingDesc = Reflect.getOwnPropertyDescriptor(receiver, P);
    let valueDesc;
    if (existingDesc !== undefined) {
      if (existingDesc.get || existingDesc.set) {
        return false;
      }
      if (!existingDesc.writable) {
        return false;
      }
      valueDesc = { value: V };
    } else {
      valueDesc = { writable: true, enumerable: true, configurable: true, value: V };
    }
    return Reflect.defineProperty(receiver, P, valueDesc);
  }

  defineProperty(target, P, desc) {
    if (typeof P === "symbol") {
      return Reflect.defineProperty(target, P, desc);
    }

    const globalObject = this._globalObject;

    if (utils.isArrayIndexPropName(P)) {
      return false;
    }

    return Reflect.defineProperty(target, P, desc);
  }

  deleteProperty(target, P) {
    if (typeof P === "symbol") {
      return Reflect.deleteProperty(target, P);
    }

    const globalObject = this._globalObject;

    if (utils.isArrayIndexPropName(P)) {
      const index = P >>> 0;
      return !target[implSymbol][utils.supportsPropertyIndex](index);
    }

    return Reflect.deleteProperty(target, P);
  }

  preventExtensions() {
    return false;
  }
}

const Impl = require("./CSSStyleDeclaration-impl.js");
